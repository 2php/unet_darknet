cscope 15 $HOME/darknet/examples               0000372911
	@art.c

1 
	~"d¨k√t.h
"

3 
	~<sys/time.h
>

5 
	$demo_¨t
(*
cfgfûe
, *
weightfûe
, 
ˇm_ödex
)

7 #ifde‡
OPENCV


8 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

9 
	`£t_b©ch_√tw‹k
(
√t
, 1);

11 
	`§™d
(2222222);

12 
CvC≠tuª
 * 
ˇp
;

14 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

16 *
wödow
 = "ArtJudgementBot9000!!!";

17 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

18 
	`cvNamedWödow
(
wödow
, 
CV_WINDOW_NORMAL
);

19 
	`cvResizeWödow
(
wödow
, 512, 512);

20 
i
;

21 
idx
[] = {37, 401, 434};

22 
n
 = (
idx
)/(idx[0]);

25 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

26 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
->
w
,Çë->
h
);

27 
	`show_image
(
ö
, 
wödow
);

29 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

31 
	`¥ötf
("\033[2J");

32 
	`¥ötf
("\033[1;1H");

34 
sc‹e
 = 0;

35 
i
 = 0; i < 
n
; ++i){

36 
s
 = 
p
[
idx
[
i
]];

37 i‡(
s
 > 
sc‹e
) score = s;

39 
sc‹e
 = score;

40 
	`¥ötf
("I APPRECIATE THIS ARTWORK: %10.7f%%\n", 
sc‹e
*100);

41 
	`¥ötf
("[");

42 
uµî
 = 30;

43 
i
 = 0; i < 
uµî
; ++i){

44 
	`¥ötf
("%c", ((
i
+.5Ë< 
sc‹e
*
uµî
) ? 219 : ' ');

46 
	`¥ötf
("]\n");

48 
	`‰ì_image
(
ö_s
);

49 
	`‰ì_image
(
ö
);

51 
	`cvWaôKey
(1);

54 
	}
}

57 
	$run_¨t
(
¨gc
, **
¨gv
)

59 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

60 *
cfg
 = 
¨gv
[2];

61 *
weights
 = 
¨gv
[3];

62 
	`demo_¨t
(
cfg
, 
weights
, 
ˇm_ödex
);

63 
	}
}

	@attention.c

1 
	~"d¨k√t.h
"

3 
	~<sys/time.h
>

4 
	~<as£π.h
>

6 
	$exãnd_d©a_åuth
(
d©a
 *
d
, 
n
, 
vÆ
)

8 
i
, 
j
;

9 
i
 = 0; i < 
d
->
y
.
rows
; ++i){

10 
d
->
y
.
vÆs
[
i
] = 
	`ªÆloc
(d->y.vÆs[i], (d->y.
cﬁs
+
n
)*());

11 
j
 = 0; j < 
n
; ++j){

12 
d
->
y
.
vÆs
[
i
][d->y.
cﬁs
 + 
j
] = 
vÆ
;

15 
d
->
y
.
cﬁs
 +
n
;

16 
	}
}

18 
m©rix
 
	$√tw‹k_loss_d©a
(
√tw‹k
 *
√t
, 
d©a
 
ã°
)

20 
i
,
b
;

21 
k
 = 1;

22 
m©rix
 
¥ed
 = 
	`make_m©rix
(
ã°
.
X
.
rows
, 
k
);

23 *
X
 = 
	`ˇŒoc
(
√t
->
b©ch
*
ã°
.X.
cﬁs
, ());

24 *
y
 = 
	`ˇŒoc
(
√t
->
b©ch
*
ã°
.y.
cﬁs
, ());

25 
i
 = 0; i < 
ã°
.
X
.
rows
; i +
√t
->
b©ch
){

26 
b
 = 0; b < 
√t
->
b©ch
; ++b){

27 if(
i
+
b
 =
ã°
.
X
.
rows
) ;

28 
	`mem˝y
(
X
+
b
*
ã°
.X.
cﬁs
,Åe°.X.
vÆs
[
i
+b],Åest.X.cols*());

29 
	`mem˝y
(
y
+
b
*
ã°
.y.
cﬁs
,Åe°.y.
vÆs
[
i
+b],Åest.y.cols*());

32 
√tw‹k
 
‹ig
 = *
√t
;

33 
√t
->
öput
 = 
X
;

34 
√t
->
åuth
 = 
y
;

35 
√t
->
åaö
 = 0;

36 
√t
->
dñè
 = 0;

37 
	`f‹w¨d_√tw‹k
(
√t
);

38 *
√t
 = 
‹ig
;

40 *
dñè
 = 
√t
->
œyîs
[√t->
n
-1].
ouçut
;

41 
b
 = 0; b < 
√t
->
b©ch
; ++b){

42 if(
i
+
b
 =
ã°
.
X
.
rows
) ;

43 
t
 = 
	`max_ödex
(
y
 + 
b
*
ã°
.y.
cﬁs
, 1000);

44 
îr
 = 
	`sum_¨øy
(
dñè
 + 
b
*
√t
->
ouçuts
,Çet->outputs);

45 
¥ed
.
vÆs
[
i
+
b
][0] = -
îr
;

49 
	`‰ì
(
X
);

50 
	`‰ì
(
y
);

51  
¥ed
;

52 
	}
}

54 
	$åaö_©ã¡i⁄
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

56 
i
, 
j
;

58 
avg_˛s_loss
 = -1;

59 
avg_©t_loss
 = -1;

60 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

61 
	`¥ötf
("%s\n", 
ba£
);

62 
	`¥ötf
("%d\n", 
ngpus
);

63 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network*));

65 
	`§™d
(
	`time
(0));

66 
£ed
 = 
	`ønd
();

67 
i
 = 0; i < 
ngpus
; ++i){

68 
	`§™d
(
£ed
);

69 #ifde‡
GPU


70 
	`cuda_£t_devi˚
(
gpus
[
i
]);

72 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

73 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

75 
	`§™d
(
	`time
(0));

76 
√tw‹k
 *
√t
 = 
√ts
[0];

78 
imgs
 = 
√t
->
b©ch
 *Çë->
subdivisi⁄s
 * 
ngpus
;

80 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

81 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

83 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

84 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

85 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

86 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

88 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

89 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

90 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

91 
	`¥ötf
("%d\n", 
∂i°
->
size
);

92 
N
 = 
∂i°
->
size
;

93 
time
;

95 
divs
=3;

96 
size
=2;

98 
lﬂd_¨gs
 
¨gs
 = {0};

99 
¨gs
.
w
 = 
divs
*
√t
->w/
size
;

100 
¨gs
.
h
 = 
divs
*
√t
->h/
size
;

101 
¨gs
.
size
 = 
divs
*
√t
->
w
/size;

102 
¨gs
.
thªads
 = 32;

103 
¨gs
.
hõørchy
 = 
√t
->hierarchy;

105 
¨gs
.
mö
 = 
√t
->
mö_øtio
*¨gs.
w
;

106 
¨gs
.
max
 = 
√t
->
max_øtio
*¨gs.
w
;

107 
¨gs
.
™gÀ
 = 
√t
->angle;

108 
¨gs
.
a•e˘
 = 
√t
->aspect;

109 
¨gs
.
exposuª
 = 
√t
->exposure;

110 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

111 
¨gs
.
hue
 = 
√t
->hue;

113 
¨gs
.
∑ths
 =Öaths;

114 
¨gs
.
˛as£s
 = classes;

115 
¨gs
.
n
 = 
imgs
;

116 
¨gs
.
m
 = 
N
;

117 
¨gs
.
œbñs
 =Üabels;

118 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

120 
d©a
 
åaö
;

121 
d©a
 
buf„r
;

122 
±hªad_t
 
lﬂd_thªad
;

123 
¨gs
.
d
 = &
buf„r
;

124 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

126 
ïoch
 = (*
√t
->
£í
)/
N
;

127 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

128 
time
 = 
	`wh©_time_is_ô_now
();

130 
	`±hªad_joö
(
lﬂd_thªad
, 0);

131 
åaö
 = 
buf„r
;

132 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

133 
d©a
 
ªsized
 = 
	`ªsize_d©a
(
åaö
, 
√t
->
w
,Çë->
h
);

134 
	`exãnd_d©a_åuth
(&
ªsized
, 
divs
*divs, 0);

135 
d©a
 *
tûes
 = 
	`tûe_d©a
(
åaö
, 
divs
, 
size
);

137 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`wh©_time_is_ô_now
()-
time
);

138 
time
 = 
	`wh©_time_is_ô_now
();

140 
Æoss
 = 0;

141 
˛oss
 = 0;

142 
z
;

143 
i
 = 0; i < 
divs
*divs/
ngpus
; ++i) {

144 #¥agm®
omp
 
∑øŒñ
 

145 
j
 = 0; j < 
ngpus
; ++j){

146 
ödex
 = 
i
*
ngpus
 + 
j
;

147 
	`exãnd_d©a_åuth
(
tûes
+
ödex
, 
divs
*divs, 
SECRET_NUM
);

148 
m©rix
 
dñès
 = 
	`√tw‹k_loss_d©a
(
√ts
[
j
], 
tûes
[
ödex
]);

149 
z
 = 0; z < 
ªsized
.
y
.
rows
; ++z){

150 
ªsized
.
y
.
vÆs
[
z
][
åaö
.y.
cﬁs
 + 
ödex
] = 
dñès
.vals[z][0];

152 
	`‰ì_m©rix
(
dñès
);

155 *
öds
 = 
	`ˇŒoc
(
ªsized
.
y
.
rows
, ());

156 
z
 = 0; z < 
ªsized
.
y
.
rows
; ++z){

157 
ödex
 = 
	`max_ödex
(
ªsized
.
y
.
vÆs
[
z
] + 
åaö
.y.
cﬁs
, 
divs
*divs);

158 
öds
[
z
] = 
ödex
;

159 
i
 = 0; i < 
divs
*divs; ++i){

160 
ªsized
.
y
.
vÆs
[
z
][
åaö
.y.
cﬁs
 + 
i
] = (ò=
ödex
)? 1 : 0;

163 
d©a
 
be°
 = 
	`£À˘_d©a
(
tûes
, 
öds
);

164 
	`‰ì
(
öds
);

165 #ifde‡
GPU


166 i‡(
ngpus
 == 1) {

167 
˛oss
 = 
	`åaö_√tw‹k
(
√t
, 
be°
);

169 
˛oss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
be°
, 4);

172 
i
 = 0; i < 
divs
*divs; ++i) {

173 
	`¥ötf
("%.2‡", 
ªsized
.
y
.
vÆs
[0][
åaö
.y.
cﬁs
 + 
i
]);

174 if((
i
+1)%
divs
 =0Ë
	`¥ötf
("\n");

175 
	`‰ì_d©a
(
tûes
[
i
]);

177 
	`‰ì_d©a
(
be°
);

178 
	`¥ötf
("\n");

179 
image
 
im
 = 
	`Êﬂt_to_image
(64,64,3,
ªsized
.
X
.
vÆs
[0]);

188 #ifde‡
GPU


189 i‡(
ngpus
 == 1) {

190 
Æoss
 = 
	`åaö_√tw‹k
(
√t
, 
ªsized
);

192 
Æoss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
ªsized
, 4);

195 
i
 = 0; i < 
divs
*divs; ++i){

196 
	`¥ötf
("%‡", 
√ts
[0]->
ouçut
[1000 + 
i
]);

197 i‡((
i
+1Ë% 
divs
 =0Ë
	`¥ötf
("\n");

199 
	`¥ötf
("\n");

201 
	`‰ì_d©a
(
ªsized
);

202 
	`‰ì_d©a
(
åaö
);

203 if(
avg_˛s_loss
 =-1Ëavg_˛s_los†
˛oss
;

204 if(
avg_©t_loss
 =-1Ëavg_©t_los†
Æoss
;

205 
avg_˛s_loss
 =ávg_˛s_loss*.9 + 
˛oss
*.1;

206 
avg_©t_loss
 =ávg_©t_loss*.9 + 
Æoss
*.1;

208 
	`¥ötf
("%ld, %.3f: Aâ: %f, %‡avg, Cœss: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
Æoss
, 
avg_©t_loss
, 
˛oss
, 
avg_˛s_loss
, 
	`gë_cuºít_øã
“ë), 
	`wh©_time_is_ô_now
()-
time
, *net->seen);

209 if(*
√t
->
£í
/
N
 > 
ïoch
){

210 
ïoch
 = *
√t
->
£í
/
N
;

211 
buff
[256];

212 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

213 
	`ßve_weights
(
√t
, 
buff
);

215 if(
	`gë_cuºít_b©ch
(
√t
)%1000 == 0){

216 
buff
[256];

217 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

218 
	`ßve_weights
(
√t
, 
buff
);

221 
buff
[256];

222 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

223 
	`ßve_weights
(
√t
, 
buff
);

224 
	`±hªad_joö
(
lﬂd_thªad
, 0);

226 
	`‰ì_√tw‹k
(
√t
);

227 
	`‰ì_±rs
((**)
œbñs
, 
˛as£s
);

228 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

229 
	`‰ì_li°
(
∂i°
);

230 
	`‰ì
(
ba£
);

231 
	}
}

233 
	$vÆid©e_©ã¡i⁄_sögÀ
(*
d©acfg
, *
fûíame
, *
weightfûe
)

235 
i
, 
j
;

236 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

237 
	`£t_b©ch_√tw‹k
(
√t
, 1);

238 
	`§™d
(
	`time
(0));

240 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

242 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

243 *
Àaf_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "leaves", 0);

244 if(
Àaf_li°
Ë
	`ch™ge_Àaves
(
√t
->
hõørchy
,Üeaf_list);

245 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

246 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

247 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

249 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

250 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

252 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

253 
m
 = 
∂i°
->
size
;

254 
	`‰ì_li°
(
∂i°
);

256 
avg_acc
 = 0;

257 
avg_t›k
 = 0;

258 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

259 
divs
 = 4;

260 
size
 = 2;

261 
exåa
 = 0;

262 *
avgs
 = 
	`ˇŒoc
(
˛as£s
, ());

263 *
öds
 = 
	`ˇŒoc
(
divs
*divs, ());

265 
i
 = 0; i < 
m
; ++i){

266 
˛ass
 = -1;

267 *
∑th
 = 
∑ths
[
i
];

268 
j
 = 0; j < 
˛as£s
; ++j){

269 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

270 
˛ass
 = 
j
;

274 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

275 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
->
w
*
divs
/
size
);

276 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
->w*
divs
/
size
)/2, (ªsized.
h
 -Çet->h*divs/size)/2,Çet->w*divs/size,Çet->h*divs/size);

277 
image
 
r¸›
 = 
	`ªsize_image
(
¸›
, 
√t
->
w
,Çë->
h
);

281 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r¸›
.
d©a
);

283 
j
 = 0; j < 
divs
*divs; ++j){

284 
	`¥ötf
("%.2‡", 
¥ed
[
˛as£s
 + 
j
]);

285 if((
j
+1)%
divs
 =0Ë
	`¥ötf
("\n");

287 
	`¥ötf
("\n");

288 
	`c›y_˝u
(
˛as£s
, 
¥ed
, 1, 
avgs
, 1);

289 
	`t›_k
(
¥ed
 + 
˛as£s
, 
divs
*divs, divs*divs, 
öds
);

290 
	`show_image
(
¸›
, "crop");

291 
j
 = 0; j < 
exåa
; ++j){

292 
ödex
 = 
öds
[
j
];

293 
row
 = 
ödex
 / 
divs
;

294 
cﬁ
 = 
ödex
 % 
divs
;

295 
y
 = 
row
 * 
¸›
.
h
 / 
divs
 - (
√t
->h - crop.h/divs)/2;

296 
x
 = 
cﬁ
 * 
¸›
.
w
 / 
divs
 - (
√t
->w - crop.w/divs)/2;

297 
	`¥ötf
("%d %d %d %d\n", 
row
, 
cﬁ
, 
y
, 
x
);

298 
image
 
tûe
 = 
	`¸›_image
(
¸›
, 
x
, 
y
, 
√t
->
w
,Çë->
h
);

299 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
tûe
.
d©a
);

300 
	`axpy_˝u
(
˛as£s
, 1., 
¥ed
, 1, 
avgs
, 1);

301 
	`show_image
(
tûe
, "tile");

304 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥ed
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

306 if(
r¸›
.
d©a
 !
ªsized
.d©aË
	`‰ì_image
(rcrop);

307 if(
ªsized
.
d©a
 !
im
.d©aË
	`‰ì_image
(resized);

308 
	`‰ì_image
(
im
);

309 
	`‰ì_image
(
¸›
);

310 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

312 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

313 
j
 = 0; j < 
t›k
; ++j){

314 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

317 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

319 
	}
}

321 
	$vÆid©e_©ã¡i⁄_mu…i
(*
d©acfg
, *
fûíame
, *
weightfûe
)

323 
i
, 
j
;

324 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

325 
	`£t_b©ch_√tw‹k
(
√t
, 1);

326 
	`§™d
(
	`time
(0));

328 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

330 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

331 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

332 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

333 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

335 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

336 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

337 
sˇÀs
[] = {224, 288, 320, 352, 384};

338 
nsˇÀs
 = (
sˇÀs
)/(scales[0]);

340 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

341 
m
 = 
∂i°
->
size
;

342 
	`‰ì_li°
(
∂i°
);

344 
avg_acc
 = 0;

345 
avg_t›k
 = 0;

346 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

348 
i
 = 0; i < 
m
; ++i){

349 
˛ass
 = -1;

350 *
∑th
 = 
∑ths
[
i
];

351 
j
 = 0; j < 
˛as£s
; ++j){

352 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

353 
˛ass
 = 
j
;

357 *
¥ed
 = 
	`ˇŒoc
(
˛as£s
, ());

358 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

359 
j
 = 0; j < 
nsˇÀs
; ++j){

360 
image
 
r
 = 
	`ªsize_mö
(
im
, 
sˇÀs
[
j
]);

361 
	`ªsize_√tw‹k
(
√t
, 
r
.
w
,Ñ.
h
);

362 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r
.
d©a
);

363 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
p
,Çë->
ouçuts
,Çet->hierarchy, 1 , 1);

364 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

365 
	`Êù_image
(
r
);

366 
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r
.
d©a
);

367 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

368 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

370 
	`‰ì_image
(
im
);

371 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

372 
	`‰ì
(
¥ed
);

373 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

374 
j
 = 0; j < 
t›k
; ++j){

375 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

378 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

380 
	}
}

382 
	$¥edi˘_©ã¡i⁄
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
t›
)

384 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

385 
	`£t_b©ch_√tw‹k
(
√t
, 1);

386 
	`§™d
(2222222);

388 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

390 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

391 if(!
«me_li°
Ë«me_li° = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

392 if(
t›
 =0Ët› = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

394 
i
 = 0;

395 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

396 
˛ock_t
 
time
;

397 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

398 
buff
[256];

399 *
öput
 = 
buff
;

401 if(
fûíame
){

402 
	`°∫˝y
(
öput
, 
fûíame
, 256);

404 
	`¥ötf
("Enter Image Path: ");

405 
	`fÊush
(
°dout
);

406 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

407 if(!
öput
) ;

408 
	`°πok
(
öput
, "\n");

410 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

411 
image
 
r
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

415 *
X
 = 
r
.
d©a
;

416 
time
=
	`˛ock
();

417 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

418 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥edi˘i⁄s
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

419 
	`t›_k
(
¥edi˘i⁄s
, 
√t
->
ouçuts
, 
t›
, 
ödexes
);

420 
	`Ârötf
(
°dîr
, "%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

421 
i
 = 0; i < 
t›
; ++i){

422 
ödex
 = 
ödexes
[
i
];

425 
	`¥ötf
("%5.2f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

427 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

428 
	`‰ì_image
(
im
);

429 i‡(
fûíame
) ;

431 
	}
}

434 
	$run_©ã¡i⁄
(
¨gc
, **
¨gv
)

436 if(
¨gc
 < 4){

437 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

441 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

442 
ngpus
;

443 *
gpus
 = 
	`ªad_öéi°
(
gpu_li°
, &
ngpus
, 
gpu_ödex
);

446 
t›
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-t", 0);

447 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

448 *
d©a
 = 
¨gv
[3];

449 *
cfg
 = 
¨gv
[4];

450 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

451 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

452 *
œyî_s
 = (
¨gc
 > 7Ë? 
¨gv
[7]: 0;

453 if(0==
	`°rcmp
(
¨gv
[2], "¥edi˘")Ë
	`¥edi˘_©ã¡i⁄
(
d©a
, 
cfg
, 
weights
, 
fûíame
, 
t›
);

454 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_©ã¡i⁄
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

455 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_©ã¡i⁄_sögÀ
(
d©a
, 
cfg
, 
weights
);

456 if(0==
	`°rcmp
(
¨gv
[2], "vÆidmu…i")Ë
	`vÆid©e_©ã¡i⁄_mu…i
(
d©a
, 
cfg
, 
weights
);

457 
	}
}

	@captcha.c

1 
	~"d¨k√t.h
"

3 
	$fix_d©a_ˇ±cha
(
d©a
 
d
, 
mask
)

5 
m©rix
 
œbñs
 = 
d
.
y
;

6 
i
, 
j
;

7 
i
 = 0; i < 
d
.
y
.
rows
; ++i){

8 
j
 = 0; j < 
d
.
y
.
cﬁs
; j += 2){

9 i‡(
mask
){

10 if(!
œbñs
.
vÆs
[
i
][
j
]){

11 
œbñs
.
vÆs
[
i
][
j
] = 
SECRET_NUM
;

12 
œbñs
.
vÆs
[
i
][
j
+1] = 
SECRET_NUM
;

13 }if(
œbñs
.
vÆs
[
i
][
j
+1]){

14 
œbñs
.
vÆs
[
i
][
j
] = 0;

17 i‡(
œbñs
.
vÆs
[
i
][
j
]) {

18 
œbñs
.
vÆs
[
i
][
j
+1] = 0;

20 
œbñs
.
vÆs
[
i
][
j
+1] = 1;

25 
	}
}

27 
	$åaö_ˇ±cha
(*
cfgfûe
, *
weightfûe
)

29 
	`§™d
(
	`time
(0));

30 
avg_loss
 = -1;

31 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

32 
	`¥ötf
("%s\n", 
ba£
);

33 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

34 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

35 
imgs
 = 1024;

36 
i
 = *
√t
->
£í
/
imgs
;

37 
sﬁved
 = 1;

38 
li°
 *
∂i°
;

39 **
œbñs
 = 
	`gë_œbñs
("/data/captcha/reimgs.labels.list");

40 i‡(
sﬁved
){

41 
∂i°
 = 
	`gë_∑ths
("/data/captcha/reimgs.solved.list");

43 
∂i°
 = 
	`gë_∑ths
("/data/captcha/reimgs.raw.list");

45 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

46 
	`¥ötf
("%d\n", 
∂i°
->
size
);

47 
˛ock_t
 
time
;

48 
±hªad_t
 
lﬂd_thªad
;

49 
d©a
 
åaö
;

50 
d©a
 
buf„r
;

52 
lﬂd_¨gs
 
¨gs
 = {0};

53 
¨gs
.
w
 = 
√t
->w;

54 
¨gs
.
h
 = 
√t
->h;

55 
¨gs
.
∑ths
 =Öaths;

56 
¨gs
.
˛as£s
 = 26;

57 
¨gs
.
n
 = 
imgs
;

58 
¨gs
.
m
 = 
∂i°
->
size
;

59 
¨gs
.
œbñs
 =Üabels;

60 
¨gs
.
d
 = &
buf„r
;

61 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

63 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

65 ++
i
;

66 
time
=
	`˛ock
();

67 
	`±hªad_joö
(
lﬂd_thªad
, 0);

68 
åaö
 = 
buf„r
;

69 
	`fix_d©a_ˇ±cha
(
åaö
, 
sﬁved
);

77 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

78 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

79 
time
=
	`˛ock
();

80 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

81 if(
avg_loss
 =-1Ëavg_los†
loss
;

82 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

83 
	`¥ötf
("%d: %f, %‡avg, %l‡£c⁄ds, %ld images\n", 
i
, 
loss
, 
avg_loss
, 
	`£c
(
	`˛ock
()-
time
), *
√t
->
£í
);

84 
	`‰ì_d©a
(
åaö
);

85 if(
i
%100==0){

86 
buff
[256];

87 
	`•rötf
(
buff
, "/home/pjªddõ/imagíë_backup/%s_%d.weights",
ba£
, 
i
);

88 
	`ßve_weights
(
√t
, 
buff
);

91 
	}
}

93 
	$ã°_ˇ±cha
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

95 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

96 
	`£t_b©ch_√tw‹k
(
√t
, 1);

97 
	`§™d
(2222222);

98 
i
 = 0;

99 **
«mes
 = 
	`gë_œbñs
("/data/captcha/reimgs.labels.list");

100 
buff
[256];

101 *
öput
 = 
buff
;

102 
ödexes
[26];

104 if(
fûíame
){

105 
	`°∫˝y
(
öput
, 
fûíame
, 256);

109 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

110 if(!
öput
) ;

111 
	`°πok
(
öput
, "\n");

113 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 
√t
->
w
,Çë->
h
);

114 *
X
 = 
im
.
d©a
;

115 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

116 
	`t›_¥edi˘i⁄s
(
√t
, 26, 
ödexes
);

118 
i
 = 0; i < 26; ++i){

119 
ödex
 = 
ödexes
[
i
];

120 if(
i
 !0Ë
	`¥ötf
(", ");

121 
	`¥ötf
("%†%f", 
«mes
[
ödex
], 
¥edi˘i⁄s
[index]);

123 
	`¥ötf
("\n");

124 
	`fÊush
(
°dout
);

125 
	`‰ì_image
(
im
);

126 i‡(
fûíame
) ;

128 
	}
}

130 
	$vÆid_ˇ±cha
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

132 **
œbñs
 = 
	`gë_œbñs
("/data/captcha/reimgs.labels.list");

133 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

134 
li°
 *
∂i°
 = 
	`gë_∑ths
("/data/captcha/reimgs.fg.list");

135 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

136 
N
 = 
∂i°
->
size
;

137 
ouçuts
 = 
√t
->outputs;

139 
	`£t_b©ch_√tw‹k
(
√t
, 1);

140 
	`§™d
(2222222);

141 
i
, 
j
;

142 
i
 = 0; i < 
N
; ++i){

143 i‡(
i
%100 =0Ë
	`Ârötf
(
°dîr
, "%d\n", i);

144 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 
√t
->
w
,Çë->
h
);

145 *
X
 = 
im
.
d©a
;

146 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

148 
åuth
 = -1;

149 
j
 = 0; j < 13; ++j){

150 i‡(
	`°r°r
(
∑ths
[
i
], 
œbñs
[
j
])Ë
åuth
 = j;

152 i‡(
åuth
 == -1){

153 
	`Ârötf
(
°dîr
, "bad: %s\n", 
∑ths
[
i
]);

156 
	`¥ötf
("%d, ", 
åuth
);

157 
j
 = 0; j < 
ouçuts
; ++j){

158 i‡(
j
 !0Ë
	`¥ötf
(", ");

159 
	`¥ötf
("%f", 
¥edi˘i⁄s
[
j
]);

161 
	`¥ötf
("\n");

162 
	`fÊush
(
°dout
);

163 
	`‰ì_image
(
im
);

164 i‡(
fûíame
) ;

166 
	}
}

335 
	$run_ˇ±cha
(
¨gc
, **
¨gv
)

337 if(
¨gc
 < 4){

338 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

342 *
cfg
 = 
¨gv
[3];

343 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

344 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

345 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ˇ±cha
(
cfg
, 
weights
);

346 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_ˇ±cha
(
cfg
, 
weights
, 
fûíame
);

347 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid_ˇ±cha
(
cfg
, 
weights
, 
fûíame
);

352 
	}
}

	@cifar.c

1 
	~"d¨k√t.h
"

3 
	$åaö_ciÁr
(*
cfgfûe
, *
weightfûe
)

5 
	`§™d
(
	`time
(0));

6 
avg_loss
 = -1;

7 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

8 
	`¥ötf
("%s\n", 
ba£
);

9 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

10 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

12 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

13 
˛as£s
 = 10;

14 
N
 = 50000;

16 **
œbñs
 = 
	`gë_œbñs
("data/cifar/labels.txt");

17 
ïoch
 = (*
√t
->
£í
)/
N
;

18 
d©a
 
åaö
 = 
	`lﬂd_Æl_ciÁr10
();

19 
	`¥ötf
("came here");

20 
i
=0; i < 32; i++){

21 
	`¥ötf
("ˇmêhîe%f\n",()
åaö
.
X
.
vÆs
[0][
i
]);

23 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

24 
˛ock_t
 
time
=
	`˛ock
();

26 
loss
 = 
	`åaö_√tw‹k_sgd
(
√t
, 
åaö
, 1);

27 if(
avg_loss
 =-1Ëavg_los†
loss
;

28 
avg_loss
 =ávg_loss*.95 + 
loss
*.05;

29 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net->seen);

30 if(*
√t
->
£í
/
N
 > 
ïoch
){

31 
ïoch
 = *
√t
->
£í
/
N
;

32 
buff
[256];

33 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

34 
	`ßve_weights
(
√t
, 
buff
);

36 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

37 
buff
[256];

38 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

39 
	`ßve_weights
(
√t
, 
buff
);

42 
buff
[256];

43 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

44 
	`ßve_weights
(
√t
, 
buff
);

46 
	`‰ì_√tw‹k
(
√t
);

47 
	`‰ì_±rs
((**)
œbñs
, 
˛as£s
);

48 
	`‰ì
(
ba£
);

49 
	`‰ì_d©a
(
åaö
);

50 
	}
}

52 
	$åaö_ciÁr_di°ûl
(*
cfgfûe
, *
weightfûe
)

54 
	`§™d
(
	`time
(0));

55 
avg_loss
 = -1;

56 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

57 
	`¥ötf
("%s\n", 
ba£
);

58 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

59 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

61 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

62 
˛as£s
 = 10;

63 
N
 = 50000;

65 **
œbñs
 = 
	`gë_œbñs
("data/cifar/labels.txt");

66 
ïoch
 = (*
√t
->
£í
)/
N
;

68 
d©a
 
åaö
 = 
	`lﬂd_Æl_ciÁr10
();

69 
m©rix
 
so·
 = 
	`csv_to_m©rix
("results/ensemble.csv");

71 
weight
 = .9;

72 
	`sˇÀ_m©rix
(
so·
, 
weight
);

73 
	`sˇÀ_m©rix
(
åaö
.
y
, 1. - 
weight
);

74 
	`m©rix_add_m©rix
(
so·
, 
åaö
.
y
);

76 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

77 
˛ock_t
 
time
=
	`˛ock
();

79 
loss
 = 
	`åaö_√tw‹k_sgd
(
√t
, 
åaö
, 1);

80 if(
avg_loss
 =-1Ëavg_los†
loss
;

81 
avg_loss
 =ávg_loss*.95 + 
loss
*.05;

82 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net->seen);

83 if(*
√t
->
£í
/
N
 > 
ïoch
){

84 
ïoch
 = *
√t
->
£í
/
N
;

85 
buff
[256];

86 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

87 
	`ßve_weights
(
√t
, 
buff
);

89 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

90 
buff
[256];

91 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

92 
	`ßve_weights
(
√t
, 
buff
);

95 
buff
[256];

96 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

97 
	`ßve_weights
(
√t
, 
buff
);

99 
	`‰ì_√tw‹k
(
√t
);

100 
	`‰ì_±rs
((**)
œbñs
, 
˛as£s
);

101 
	`‰ì
(
ba£
);

102 
	`‰ì_d©a
(
åaö
);

103 
	}
}

105 
	$ã°_ciÁr_mu…i
(*
fûíame
, *
weightfûe
)

107 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

108 
	`£t_b©ch_√tw‹k
(
√t
, 1);

109 
	`§™d
(
	`time
(0));

111 
avg_acc
 = 0;

112 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

114 
i
;

115 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

116 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

118 
¥ed
[10] = {0};

120 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

121 
	`axpy_˝u
(10, 1, 
p
, 1, 
¥ed
, 1);

122 
	`Êù_image
(
im
);

123 
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

124 
	`axpy_˝u
(10, 1, 
p
, 1, 
¥ed
, 1);

126 
ödex
 = 
	`max_ödex
(
¥ed
, 10);

127 
˛ass
 = 
	`max_ödex
(
ã°
.
y
.
vÆs
[
i
], 10);

128 if(
ödex
 =
˛ass
Ë
avg_acc
 += 1;

129 
	`‰ì_image
(
im
);

130 
	`¥ötf
("%4d: %.2f%%\n", 
i
, 100.*
avg_acc
/(i+1));

132 
	}
}

134 
	$ã°_ciÁr
(*
fûíame
, *
weightfûe
)

136 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

137 
	`§™d
(
	`time
(0));

139 
˛ock_t
 
time
;

140 
avg_acc
 = 0;

141 
avg_t›5
 = 0;

142 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

144 
time
=
	`˛ock
();

146 *
acc
 = 
	`√tw‹k_accuøcõs
(
√t
, 
ã°
, 2);

147 
avg_acc
 +
acc
[0];

148 
avg_t›5
 +
acc
[1];

149 
	`¥ötf
("t›1: %f, %l‡£c⁄ds, %d images\n", 
avg_acc
, 
	`£c
(
	`˛ock
()-
time
), 
ã°
.
X
.
rows
);

150 
	`‰ì_d©a
(
ã°
);

151 
	}
}

153 
	$exåa˘_ciÁr
()

155 *
œbñs
[] = {"airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"};

156 
i
;

157 
d©a
 
åaö
 = 
	`lﬂd_Æl_ciÁr10
();

158 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

159 
i
 = 0; i < 
åaö
.
X
.
rows
; ++i){

160 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
åaö
.
X
.
vÆs
[
i
]);

161 
˛ass
 = 
	`max_ödex
(
åaö
.
y
.
vÆs
[
i
], 10);

162 
buff
[256];

163 
	`•rötf
(
buff
, "d©a/ciÁr/åaö/%d_%s",
i
,
œbñs
[
˛ass
]);

164 
	`ßve_image_≤g
(
im
, 
buff
);

166 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

167 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

168 
˛ass
 = 
	`max_ödex
(
ã°
.
y
.
vÆs
[
i
], 10);

169 
buff
[256];

170 
	`•rötf
(
buff
, "d©a/ciÁr/ã°/%d_%s",
i
,
œbñs
[
˛ass
]);

171 
	`ßve_image_≤g
(
im
, 
buff
);

173 
	}
}

175 
	$ã°_ciÁr_csv
(*
fûíame
, *
weightfûe
)

177 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

178 
	`§™d
(
	`time
(0));

180 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

182 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

184 
i
;

185 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

186 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

187 
	`Êù_image
(
im
);

189 
m©rix
 
¥ed2
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

190 
	`sˇÀ_m©rix
(
¥ed
, .5);

191 
	`sˇÀ_m©rix
(
¥ed2
, .5);

192 
	`m©rix_add_m©rix
(
¥ed2
, 
¥ed
);

194 
	`m©rix_to_csv
(
¥ed
);

195 
	`Ârötf
(
°dîr
, "Accuøcy: %f\n", 
	`m©rix_t›k_accuøcy
(
ã°
.
y
, 
¥ed
, 1));

196 
	`‰ì_d©a
(
ã°
);

197 
	}
}

199 
	$ã°_ciÁr_csvåaö
(*
cfg
, *
weights
)

201 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

202 
	`§™d
(
	`time
(0));

204 
d©a
 
ã°
 = 
	`lﬂd_Æl_ciÁr10
();

206 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

208 
i
;

209 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

210 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

211 
	`Êù_image
(
im
);

213 
m©rix
 
¥ed2
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

214 
	`sˇÀ_m©rix
(
¥ed
, .5);

215 
	`sˇÀ_m©rix
(
¥ed2
, .5);

216 
	`m©rix_add_m©rix
(
¥ed2
, 
¥ed
);

218 
	`m©rix_to_csv
(
¥ed
);

219 
	`Ârötf
(
°dîr
, "Accuøcy: %f\n", 
	`m©rix_t›k_accuøcy
(
ã°
.
y
, 
¥ed
, 1));

220 
	`‰ì_d©a
(
ã°
);

221 
	}
}

223 
	$evÆ_ciÁr_csv
()

225 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

227 
m©rix
 
¥ed
 = 
	`csv_to_m©rix
("results/combined.csv");

228 
	`Ârötf
(
°dîr
, "%d %d\n", 
¥ed
.
rows
,Öªd.
cﬁs
);

230 
	`Ârötf
(
°dîr
, "Accuøcy: %f\n", 
	`m©rix_t›k_accuøcy
(
ã°
.
y
, 
¥ed
, 1));

231 
	`‰ì_d©a
(
ã°
);

232 
	`‰ì_m©rix
(
¥ed
);

233 
	}
}

236 
	$run_ciÁr
(
¨gc
, **
¨gv
)

238 if(
¨gc
 < 4){

239 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

243 *
cfg
 = 
¨gv
[3];

244 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

245 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ciÁr
(
cfg
, 
weights
);

246 if(0==
	`°rcmp
(
¨gv
[2], "exåa˘")Ë
	`exåa˘_ciÁr
();

247 if(0==
	`°rcmp
(
¨gv
[2], "di°ûl")Ë
	`åaö_ciÁr_di°ûl
(
cfg
, 
weights
);

248 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_ciÁr
(
cfg
, 
weights
);

249 if(0==
	`°rcmp
(
¨gv
[2], "mu…i")Ë
	`ã°_ciÁr_mu…i
(
cfg
, 
weights
);

250 if(0==
	`°rcmp
(
¨gv
[2], "csv")Ë
	`ã°_ciÁr_csv
(
cfg
, 
weights
);

251 if(0==
	`°rcmp
(
¨gv
[2], "csvåaö")Ë
	`ã°_ciÁr_csvåaö
(
cfg
, 
weights
);

252 if(0==
	`°rcmp
(
¨gv
[2], "evÆ")Ë
	`evÆ_ciÁr_csv
();

253 
	}
}

	@classifier.c

1 
	~"d¨k√t.h
"

3 
	~<sys/time.h
>

4 
	~<as£π.h
>

6 *
	$gë_ªgªssi⁄_vÆues
(**
œbñs
, 
n
)

8 *
v
 = 
	`ˇŒoc
(
n
, ());

9 
i
;

10 
i
 = 0; i < 
n
; ++i){

11 *
p
 = 
	`°rchr
(
œbñs
[
i
], ' ');

12 *
p
 = 0;

13 
v
[
i
] = 
	`©of
(
p
+1);

15  
v
;

16 
	}
}

18 
	$åaö_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

20 
i
;

22 
avg_loss
 = -1;

23 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

24 
	`¥ötf
("%s\n", 
ba£
);

25 
	`¥ötf
("%d\n", 
ngpus
);

26 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network*));

28 
	`§™d
(
	`time
(0));

29 
£ed
 = 
	`ønd
();

30 
i
 = 0; i < 
ngpus
; ++i){

31 
	`§™d
(
£ed
);

32 #ifde‡
GPU


33 
	`cuda_£t_devi˚
(
gpus
[
i
]);

35 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

36 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

38 
	`§™d
(
	`time
(0));

39 
√tw‹k
 *
√t
 = 
√ts
[0];

41 
imgs
 = 
√t
->
b©ch
 *Çë->
subdivisi⁄s
 * 
ngpus
;

43 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

44 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

46 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

47 
èg
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "tag", 0);

48 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

49 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

50 *
åì
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "tree", 0);

51 i‡(
åì
Ë
√t
->
hõørchy
 = 
	`ªad_åì
(tree);

52 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

54 **
œbñs
 = 0;

55 if(!
èg
){

56 
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

58 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

59 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

60 
	`¥ötf
("%d\n", 
∂i°
->
size
);

61 
N
 = 
∂i°
->
size
;

62 
time
;

64 
lﬂd_¨gs
 
¨gs
 = {0};

65 
¨gs
.
w
 = 
√t
->w;

66 
¨gs
.
h
 = 
√t
->h;

67 
¨gs
.
thªads
 = 32;

68 
¨gs
.
hõørchy
 = 
√t
->hierarchy;

70 
¨gs
.
mö
 = 
√t
->
mö_øtio
*√t->
w
;

71 
¨gs
.
max
 = 
√t
->
max_øtio
*√t->
w
;

72 
	`¥ötf
("%d %d\n", 
¨gs
.
mö
,árgs.
max
);

73 
¨gs
.
™gÀ
 = 
√t
->angle;

74 
¨gs
.
a•e˘
 = 
√t
->aspect;

75 
¨gs
.
exposuª
 = 
√t
->exposure;

76 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

77 
¨gs
.
hue
 = 
√t
->hue;

78 
¨gs
.
size
 = 
√t
->
w
;

80 
¨gs
.
∑ths
 =Öaths;

81 
¨gs
.
˛as£s
 = classes;

82 
¨gs
.
n
 = 
imgs
;

83 
¨gs
.
m
 = 
N
;

84 
¨gs
.
œbñs
 =Üabels;

85 i‡(
èg
){

86 
¨gs
.
ty≥
 = 
TAG_DATA
;

88 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

91 
d©a
 
åaö
;

92 
d©a
 
buf„r
;

93 
±hªad_t
 
lﬂd_thªad
;

94 
¨gs
.
d
 = &
buf„r
;

95 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

97 
cou¡
 = 0;

98 
ïoch
 = (*
√t
->
£í
)/
N
;

99 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

100 if(
√t
->
øndom
 && 
cou¡
++%40 == 0){

101 
	`¥ötf
("Resizing\n");

102 
dim
 = (
	`ønd
() % 11 + 4) * 32;

105 
	`¥ötf
("%d\n", 
dim
);

106 
¨gs
.
w
 = 
dim
;

107 
¨gs
.
h
 = 
dim
;

108 
¨gs
.
size
 = 
dim
;

109 
¨gs
.
mö
 = 
√t
->
mö_øtio
*
dim
;

110 
¨gs
.
max
 = 
√t
->
max_øtio
*
dim
;

111 
	`¥ötf
("%d %d\n", 
¨gs
.
mö
,árgs.
max
);

113 
	`±hªad_joö
(
lﬂd_thªad
, 0);

114 
åaö
 = 
buf„r
;

115 
	`‰ì_d©a
(
åaö
);

116 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

118 
i
 = 0; i < 
ngpus
; ++i){

119 
	`ªsize_√tw‹k
(
√ts
[
i
], 
dim
, dim);

121 
√t
 = 
√ts
[0];

123 
time
 = 
	`wh©_time_is_ô_now
();

125 
	`±hªad_joö
(
lﬂd_thªad
, 0);

126 
åaö
 = 
buf„r
;

127 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

128 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`wh©_time_is_ô_now
()-
time
);

129 
time
 = 
	`wh©_time_is_ô_now
();

131 
loss
 = 0;

132 #ifde‡
GPU


133 if(
ngpus
 == 1){

134 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

136 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

139 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

141 if(
avg_loss
 =-1Ëavg_los†
loss
;

142 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

143 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`wh©_time_is_ô_now
()-
time
, *net->seen);

144 
	`‰ì_d©a
(
åaö
);

145 if(*
√t
->
£í
/
N
 > 
ïoch
){

146 
ïoch
 = *
√t
->
£í
/
N
;

147 
buff
[256];

148 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

149 
	`ßve_weights
(
√t
, 
buff
);

151 if(
	`gë_cuºít_b©ch
(
√t
)%1000 == 0){

152 
buff
[256];

153 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

154 
	`ßve_weights
(
√t
, 
buff
);

157 
buff
[256];

158 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

159 
	`ßve_weights
(
√t
, 
buff
);

160 
	`±hªad_joö
(
lﬂd_thªad
, 0);

162 
	`‰ì_√tw‹k
(
√t
);

163 if(
œbñs
Ë
	`‰ì_±rs
((**Óabñs, 
˛as£s
);

164 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

165 
	`‰ì_li°
(
∂i°
);

166 
	`‰ì
(
ba£
);

167 
	}
}

169 
	$vÆid©e_˛assifõr_¸›
(*
d©acfg
, *
fûíame
, *
weightfûe
)

171 
i
 = 0;

172 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

173 
	`§™d
(
	`time
(0));

175 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

177 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

178 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

179 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

180 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

182 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

183 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

185 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

186 
m
 = 
∂i°
->
size
;

187 
	`‰ì_li°
(
∂i°
);

189 
˛ock_t
 
time
;

190 
avg_acc
 = 0;

191 
avg_t›k
 = 0;

192 
•lôs
 = 
m
/1000;

193 
num
 = (
i
+1)*
m
/
•lôs
 - i*m/splits;

195 
d©a
 
vÆ
, 
buf„r
;

197 
lﬂd_¨gs
 
¨gs
 = {0};

198 
¨gs
.
w
 = 
√t
->w;

199 
¨gs
.
h
 = 
√t
->h;

201 
¨gs
.
∑ths
 =Öaths;

202 
¨gs
.
˛as£s
 = classes;

203 
¨gs
.
n
 = 
num
;

204 
¨gs
.
m
 = 0;

205 
¨gs
.
œbñs
 =Üabels;

206 
¨gs
.
d
 = &
buf„r
;

207 
¨gs
.
ty≥
 = 
OLD_CLASSIFICATION_DATA
;

209 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

210 
i
 = 1; i <
•lôs
; ++i){

211 
time
=
	`˛ock
();

213 
	`±hªad_joö
(
lﬂd_thªad
, 0);

214 
vÆ
 = 
buf„r
;

216 
num
 = (
i
+1)*
m
/
•lôs
 - i*m/splits;

217 **
∑π
 = 
∑ths
+(
i
*
m
/
•lôs
);

218 if(
i
 !
•lôs
){

219 
¨gs
.
∑ths
 = 
∑π
;

220 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

222 
	`¥ötf
("Lﬂded: %d image†ö %l‡£c⁄ds\n", 
vÆ
.
X
.
rows
, 
	`£c
(
	`˛ock
()-
time
));

224 
time
=
	`˛ock
();

225 *
acc
 = 
	`√tw‹k_accuøcõs
(
√t
, 
vÆ
, 
t›k
);

226 
avg_acc
 +
acc
[0];

227 
avg_t›k
 +
acc
[1];

228 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f, %l‡£c⁄ds, %d images\n", 
i
, 
avg_acc
/i, 
t›k
, 
avg_t›k
/i, 
	`£c
(
	`˛ock
()-
time
), 
vÆ
.
X
.
rows
);

229 
	`‰ì_d©a
(
vÆ
);

231 
	}
}

233 
	$vÆid©e_˛assifõr_10
(*
d©acfg
, *
fûíame
, *
weightfûe
)

235 
i
, 
j
;

236 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

237 
	`£t_b©ch_√tw‹k
(
√t
, 1);

238 
	`§™d
(
	`time
(0));

240 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

242 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

243 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

244 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

245 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

247 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

248 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

250 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

251 
m
 = 
∂i°
->
size
;

252 
	`‰ì_li°
(
∂i°
);

254 
avg_acc
 = 0;

255 
avg_t›k
 = 0;

256 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

258 
i
 = 0; i < 
m
; ++i){

259 
˛ass
 = -1;

260 *
∑th
 = 
∑ths
[
i
];

261 
j
 = 0; j < 
˛as£s
; ++j){

262 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

263 
˛ass
 = 
j
;

267 
w
 = 
√t
->w;

268 
h
 = 
√t
->h;

269 
shi·
 = 32;

270 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 
w
+
shi·
, 
h
+shift);

271 
image
 
images
[10];

272 
images
[0] = 
	`¸›_image
(
im
, -
shi·
, -shi·, 
w
, 
h
);

273 
images
[1] = 
	`¸›_image
(
im
, 
shi·
, -shi·, 
w
, 
h
);

274 
images
[2] = 
	`¸›_image
(
im
, 0, 0, 
w
, 
h
);

275 
images
[3] = 
	`¸›_image
(
im
, -
shi·
, shi·, 
w
, 
h
);

276 
images
[4] = 
	`¸›_image
(
im
, 
shi·
, shi·, 
w
, 
h
);

277 
	`Êù_image
(
im
);

278 
images
[5] = 
	`¸›_image
(
im
, -
shi·
, -shi·, 
w
, 
h
);

279 
images
[6] = 
	`¸›_image
(
im
, 
shi·
, -shi·, 
w
, 
h
);

280 
images
[7] = 
	`¸›_image
(
im
, 0, 0, 
w
, 
h
);

281 
images
[8] = 
	`¸›_image
(
im
, -
shi·
, shi·, 
w
, 
h
);

282 
images
[9] = 
	`¸›_image
(
im
, 
shi·
, shi·, 
w
, 
h
);

283 *
¥ed
 = 
	`ˇŒoc
(
˛as£s
, ());

284 
j
 = 0; j < 10; ++j){

285 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
images
[
j
].
d©a
);

286 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
p
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

287 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

288 
	`‰ì_image
(
images
[
j
]);

290 
	`‰ì_image
(
im
);

291 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

292 
	`‰ì
(
¥ed
);

293 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

294 
j
 = 0; j < 
t›k
; ++j){

295 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

298 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

300 
	}
}

302 
	$vÆid©e_˛assifõr_fuŒ
(*
d©acfg
, *
fûíame
, *
weightfûe
)

304 
i
, 
j
;

305 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

306 
	`£t_b©ch_√tw‹k
(
√t
, 1);

307 
	`§™d
(
	`time
(0));

309 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

311 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

312 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

313 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

314 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

316 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

317 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

319 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

320 
m
 = 
∂i°
->
size
;

321 
	`‰ì_li°
(
∂i°
);

323 
avg_acc
 = 0;

324 
avg_t›k
 = 0;

325 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

327 
size
 = 
√t
->
w
;

328 
i
 = 0; i < 
m
; ++i){

329 
˛ass
 = -1;

330 *
∑th
 = 
∑ths
[
i
];

331 
j
 = 0; j < 
˛as£s
; ++j){

332 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

333 
˛ass
 = 
j
;

337 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

338 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
size
);

339 
	`ªsize_√tw‹k
(
√t
, 
ªsized
.
w
,Ñesized.
h
);

343 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ªsized
.
d©a
);

344 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥ed
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

346 
	`‰ì_image
(
im
);

347 
	`‰ì_image
(
ªsized
);

348 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

350 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

351 
j
 = 0; j < 
t›k
; ++j){

352 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

355 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

357 
	}
}

360 
	$vÆid©e_˛assifõr_sögÀ
(*
d©acfg
, *
fûíame
, *
weightfûe
)

362 
i
, 
j
;

363 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

364 
	`£t_b©ch_√tw‹k
(
√t
, 1);

365 
	`§™d
(
	`time
(0));

367 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

369 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

370 *
Àaf_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "leaves", 0);

371 if(
Àaf_li°
Ë
	`ch™ge_Àaves
(
√t
->
hõørchy
,Üeaf_list);

372 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

373 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

374 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

376 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

377 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

379 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

380 
m
 = 
∂i°
->
size
;

381 
	`‰ì_li°
(
∂i°
);

383 
avg_acc
 = 0;

384 
avg_t›k
 = 0;

385 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

387 
i
 = 0; i < 
m
; ++i){

388 
˛ass
 = -1;

389 *
∑th
 = 
∑ths
[
i
];

390 
j
 = 0; j < 
˛as£s
; ++j){

391 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

392 
˛ass
 = 
j
;

396 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

397 
image
 
¸›
 = 
	`˚¡î_¸›_image
(
im
, 
√t
->
w
,Çë->
h
);

401 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
¸›
.
d©a
);

402 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥ed
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

404 
	`‰ì_image
(
im
);

405 
	`‰ì_image
(
¸›
);

406 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

408 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

409 
j
 = 0; j < 
t›k
; ++j){

410 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

413 
	`¥ötf
("%s, %d, %f, %f, \n", 
∑ths
[
i
], 
˛ass
, 
¥ed
[0],Öred[1]);

414 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

416 
	}
}

418 
	$vÆid©e_˛assifõr_mu…i
(*
d©acfg
, *
cfg
, *
weights
)

420 
i
, 
j
;

421 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

422 
	`£t_b©ch_√tw‹k
(
√t
, 1);

423 
	`§™d
(
	`time
(0));

425 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

427 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

428 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

429 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

430 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

432 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

433 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

435 
sˇÀs
[] = {224, 256, 288, 320};

436 
nsˇÀs
 = (
sˇÀs
)/(scales[0]);

438 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

439 
m
 = 
∂i°
->
size
;

440 
	`‰ì_li°
(
∂i°
);

442 
avg_acc
 = 0;

443 
avg_t›k
 = 0;

444 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

446 
i
 = 0; i < 
m
; ++i){

447 
˛ass
 = -1;

448 *
∑th
 = 
∑ths
[
i
];

449 
j
 = 0; j < 
˛as£s
; ++j){

450 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

451 
˛ass
 = 
j
;

455 *
¥ed
 = 
	`ˇŒoc
(
˛as£s
, ());

456 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

457 
j
 = 0; j < 
nsˇÀs
; ++j){

458 
image
 
r
 = 
	`ªsize_max
(
im
, 
sˇÀs
[
j
]);

459 
	`ªsize_√tw‹k
(
√t
, 
r
.
w
,Ñ.
h
);

460 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r
.
d©a
);

461 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
p
,Çë->
ouçuts
,Çet->hierarchy, 1 , 1);

462 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

463 
	`Êù_image
(
r
);

464 
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r
.
d©a
);

465 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

466 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

468 
	`‰ì_image
(
im
);

469 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

470 
	`‰ì
(
¥ed
);

471 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

472 
j
 = 0; j < 
t›k
; ++j){

473 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

476 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

478 
	}
}

480 
	$åy_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
œyî_num
)

482 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

483 
	`£t_b©ch_√tw‹k
(
√t
, 1);

484 
	`§™d
(2222222);

486 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

488 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

489 if(!
«me_li°
Ë«me_li° = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

490 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

492 
i
 = 0;

493 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

494 
˛ock_t
 
time
;

495 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

496 
buff
[256];

497 *
öput
 = 
buff
;

499 if(
fûíame
){

500 
	`°∫˝y
(
öput
, 
fûíame
, 256);

502 
	`¥ötf
("Enter Image Path: ");

503 
	`fÊush
(
°dout
);

504 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

505 if(!
öput
) ;

506 
	`°πok
(
öput
, "\n");

508 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

509 
image
 
r
 = 
	`ªsize_mö
(
‹ig
, 256);

510 
image
 
im
 = 
	`¸›_image
(
r
, (r.
w
 - 224 - 1)/2 + 1, (r.
h
 - 224 - 1)/2 + 1, 224, 224);

511 
món
[] = {0.48263312050943, 0.45230225481413, 0.40099074308742};

512 
°d
[] = {0.22590347483426, 0.22120921437787, 0.22103996251583};

513 
v¨
[3];

514 
v¨
[0] = 
°d
[0]*std[0];

515 
v¨
[1] = 
°d
[1]*std[1];

516 
v¨
[2] = 
°d
[2]*std[2];

518 
	`n‹mÆize_˝u
(
im
.
d©a
, 
món
, 
v¨
, 1, 3, im.
w
*im.
h
);

520 *
X
 = 
im
.
d©a
;

521 
time
=
	`˛ock
();

522 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

524 
œyî
 
l
 = 
√t
->
œyîs
[
œyî_num
];

525 
i
 = 0; i < 
l
.
c
; ++i){

526 if(
l
.
rﬁlög_món
Ë
	`¥ötf
("%‡%‡%f\n",Ü.rﬁlög_món[
i
],Ü.
rﬁlög_v¨ün˚
[i],Ü.
sˇÀs
[i]);

528 #ifde‡
GPU


529 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
ouçuts
);

531 
i
 = 0; i < 
l
.
ouçuts
; ++i){

532 
	`¥ötf
("%f\n", 
l
.
ouçut
[
i
]);

547 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

548 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

549 
i
 = 0; i < 
t›
; ++i){

550 
ödex
 = 
ödexes
[
i
];

551 
	`¥ötf
("%s: %f\n", 
«mes
[
ödex
], 
¥edi˘i⁄s
[index]);

553 
	`‰ì_image
(
im
);

554 i‡(
fûíame
) ;

556 
	}
}

558 
	$¥edi˘_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
t›
)

560 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

561 
	`£t_b©ch_√tw‹k
(
√t
, 1);

562 
	`§™d
(2222222);

564 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

566 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

567 if(!
«me_li°
Ë«me_li° = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

568 if(
t›
 =0Ët› = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

570 
i
 = 0;

571 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

572 
˛ock_t
 
time
;

573 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

574 
buff
[256];

575 *
öput
 = 
buff
;

577 if(
fûíame
){

578 
	`°∫˝y
(
öput
, 
fûíame
, 256);

580 
	`¥ötf
("Enter Image Path: ");

581 
	`fÊush
(
°dout
);

582 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

583 if(!
öput
) ;

584 
	`°πok
(
öput
, "\n");

586 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

587 
image
 
r
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

593 *
X
 = 
r
.
d©a
;

594 
time
=
	`˛ock
();

595 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

596 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥edi˘i⁄s
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

597 
	`t›_k
(
¥edi˘i⁄s
, 
√t
->
ouçuts
, 
t›
, 
ödexes
);

598 
	`Ârötf
(
°dîr
, "%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

599 
i
 = 0; i < 
t›
; ++i){

600 
ödex
 = 
ödexes
[
i
];

603 
	`¥ötf
("%5.2f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

605 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

606 
	`‰ì_image
(
im
);

607 i‡(
fûíame
) ;

609 
	}
}

612 
	$œbñ_˛assifõr
(*
d©acfg
, *
fûíame
, *
weightfûe
)

614 
i
;

615 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

616 
	`£t_b©ch_√tw‹k
(
√t
, 1);

617 
	`§™d
(
	`time
(0));

619 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

621 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/labels.list");

622 *
ã°_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "test", "data/train.list");

623 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

625 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

626 
li°
 *
∂i°
 = 
	`gë_∑ths
(
ã°_li°
);

628 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

629 
m
 = 
∂i°
->
size
;

630 
	`‰ì_li°
(
∂i°
);

632 
i
 = 0; i < 
m
; ++i){

633 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

634 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
->
w
);

635 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
->w)/2, (ªsized.
h
 -Çet->h)/2,Çet->w,Çet->h);

636 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
¸›
.
d©a
);

638 if(
ªsized
.
d©a
 !
im
.d©aË
	`‰ì_image
(resized);

639 
	`‰ì_image
(
im
);

640 
	`‰ì_image
(
¸›
);

641 
öd
 = 
	`max_ödex
(
¥ed
, 
˛as£s
);

643 
	`¥ötf
("%s\n", 
œbñs
[
öd
]);

645 
	}
}

648 
	$ã°_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
èrgë_œyî
)

650 
cuº
 = 0;

651 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

652 
	`§™d
(
	`time
(0));

654 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

656 *
ã°_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "test", "data/test.list");

657 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

659 
li°
 *
∂i°
 = 
	`gë_∑ths
(
ã°_li°
);

661 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

662 
m
 = 
∂i°
->
size
;

663 
	`‰ì_li°
(
∂i°
);

665 
˛ock_t
 
time
;

667 
d©a
 
vÆ
, 
buf„r
;

669 
lﬂd_¨gs
 
¨gs
 = {0};

670 
¨gs
.
w
 = 
√t
->w;

671 
¨gs
.
h
 = 
√t
->h;

672 
¨gs
.
∑ths
 =Öaths;

673 
¨gs
.
˛as£s
 = classes;

674 
¨gs
.
n
 = 
√t
->
b©ch
;

675 
¨gs
.
m
 = 0;

676 
¨gs
.
œbñs
 = 0;

677 
¨gs
.
d
 = &
buf„r
;

678 
¨gs
.
ty≥
 = 
OLD_CLASSIFICATION_DATA
;

680 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

681 
cuº
 = 
√t
->
b©ch
; cuº < 
m
; curr +=Çet->batch){

682 
time
=
	`˛ock
();

684 
	`±hªad_joö
(
lﬂd_thªad
, 0);

685 
vÆ
 = 
buf„r
;

687 if(
cuº
 < 
m
){

688 
¨gs
.
∑ths
 =Ö©h†+ 
cuº
;

689 i‡(
cuº
 + 
√t
->
b©ch
 > 
m
Ë
¨gs
.
n
 = m - curr;

690 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

692 
	`Ârötf
(
°dîr
, "Lﬂded: %d image†ö %l‡£c⁄ds\n", 
vÆ
.
X
.
rows
, 
	`£c
(
	`˛ock
()-
time
));

694 
time
=
	`˛ock
();

695 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
vÆ
);

697 
i
, 
j
;

698 i‡(
èrgë_œyî
 >= 0){

702 
i
 = 0; i < 
¥ed
.
rows
; ++i){

703 
	`¥ötf
("%s", 
∑ths
[
cuº
-
√t
->
b©ch
+
i
]);

704 
j
 = 0; j < 
¥ed
.
cﬁs
; ++j){

705 
	`¥ötf
("\t%g", 
¥ed
.
vÆs
[
i
][
j
]);

707 
	`¥ötf
("\n");

710 
	`‰ì_m©rix
(
¥ed
);

712 
	`Ârötf
(
°dîr
, "%l‡£c⁄ds, %d images, %dÅŸÆ\n", 
	`£c
(
	`˛ock
()-
time
), 
vÆ
.
X
.
rows
, 
cuº
);

713 
	`‰ì_d©a
(
vÆ
);

715 
	}
}

717 
	$fûe_ouçut_˛assifõr
(*
d©acfg
, *
fûíame
, *
weightfûe
, *
li°fûe
)

719 
i
,
j
;

720 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

721 
	`£t_b©ch_√tw‹k
(
√t
, 1);

722 
	`§™d
(
	`time
(0));

724 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

727 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

729 
li°
 *
∂i°
 = 
	`gë_∑ths
(
li°fûe
);

731 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

732 
m
 = 
∂i°
->
size
;

733 
	`‰ì_li°
(
∂i°
);

735 
i
 = 0; i < 
m
; ++i){

736 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

737 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
->
w
);

738 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
->w)/2, (ªsized.
h
 -Çet->h)/2,Çet->w,Çet->h);

740 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
¸›
.
d©a
);

741 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥ed
,Çë->
ouçuts
,Çet->hierarchy, 0, 1);

743 if(
ªsized
.
d©a
 !
im
.d©aË
	`‰ì_image
(resized);

744 
	`‰ì_image
(
im
);

745 
	`‰ì_image
(
¸›
);

747 
	`¥ötf
("%s", 
∑ths
[
i
]);

748 
j
 = 0; j < 
˛as£s
; ++j){

749 
	`¥ötf
("\t%g", 
¥ed
[
j
]);

751 
	`¥ötf
("\n");

753 
	}
}

756 
	$thª©_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

758 #ifde‡
OPENCV


759 
thª©
 = 0;

760 
rﬁl
 = .2;

762 
	`¥ötf
("Classifier Demo\n");

763 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

764 
	`£t_b©ch_√tw‹k
(
√t
, 1);

765 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

767 
	`§™d
(2222222);

768 
CvC≠tuª
 * 
ˇp
;

770 if(
fûíame
){

771 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

773 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

776 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

778 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

779 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

781 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

783 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

786 
Âs
 = 0;

787 
i
;

789 
cou¡
 = 0;

792 ++
cou¡
;

793 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

794 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

796 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

797 if(!
ö
.
d©a
) ;

798 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
->
w
,Çë->
h
);

800 
image
 
out
 = 
ö
;

801 
x1
 = 
out
.
w
 / 20;

802 
y1
 = 
out
.
h
 / 20;

803 
x2
 = 2*
x1
;

804 
y2
 = 
out
.
h
 - out.h/20;

806 
b‹dî
 = .01*
out
.
h
;

807 
h
 = 
y2
 - 
y1
 - 2*
b‹dî
;

808 
w
 = 
x2
 - 
x1
 - 2*
b‹dî
;

810 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

811 
cuº_thª©
 = 0;

813 
cuº_thª©
 = 
¥edi˘i⁄s
[0] * 0 +

814 
¥edi˘i⁄s
[1] * .6 +

815 
¥edi˘i⁄s
[2];

817 
cuº_thª©
 = 
¥edi˘i⁄s
[218] +

818 
¥edi˘i⁄s
[539] +

819 
¥edi˘i⁄s
[540] +

820 
¥edi˘i⁄s
[368] +

821 
¥edi˘i⁄s
[369] +

822 
¥edi˘i⁄s
[370];

824 
thª©
 = 
rﬁl
 * 
cuº_thª©
 + (1-roll) *Åhreat;

826 
	`døw_box_width
(
out
, 
x2
 + 
b‹dî
, 
y1
 + .02*
h
, x2 + .5 * 
w
, y1 + .02*h + border, border, 0,0,0);

827 if(
thª©
 > .97) {

828 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

829 
y1
 + .02*
h
 - 2*
b‹dî
,

830 
x2
 + .5 * 
w
 + 6*
b‹dî
,

831 
y1
 + .02*
h
 + 3*
b‹dî
, 3*border, 1,0,0);

833 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

834 
y1
 + .02*
h
 - 2*
b‹dî
,

835 
x2
 + .5 * 
w
 + 6*
b‹dî
,

836 
y1
 + .02*
h
 + 3*
b‹dî
, .5*border, 0,0,0);

837 
	`døw_box_width
(
out
, 
x2
 + 
b‹dî
, 
y1
 + .42*
h
, x2 + .5 * 
w
, y1 + .42*h + border, border, 0,0,0);

838 if(
thª©
 > .57) {

839 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

840 
y1
 + .42*
h
 - 2*
b‹dî
,

841 
x2
 + .5 * 
w
 + 6*
b‹dî
,

842 
y1
 + .42*
h
 + 3*
b‹dî
, 3*border, 1,1,0);

844 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

845 
y1
 + .42*
h
 - 2*
b‹dî
,

846 
x2
 + .5 * 
w
 + 6*
b‹dî
,

847 
y1
 + .42*
h
 + 3*
b‹dî
, .5*border, 0,0,0);

849 
	`døw_box_width
(
out
, 
x1
, 
y1
, 
x2
, 
y2
, 
b‹dî
, 0,0,0);

850 
i
 = 0; i < 
thª©
 * 
h
 ; ++i){

851 
øtio
 = (Ë
i
 / 
h
;

852 
r
 = (
øtio
 < .5) ? (2*(ratio)) : 1;

853 
g
 = (
øtio
 < .5) ? 1 : 1 - 2*(ratio - .5);

854 
	`døw_box_width
(
out
, 
x1
 + 
b‹dî
, 
y2
 - b‹dî - 
i
, 
x2
 - b‹dî, y2 - b‹dî - i, 1, 
r
, 
g
, 0);

856 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

857 
buff
[256];

858 
	`•rötf
(
buff
, "/home/pjªddõ/tmp/thª©_%06d", 
cou¡
);

861 
	`¥ötf
("\033[2J");

862 
	`¥ötf
("\033[1;1H");

863 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

865 
i
 = 0; i < 
t›
; ++i){

866 
ödex
 = 
ödexes
[
i
];

867 
	`¥ötf
("%.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

871 
	`show_image
(
out
, "Threat");

872 
	`cvWaôKey
(10);

874 
	`‰ì_image
(
ö_s
);

875 
	`‰ì_image
(
ö
);

877 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

878 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

879 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

880 
Âs
 = .9*Â†+ .1*
cuº
;

883 
	}
}

886 
	$gun_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

888 #ifde‡
OPENCV


889 
bad_ˇts
[] = {218, 539, 540, 1213, 1501, 1742, 1911, 2415, 4348, 19223, 368, 369, 370, 1133, 1200, 1306, 2122, 2301, 2537, 2823, 3179, 3596, 3639, 4489, 5107, 5140, 5289, 6240, 6631, 6762, 7048, 7171, 7969, 7984, 7989, 8824, 8927, 9915, 10270, 10448, 13401, 15205, 18358, 18894, 18895, 19249, 19697};

891 
	`¥ötf
("Classifier Demo\n");

892 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

893 
	`£t_b©ch_√tw‹k
(
√t
, 1);

894 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

896 
	`§™d
(2222222);

897 
CvC≠tuª
 * 
ˇp
;

899 if(
fûíame
){

900 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

902 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

905 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

907 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

908 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

910 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

912 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

913 
	`cvNamedWödow
("Thª© Dëe˘i⁄", 
CV_WINDOW_NORMAL
);

914 
	`cvResizeWödow
("Threat Detection", 512, 512);

915 
Âs
 = 0;

916 
i
;

919 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

920 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

922 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

923 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
->
w
,Çë->
h
);

924 
	`show_image
(
ö
, "Threat Detection");

926 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

927 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

929 
	`¥ötf
("\033[2J");

930 
	`¥ötf
("\033[1;1H");

932 
thª©
 = 0;

933 
i
 = 0; i < (
bad_ˇts
)/(bad_cats[0]); ++i){

934 
ödex
 = 
bad_ˇts
[
i
];

935 if(
¥edi˘i⁄s
[
ödex
] > .01){

936 
	`¥ötf
("Threat Detected!\n");

937 
thª©
 = 1;

941 if(!
thª©
Ë
	`¥ötf
("Scanning...\n");

942 
i
 = 0; i < (
bad_ˇts
)/(bad_cats[0]); ++i){

943 
ödex
 = 
bad_ˇts
[
i
];

944 if(
¥edi˘i⁄s
[
ödex
] > .01){

945 
	`¥ötf
("%s\n", 
«mes
[
ödex
]);

949 
	`‰ì_image
(
ö_s
);

950 
	`‰ì_image
(
ö
);

952 
	`cvWaôKey
(10);

954 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

955 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

956 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

957 
Âs
 = .9*Â†+ .1*
cuº
;

960 
	}
}

962 
	$demo_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

964 #ifde‡
OPENCV


965 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

966 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

967 
	`¥ötf
("Classifier Demo\n");

968 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

969 
	`£t_b©ch_√tw‹k
(
√t
, 1);

970 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

972 
	`§™d
(2222222);

973 
CvC≠tuª
 * 
ˇp
;

975 
w
 = 1280;

976 
h
 = 720;

978 if(
fûíame
){

979 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

981 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

984 if(
w
){

985 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_WIDTH
, 
w
);

987 if(
h
){

988 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_HEIGHT
, 
h
);

991 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

993 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", 0);

994 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "«mes", 
œbñ_li°
);

995 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

997 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

999 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

1000 
	`cvNamedWödow
(
ba£
, 
CV_WINDOW_NORMAL
);

1001 
	`cvResizeWödow
(
ba£
, 512, 512);

1002 
Âs
 = 0;

1003 
i
;

1006 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

1007 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

1009 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

1011 
image
 
ö_s
 = 
	`Àâîbox_image
(
ö
, 
√t
->
w
,Çë->
h
);

1013 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

1014 if(
√t
->
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥edi˘i⁄s
,Çë->
ouçuts
,Çet->hierarchy, 1, 1);

1015 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

1017 
	`¥ötf
("\033[2J");

1018 
	`¥ötf
("\033[1;1H");

1019 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

1021 
lh
 = 
ö
.
h
*.03;

1022 
t›h
 = 3*
lh
;

1024 
rgb
[3] = {1,1,1};

1025 
i
 = 0; i < 
t›
; ++i){

1026 
	`¥ötf
("%d\n", 
t›h
);

1027 
ödex
 = 
ödexes
[
i
];

1028 
	`¥ötf
("%.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

1030 
buff
[1024];

1031 
	`•rötf
(
buff
, "%3.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

1032 
image
 
œbñ
 = 
	`gë_œbñ
(
Æphabë
, 
buff
, 
lh
);

1033 
	`døw_œbñ
(
ö
, 
t›h
, 
lh
, 
œbñ
, 
rgb
);

1034 
t›h
 +2*
lh
;

1035 
	`‰ì_image
(
œbñ
);

1038 
	`show_image
(
ö
, 
ba£
);

1039 
	`‰ì_image
(
ö_s
);

1040 
	`‰ì_image
(
ö
);

1042 
	`cvWaôKey
(10);

1044 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

1045 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

1046 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

1047 
Âs
 = .9*Â†+ .1*
cuº
;

1050 
	}
}

1053 
	$run_˛assifõr
(
¨gc
, **
¨gv
)

1055 if(
¨gc
 < 4){

1056 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

1060 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

1061 
ngpus
;

1062 *
gpus
 = 
	`ªad_öéi°
(
gpu_li°
, &
ngpus
, 
gpu_ödex
);

1065 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

1066 
t›
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-t", 0);

1067 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

1068 *
d©a
 = 
¨gv
[3];

1069 *
cfg
 = 
¨gv
[4];

1070 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

1071 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

1072 *
œyî_s
 = (
¨gc
 > 7Ë? 
¨gv
[7]: 0;

1073 
œyî
 = 
œyî_s
 ? 
	`©oi
(layer_s) : -1;

1074 if(0==
	`°rcmp
(
¨gv
[2], "¥edi˘")Ë
	`¥edi˘_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
fûíame
, 
t›
);

1075 if(0==
	`°rcmp
(
¨gv
[2], "fout")Ë
	`fûe_ouçut_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
fûíame
);

1076 if(0==
	`°rcmp
(
¨gv
[2], "åy")Ë
	`åy_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
fûíame
, 
	`©oi
(
œyî_s
));

1077 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

1078 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

1079 if(0==
	`°rcmp
(
¨gv
[2], "gun")Ë
	`gun_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

1080 if(0==
	`°rcmp
(
¨gv
[2], "thª©")Ë
	`thª©_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

1081 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
œyî
);

1082 if(0==
	`°rcmp
(
¨gv
[2], "œbñ")Ë
	`œbñ_˛assifõr
(
d©a
, 
cfg
, 
weights
);

1083 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_˛assifõr_sögÀ
(
d©a
, 
cfg
, 
weights
);

1084 if(0==
	`°rcmp
(
¨gv
[2], "vÆidmu…i")Ë
	`vÆid©e_˛assifõr_mu…i
(
d©a
, 
cfg
, 
weights
);

1085 if(0==
	`°rcmp
(
¨gv
[2], "vÆid10")Ë
	`vÆid©e_˛assifõr_10
(
d©a
, 
cfg
, 
weights
);

1086 if(0==
	`°rcmp
(
¨gv
[2], "vÆid¸›")Ë
	`vÆid©e_˛assifõr_¸›
(
d©a
, 
cfg
, 
weights
);

1087 if(0==
	`°rcmp
(
¨gv
[2], "vÆidfuŒ")Ë
	`vÆid©e_˛assifõr_fuŒ
(
d©a
, 
cfg
, 
weights
);

1088 
	}
}

	@coco.c

1 
	~"d¨k√t.h
"

3 
	~<°dio.h
>

5 *
	gcoco_˛as£s
[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","trafficÜight","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennisÑacket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","pottedÖlant","bed","diningÅable","toilet","tv","laptop","mouse","remote","keyboard","cellÖhone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};

7 
	gcoco_ids
[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};

9 
	$åaö_coco
(*
cfgfûe
, *
weightfûe
)

13 *
åaö_images
 = "data/coco.trainval.txt";

15 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

16 
	`§™d
(
	`time
(0));

17 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

18 
	`¥ötf
("%s\n", 
ba£
);

19 
avg_loss
 = -1;

20 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

21 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

22 
imgs
 = 
√t
->
b©ch
*√t->
subdivisi⁄s
;

23 
i
 = *
√t
->
£í
/
imgs
;

24 
d©a
 
åaö
, 
buf„r
;

27 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
 - 1];

29 
side
 = 
l
.side;

30 
˛as£s
 = 
l
.classes;

31 
jôãr
 = 
l
.jitter;

33 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

35 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

37 
lﬂd_¨gs
 
¨gs
 = {0};

38 
¨gs
.
w
 = 
√t
->w;

39 
¨gs
.
h
 = 
√t
->h;

40 
¨gs
.
∑ths
 =Öaths;

41 
¨gs
.
n
 = 
imgs
;

42 
¨gs
.
m
 = 
∂i°
->
size
;

43 
¨gs
.
˛as£s
 = classes;

44 
¨gs
.
jôãr
 = jitter;

45 
¨gs
.
num_boxes
 = 
side
;

46 
¨gs
.
d
 = &
buf„r
;

47 
¨gs
.
ty≥
 = 
REGION_DATA
;

49 
¨gs
.
™gÀ
 = 
√t
->angle;

50 
¨gs
.
exposuª
 = 
√t
->exposure;

51 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

52 
¨gs
.
hue
 = 
√t
->hue;

54 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

55 
˛ock_t
 
time
;

57 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
){

58 
i
 += 1;

59 
time
=
	`˛ock
();

60 
	`±hªad_joö
(
lﬂd_thªad
, 0);

61 
åaö
 = 
buf„r
;

62 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

64 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

74 
time
=
	`˛ock
();

75 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

76 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

77 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

79 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

80 if(
i
%1000==0 || (i < 1000 && i%100 == 0)){

81 
buff
[256];

82 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

83 
	`ßve_weights
(
√t
, 
buff
);

85 if(
i
%100==0){

86 
buff
[256];

87 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

88 
	`ßve_weights
(
√t
, 
buff
);

90 
	`‰ì_d©a
(
åaö
);

92 
buff
[256];

93 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

94 
	`ßve_weights
(
√t
, 
buff
);

95 
	}
}

97 
	$¥öt_cocos
(
FILE
 *
Â
, 
image_id
, 
dëe˘i⁄
 *
dës
, 
num_boxes
, 
˛as£s
, 
w
, 
h
)

99 
i
, 
j
;

100 
i
 = 0; i < 
num_boxes
; ++i){

101 
xmö
 = 
dës
[
i
].
bbox
.
x
 - dës[i].bbox.
w
/2.;

102 
xmax
 = 
dës
[
i
].
bbox
.
x
 + dës[i].bbox.
w
/2.;

103 
ymö
 = 
dës
[
i
].
bbox
.
y
 - dës[i].bbox.
h
/2.;

104 
ymax
 = 
dës
[
i
].
bbox
.
y
 + dës[i].bbox.
h
/2.;

106 i‡(
xmö
 < 0) xmin = 0;

107 i‡(
ymö
 < 0) ymin = 0;

108 i‡(
xmax
 > 
w
) xmax = w;

109 i‡(
ymax
 > 
h
) ymax = h;

111 
bx
 = 
xmö
;

112 
by
 = 
ymö
;

113 
bw
 = 
xmax
 - 
xmö
;

114 
bh
 = 
ymax
 - 
ymö
;

116 
j
 = 0; j < 
˛as£s
; ++j){

117 i‡(
dës
[
i
].
¥ob
[
j
]Ë
	`Ârötf
(
Â
, "{\"image_id\":%d, \"ˇãg‹y_id\":%d, \"bbox\":[%f, %f, %f, %f], \"sc‹e\":%f},\n", 
image_id
, 
coco_ids
[j], 
bx
, 
by
, 
bw
, 
bh
, dets[i].prob[j]);

120 
	}
}

122 
	$gë_coco_image_id
(*
fûíame
)

124 *
p
 = 
	`°ºchr
(
fûíame
, '_');

125  
	`©oi
(
p
+1);

126 
	}
}

128 
	$vÆid©e_coco
(*
cfg
, *
weights
)

130 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

131 
	`£t_b©ch_√tw‹k
(
√t
, 1);

132 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

133 
	`§™d
(
	`time
(0));

135 *
ba£
 = "results/";

136 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/coco_val_5k.list");

139 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

141 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

142 
˛as£s
 = 
l
.classes;

144 
buff
[1024];

145 
	`¢¥ötf
(
buff
, 1024, "%s/coco_ªsu…s.js⁄", 
ba£
);

146 
FILE
 *
Â
 = 
	`f›í
(
buff
, "w");

147 
	`Ârötf
(
Â
, "[\n");

149 
m
 = 
∂i°
->
size
;

150 
i
=0;

151 
t
;

153 
thªsh
 = .01;

154 
nms
 = 1;

155 
iou_thªsh
 = .5;

157 
¡hªads
 = 8;

158 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

159 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

160 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

161 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

162 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

164 
lﬂd_¨gs
 
¨gs
 = {0};

165 
¨gs
.
w
 = 
√t
->w;

166 
¨gs
.
h
 = 
√t
->h;

167 
¨gs
.
ty≥
 = 
IMAGE_DATA
;

169 
t
 = 0;Å < 
¡hªads
; ++t){

170 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

171 
¨gs
.
im
 = &
buf
[
t
];

172 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

173 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

175 
time_t
 
°¨t
 = 
	`time
(0);

176 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

177 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

178 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

179 
	`±hªad_joö
(
thr
[
t
], 0);

180 
vÆ
[
t
] = 
buf
[t];

181 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

183 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

184 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

185 
¨gs
.
im
 = &
buf
[
t
];

186 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

187 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

189 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

190 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

191 
image_id
 = 
	`gë_coco_image_id
(
∑th
);

192 *
X
 = 
vÆ_ªsized
[
t
].
d©a
;

193 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

194 
w
 = 
vÆ
[
t
].w;

195 
h
 = 
vÆ
[
t
].h;

196 
nboxes
 = 0;

197 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
w
, 
h
, 
thªsh
, 0, 0, 0, &
nboxes
);

198 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
l
.
side
*l.side*l.
n
, 
˛as£s
, 
iou_thªsh
);

199 
	`¥öt_cocos
(
Â
, 
image_id
, 
dës
, 
l
.
side
*l.side*l.
n
, 
˛as£s
, 
w
, 
h
);

200 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

201 
	`‰ì_image
(
vÆ
[
t
]);

202 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

205 
	`f£ek
(
Â
, -2, 
SEEK_CUR
);

206 
	`Ârötf
(
Â
, "\n]\n");

207 
	`f˛o£
(
Â
);

209 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", ()(
	`time
(0Ë- 
°¨t
));

210 
	}
}

212 
	$vÆid©e_coco_ªˇŒ
(*
cfgfûe
, *
weightfûe
)

214 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

215 
	`£t_b©ch_√tw‹k
(
√t
, 1);

216 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

217 
	`§™d
(
	`time
(0));

219 *
ba£
 = "results/comp4_det_test_";

220 
li°
 *
∂i°
 = 
	`gë_∑ths
("/home/pjreddie/data/voc/test/2007_test.txt");

221 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

223 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

224 
˛as£s
 = 
l
.classes;

225 
side
 = 
l
.side;

227 
j
, 
k
;

228 
FILE
 **
Âs
 = 
	`ˇŒoc
(
˛as£s
, (FILE *));

229 
j
 = 0; j < 
˛as£s
; ++j){

230 
buff
[1024];

231 
	`¢¥ötf
(
buff
, 1024, "%s%s.txt", 
ba£
, 
coco_˛as£s
[
j
]);

232 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

235 
m
 = 
∂i°
->
size
;

236 
i
=0;

238 
thªsh
 = .001;

239 
nms
 = 0;

240 
iou_thªsh
 = .5;

242 
tŸÆ
 = 0;

243 
c‹ª˘
 = 0;

244 
¥›oßls
 = 0;

245 
avg_iou
 = 0;

247 
i
 = 0; i < 
m
; ++i){

248 *
∑th
 = 
∑ths
[
i
];

249 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
∑th
, 0, 0);

250 
image
 
sized
 = 
	`ªsize_image
(
‹ig
, 
√t
->
w
,Çë->
h
);

251 *
id
 = 
	`ba£cfg
(
∑th
);

252 
	`√tw‹k_¥edi˘
(
√t
, 
sized
.
d©a
);

254 
nboxes
 = 0;

255 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
‹ig
.
w
, orig.
h
, 
thªsh
, 0, 0, 1, &
nboxes
);

256 i‡(
nms
Ë
	`do_nms_obj
(
dës
, 
side
*side*
l
.
n
, 1,Çms);

258 
œbñ∑th
[4096];

259 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

260 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

261 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

262 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

264 
num_œbñs
 = 0;

265 
box_œbñ
 *
åuth
 = 
	`ªad_boxes
(
œbñ∑th
, &
num_œbñs
);

266 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

267 if(
dës
[
k
].
obje˘√ss
 > 
thªsh
){

268 ++
¥›oßls
;

271 
j
 = 0; j < 
num_œbñs
; ++j) {

272 ++
tŸÆ
;

273 
box
 
t
 = {
åuth
[
j
].
x
,Åruth[j].
y
,Åruth[j].
w
,Åruth[j].
h
};

274 
be°_iou
 = 0;

275 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

276 
iou
 = 
	`box_iou
(
dës
[
k
].
bbox
, 
t
);

277 if(
dës
[
k
].
obje˘√ss
 > 
thªsh
 && 
iou
 > 
be°_iou
){

278 
be°_iou
 = 
iou
;

281 
avg_iou
 +
be°_iou
;

282 if(
be°_iou
 > 
iou_thªsh
){

283 ++
c‹ª˘
;

286 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

287 
	`Ârötf
(
°dîr
, "%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tReˇŒ:%.2f%%\n", 
i
, 
c‹ª˘
, 
tŸÆ
, ()
¥›oßls
/(i+1), 
avg_iou
*100/total, 100.*correct/total);

288 
	`‰ì
(
id
);

289 
	`‰ì_image
(
‹ig
);

290 
	`‰ì_image
(
sized
);

292 
	}
}

294 
	$ã°_coco
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
)

296 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

297 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

298 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

299 
	`£t_b©ch_√tw‹k
(
√t
, 1);

300 
	`§™d
(2222222);

301 
nms
 = .4;

302 
˛ock_t
 
time
;

303 
buff
[256];

304 *
öput
 = 
buff
;

306 if(
fûíame
){

307 
	`°∫˝y
(
öput
, 
fûíame
, 256);

309 
	`¥ötf
("Enter Image Path: ");

310 
	`fÊush
(
°dout
);

311 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

312 if(!
öput
) ;

313 
	`°πok
(
öput
, "\n");

315 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
,0,0);

316 
image
 
sized
 = 
	`ªsize_image
(
im
, 
√t
->
w
,Çë->
h
);

317 *
X
 = 
sized
.
d©a
;

318 
time
=
	`˛ock
();

319 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

320 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

322 
nboxes
 = 0;

323 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 1, 1, 
thªsh
, 0, 0, 0, &
nboxes
);

324 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
l
.
side
*l.side*l.
n
,Ü.
˛as£s
,Çms);

326 
	`døw_dëe˘i⁄s
(
im
, 
dës
, 
l
.
side
*l.side*l.
n
, 
thªsh
, 
coco_˛as£s
, 
Æphabë
, 80);

327 
	`ßve_image
(
im
, "prediction");

328 
	`show_image
(
im
, "predictions");

329 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

330 
	`‰ì_image
(
im
);

331 
	`‰ì_image
(
sized
);

332 #ifde‡
OPENCV


333 
	`cvWaôKey
(0);

334 
	`cvDe°royAŒWödows
();

336 i‡(
fûíame
) ;

338 
	}
}

340 
	$run_coco
(
¨gc
, **
¨gv
)

342 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

343 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .2);

344 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

345 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

347 if(
¨gc
 < 4){

348 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

352 *
cfg
 = 
¨gv
[3];

353 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

354 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

355 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 1);

356 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_coco
(
cfg
, 
weights
, 
fûíame
, 
thªsh
);

357 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_coco
(
cfg
, 
weights
);

358 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_coco
(
cfg
, 
weights
);

359 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_coco_ªˇŒ
(
cfg
, 
weights
);

360 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
coco_˛as£s
, 80, 
‰ame_skù
, 
¥efix
, 
avg
, .5, 0,0,0,0);

361 
	}
}

	@darknet.c

1 
	~"d¨k√t.h
"

3 
	~<time.h
>

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

7 
¥edi˘_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
t›
);

8 
ã°_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
, 
hõr_thªsh
, *
outfûe
, 
fuŒs¸ìn
);

9 
run_yﬁo
(
¨gc
, **
¨gv
);

10 
run_dëe˘‹
(
¨gc
, **
¨gv
);

11 
run_coco
(
¨gc
, **
¨gv
);

12 
run_ˇ±cha
(
¨gc
, **
¨gv
);

13 
run_nightm¨e
(
¨gc
, **
¨gv
);

14 
run_˛assifõr
(
¨gc
, **
¨gv
);

15 
run_ªgªss‹
(
¨gc
, **
¨gv
);

16 
run_£gmíãr
(
¨gc
, **
¨gv
);

17 
run_ch¨_∫n
(
¨gc
, **
¨gv
);

18 
run_èg
(
¨gc
, **
¨gv
);

19 
run_ciÁr
(
¨gc
, **
¨gv
);

20 
run_go
(
¨gc
, **
¨gv
);

21 
run_¨t
(
¨gc
, **
¨gv
);

22 
run_su≥r
(
¨gc
, **
¨gv
);

23 
run_lsd
(
¨gc
, **
¨gv
);

24 
run_u√t_£gmíãr
(
¨gc
, **
¨gv
);

26 
	$avîage
(
¨gc
, *
¨gv
[])

28 *
cfgfûe
 = 
¨gv
[2];

29 *
outfûe
 = 
¨gv
[3];

30 
gpu_ödex
 = -1;

31 
√tw‹k
 *
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

32 
√tw‹k
 *
sum
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

34 *
weightfûe
 = 
¨gv
[4];

35 
	`lﬂd_weights
(
sum
, 
weightfûe
);

37 
i
, 
j
;

38 
n
 = 
¨gc
 - 5;

39 
i
 = 0; i < 
n
; ++i){

40 
weightfûe
 = 
¨gv
[
i
+5];

41 
	`lﬂd_weights
(
√t
, 
weightfûe
);

42 
j
 = 0; j < 
√t
->
n
; ++j){

43 
œyî
 
l
 = 
√t
->
œyîs
[
j
];

44 
œyî
 
out
 = 
sum
->
œyîs
[
j
];

45 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

46 
num
 = 
l
.
n
*l.
c
*l.
size
*l.size;

47 
	`axpy_˝u
(
l
.
n
, 1,Ü.
bü£s
, 1, 
out
.biases, 1);

48 
	`axpy_˝u
(
num
, 1, 
l
.
weights
, 1, 
out
.weights, 1);

49 if(
l
.
b©ch_n‹mÆize
){

50 
	`axpy_˝u
(
l
.
n
, 1,Ü.
sˇÀs
, 1, 
out
.scales, 1);

51 
	`axpy_˝u
(
l
.
n
, 1,Ü.
rﬁlög_món
, 1, 
out
.rolling_mean, 1);

52 
	`axpy_˝u
(
l
.
n
, 1,Ü.
rﬁlög_v¨ün˚
, 1, 
out
.rolling_variance, 1);

55 if(
l
.
ty≥
 =
CONNECTED
){

56 
	`axpy_˝u
(
l
.
ouçuts
, 1,Ü.
bü£s
, 1, 
out
.biases, 1);

57 
	`axpy_˝u
(
l
.
ouçuts
*l.
öputs
, 1,Ü.
weights
, 1, 
out
.weights, 1);

61 
n
 =Ç+1;

62 
j
 = 0; j < 
√t
->
n
; ++j){

63 
œyî
 
l
 = 
sum
->
œyîs
[
j
];

64 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

65 
num
 = 
l
.
n
*l.
c
*l.
size
*l.size;

66 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
bü£s
, 1);

67 
	`sˇl_˝u
(
num
, 1./
n
, 
l
.
weights
, 1);

68 if(
l
.
b©ch_n‹mÆize
){

69 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
sˇÀs
, 1);

70 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
rﬁlög_món
, 1);

71 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
rﬁlög_v¨ün˚
, 1);

74 if(
l
.
ty≥
 =
CONNECTED
){

75 
	`sˇl_˝u
(
l
.
ouçuts
, 1./
n
,Ü.
bü£s
, 1);

76 
	`sˇl_˝u
(
l
.
ouçuts
*l.
öputs
, 1./
n
,Ü.
weights
, 1);

79 
	`ßve_weights
(
sum
, 
outfûe
);

80 
	}
}

82 
	$num›s
(
√tw‹k
 *
√t
)

84 
i
;

85 
›s
 = 0;

86 
i
 = 0; i < 
√t
->
n
; ++i){

87 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

88 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

89 
›s
 +2»* 
l
.
n
 *Ü.
size
*l.size*l.
c
/l.
groups
 *Ü.
out_h
*l.
out_w
;

90 } if(
l
.
ty≥
 =
CONNECTED
){

91 
›s
 +2»* 
l
.
öputs
 *Ü.
ouçuts
;

92 } i‡(
l
.
ty≥
 =
RNN
){

93 
›s
 +2»* 
l
.
öput_œyî
->
öputs
 *Ü.öput_œyî->
ouçuts
;

94 
›s
 +2»* 
l
.
£lf_œyî
->
öputs
 *Ü.£lf_œyî->
ouçuts
;

95 
›s
 +2»* 
l
.
ouçut_œyî
->
öputs
 *Ü.ouçut_œyî->
ouçuts
;

96 } i‡(
l
.
ty≥
 =
GRU
){

97 
›s
 +2»* 
l
.
uz
->
öputs
 *Ü.uz->
ouçuts
;

98 
›s
 +2»* 
l
.
uh
->
öputs
 *Ü.uh->
ouçuts
;

99 
›s
 +2»* 
l
.
ur
->
öputs
 *Ü.ur->
ouçuts
;

100 
›s
 +2»* 
l
.
wz
->
öputs
 *Ü.wz->
ouçuts
;

101 
›s
 +2»* 
l
.
wh
->
öputs
 *Ü.wh->
ouçuts
;

102 
›s
 +2»* 
l
.
wr
->
öputs
 *Ü.wr->
ouçuts
;

103 } i‡(
l
.
ty≥
 =
LSTM
){

104 
›s
 +2»* 
l
.
uf
->
öputs
 *Ü.uf->
ouçuts
;

105 
›s
 +2»* 
l
.
ui
->
öputs
 *Ü.ui->
ouçuts
;

106 
›s
 +2»* 
l
.
ug
->
öputs
 *Ü.ug->
ouçuts
;

107 
›s
 +2»* 
l
.
uo
->
öputs
 *Ü.uo->
ouçuts
;

108 
›s
 +2»* 
l
.
wf
->
öputs
 *Ü.wf->
ouçuts
;

109 
›s
 +2»* 
l
.
wi
->
öputs
 *Ü.wi->
ouçuts
;

110 
›s
 +2»* 
l
.
wg
->
öputs
 *Ü.wg->
ouçuts
;

111 
›s
 +2»* 
l
.
wo
->
öputs
 *Ü.wo->
ouçuts
;

114  
›s
;

115 
	}
}

117 
	$•ìd
(*
cfgfûe
, 
tics
)

119 i‡(
tics
 == 0)Åics = 1000;

120 
√tw‹k
 *
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

121 
	`£t_b©ch_√tw‹k
(
√t
, 1);

122 
i
;

123 
time
=
	`wh©_time_is_ô_now
();

124 
image
 
im
 = 
	`make_image
(
√t
->
w
,Çë->
h
,Çë->
c
*√t->
b©ch
);

125 
i
 = 0; i < 
tics
; ++i){

126 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

128 
t
 = 
	`wh©_time_is_ô_now
(Ë- 
time
;

129 
›s
 = 
	`num›s
(
√t
);

130 
	`¥ötf
("\n%dÉvÆs, %‡Sec⁄ds\n", 
tics
, 
t
);

131 
	`¥ötf
("Flﬂtög PoöàO≥øti⁄s: %.2‡Bn\n", ()
›s
/1000000000.);

132 
	`¥ötf
("FLOPS: %.2‡Bn\n", ()
›s
/1000000000.*
tics
/
t
);

133 
	`¥ötf
("S≥ed: %‡£c/evÆ\n", 
t
/
tics
);

134 
	`¥ötf
("S≥ed: %‡Hz\n", 
tics
/
t
);

135 
	}
}

137 
	$›î©i⁄s
(*
cfgfûe
)

139 
gpu_ödex
 = -1;

140 
√tw‹k
 *
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

141 
›s
 = 
	`num›s
(
√t
);

142 
	`¥ötf
("Flﬂtög PoöàO≥øti⁄s: %ld\n", 
›s
);

143 
	`¥ötf
("Flﬂtög PoöàO≥øti⁄s: %.2‡Bn\n", ()
›s
/1000000000.);

144 
	}
}

146 
	$⁄eoff
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

148 
gpu_ödex
 = -1;

149 
√tw‹k
 *
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

150 
ﬁdn
 = 
√t
->
œyîs
[√t->
n
 - 2].n;

151 
c
 = 
√t
->
œyîs
[√t->
n
 - 2].c;

152 
	`sˇl_˝u
(
ﬁdn
*
c
, .1, 
√t
->
œyîs
[√t->
n
 - 2].
weights
, 1);

153 
	`sˇl_˝u
(
ﬁdn
, 0, 
√t
->
œyîs
[√t->
n
 - 2].
bü£s
, 1);

154 
√t
->
œyîs
[√t->
n
 - 2].n = 11921;

155 
√t
->
œyîs
[√t->
n
 - 2].
bü£s
 += 5;

156 
√t
->
œyîs
[√t->
n
 - 2].
weights
 +5*
c
;

157 if(
weightfûe
){

158 
	`lﬂd_weights
(
√t
, 
weightfûe
);

160 
√t
->
œyîs
[√t->
n
 - 2].
bü£s
 -= 5;

161 
√t
->
œyîs
[√t->
n
 - 2].
weights
 -5*
c
;

162 
√t
->
œyîs
[√t->
n
 - 2].¿
ﬁdn
;

163 
	`¥ötf
("%d\n", 
ﬁdn
);

164 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
 - 2];

165 
	`c›y_˝u
(
l
.
n
/3,Ü.
bü£s
, 1,Ü.biases +Ü.n/3, 1);

166 
	`c›y_˝u
(
l
.
n
/3,Ü.
bü£s
, 1,Ü.biases + 2*l.n/3, 1);

167 
	`c›y_˝u
(
l
.
n
/3*l.
c
,Ü.
weights
, 1,Ü.weights +Ü.n/3*l.c, 1);

168 
	`c›y_˝u
(
l
.
n
/3*l.
c
,Ü.
weights
, 1,Ü.weights + 2*l.n/3*l.c, 1);

169 *
√t
->
£í
 = 0;

170 
	`ßve_weights
(
√t
, 
outfûe
);

171 
	}
}

173 
	$⁄eoff2
(*
cfgfûe
, *
weightfûe
, *
outfûe
, 
l
)

175 
gpu_ödex
 = -1;

176 
√tw‹k
 *
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

177 if(
weightfûe
){

178 
	`lﬂd_weights_u±o
(
√t
, 
weightfûe
, 0,Çë->
n
);

179 
	`lﬂd_weights_u±o
(
√t
, 
weightfûe
, 
l
,Çë->
n
);

181 *
√t
->
£í
 = 0;

182 
	`ßve_weights_u±o
(
√t
, 
outfûe
,Çë->
n
);

183 
	}
}

185 
	$∑πül
(*
cfgfûe
, *
weightfûe
, *
outfûe
, 
max
)

187 
gpu_ödex
 = -1;

188 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 1);

189 
	`ßve_weights_u±o
(
√t
, 
outfûe
, 
max
);

190 
	}
}

192 
	$¥öt_weights
(*
cfgfûe
, *
weightfûe
, 
n
)

194 
gpu_ödex
 = -1;

195 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 1);

196 
œyî
 
l
 = 
√t
->
œyîs
[
n
];

197 
i
, 
j
;

199 
i
 = 0; i < 
l
.
n
; ++i){

201 
j
 = 0; j < 
l
.
size
*l.size*l.
c
; ++j){

203 
	`¥ötf
("%g ", 
l
.
weights
[
i
*l.
size
*l.size*l.
c
 + 
j
]);

205 
	`¥ötf
("\n");

209 
	}
}

211 
	$ªsˇÀ_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

213 
gpu_ödex
 = -1;

214 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

215 
i
;

216 
i
 = 0; i < 
√t
->
n
; ++i){

217 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

218 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

219 
	`ªsˇÀ_weights
(
l
, 2, -.5);

223 
	`ßve_weights
(
√t
, 
outfûe
);

224 
	}
}

226 
	$rgbgr_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

228 
gpu_ödex
 = -1;

229 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

230 
i
;

231 
i
 = 0; i < 
√t
->
n
; ++i){

232 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

233 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

234 
	`rgbgr_weights
(
l
);

238 
	`ßve_weights
(
√t
, 
outfûe
);

239 
	}
}

241 
	$ª£t_n‹mÆize_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

243 
gpu_ödex
 = -1;

244 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

245 
i
;

246 
i
 = 0; i < 
√t
->
n
; ++i) {

247 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

248 i‡(
l
.
ty≥
 =
CONVOLUTIONAL
 &&Ü.
b©ch_n‹mÆize
) {

249 
	`dí‹mÆize_c⁄vﬁuti⁄Æ_œyî
(
l
);

251 i‡(
l
.
ty≥
 =
CONNECTED
 &&Ü.
b©ch_n‹mÆize
) {

252 
	`dí‹mÆize_c⁄√˘ed_œyî
(
l
);

254 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

255 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_z_œyî
);

256 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_r_œyî
);

257 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_h_œyî
);

258 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_z_œyî
);

259 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_r_œyî
);

260 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_h_œyî
);

263 
	`ßve_weights
(
√t
, 
outfûe
);

264 
	}
}

266 
œyî
 
	$n‹mÆize_œyî
(
œyî
 
l
, 
n
)

268 
j
;

269 
l
.
b©ch_n‹mÆize
=1;

270 
l
.
sˇÀs
 = 
	`ˇŒoc
(
n
, ());

271 
j
 = 0; j < 
n
; ++j){

272 
l
.
sˇÀs
[
j
] = 1;

274 
l
.
rﬁlög_món
 = 
	`ˇŒoc
(
n
, ());

275 
l
.
rﬁlög_v¨ün˚
 = 
	`ˇŒoc
(
n
, ());

276  
l
;

277 
	}
}

279 
	$n‹mÆize_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

281 
gpu_ödex
 = -1;

282 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

283 
i
;

284 
i
 = 0; i < 
√t
->
n
; ++i){

285 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

286 if(
l
.
ty≥
 =
CONVOLUTIONAL
 && !l.
b©ch_n‹mÆize
){

287 
√t
->
œyîs
[
i
] = 
	`n‹mÆize_œyî
(
l
,Ü.
n
);

289 i‡(
l
.
ty≥
 =
CONNECTED
 && !l.
b©ch_n‹mÆize
) {

290 
√t
->
œyîs
[
i
] = 
	`n‹mÆize_œyî
(
l
,Ü.
ouçuts
);

292 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

293 *
l
.
öput_z_œyî
 = 
	`n‹mÆize_œyî
(*l.öput_z_œyî,Ü.öput_z_œyî->
ouçuts
);

294 *
l
.
öput_r_œyî
 = 
	`n‹mÆize_œyî
(*l.öput_r_œyî,Ü.öput_r_œyî->
ouçuts
);

295 *
l
.
öput_h_œyî
 = 
	`n‹mÆize_œyî
(*l.öput_h_œyî,Ü.öput_h_œyî->
ouçuts
);

296 *
l
.
°©e_z_œyî
 = 
	`n‹mÆize_œyî
(*l.°©e_z_œyî,Ü.°©e_z_œyî->
ouçuts
);

297 *
l
.
°©e_r_œyî
 = 
	`n‹mÆize_œyî
(*l.°©e_r_œyî,Ü.°©e_r_œyî->
ouçuts
);

298 *
l
.
°©e_h_œyî
 = 
	`n‹mÆize_œyî
(*l.°©e_h_œyî,Ü.°©e_h_œyî->
ouçuts
);

299 
√t
->
œyîs
[
i
].
b©ch_n‹mÆize
=1;

302 
	`ßve_weights
(
√t
, 
outfûe
);

303 
	}
}

305 
	$°©i°ics_√t
(*
cfgfûe
, *
weightfûe
)

307 
gpu_ödex
 = -1;

308 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

309 
i
;

310 
i
 = 0; i < 
√t
->
n
; ++i) {

311 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

312 i‡(
l
.
ty≥
 =
CONNECTED
 &&Ü.
b©ch_n‹mÆize
) {

313 
	`¥ötf
("C⁄√˘ed Layî %d\n", 
i
);

314 
	`°©i°ics_c⁄√˘ed_œyî
(
l
);

316 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

317 
	`¥ötf
("GRU Layî %d\n", 
i
);

318 
	`¥ötf
("Input Z\n");

319 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
öput_z_œyî
);

320 
	`¥ötf
("Input R\n");

321 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
öput_r_œyî
);

322 
	`¥ötf
("Input H\n");

323 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
öput_h_œyî
);

324 
	`¥ötf
("State Z\n");

325 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
°©e_z_œyî
);

326 
	`¥ötf
("State R\n");

327 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
°©e_r_œyî
);

328 
	`¥ötf
("State H\n");

329 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
°©e_h_œyî
);

331 
	`¥ötf
("\n");

333 
	}
}

335 
	$dí‹mÆize_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

337 
gpu_ödex
 = -1;

338 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

339 
i
;

340 
i
 = 0; i < 
√t
->
n
; ++i) {

341 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

342 i‡((
l
.
ty≥
 =
DECONVOLUTIONAL
 ||Ü.ty≥ =
CONVOLUTIONAL
Ë&&Ü.
b©ch_n‹mÆize
) {

343 
	`dí‹mÆize_c⁄vﬁuti⁄Æ_œyî
(
l
);

344 
√t
->
œyîs
[
i
].
b©ch_n‹mÆize
=0;

346 i‡(
l
.
ty≥
 =
CONNECTED
 &&Ü.
b©ch_n‹mÆize
) {

347 
	`dí‹mÆize_c⁄√˘ed_œyî
(
l
);

348 
√t
->
œyîs
[
i
].
b©ch_n‹mÆize
=0;

350 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

351 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_z_œyî
);

352 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_r_œyî
);

353 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_h_œyî
);

354 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_z_œyî
);

355 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_r_œyî
);

356 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_h_œyî
);

357 
l
.
öput_z_œyî
->
b©ch_n‹mÆize
 = 0;

358 
l
.
öput_r_œyî
->
b©ch_n‹mÆize
 = 0;

359 
l
.
öput_h_œyî
->
b©ch_n‹mÆize
 = 0;

360 
l
.
°©e_z_œyî
->
b©ch_n‹mÆize
 = 0;

361 
l
.
°©e_r_œyî
->
b©ch_n‹mÆize
 = 0;

362 
l
.
°©e_h_œyî
->
b©ch_n‹mÆize
 = 0;

363 
√t
->
œyîs
[
i
].
b©ch_n‹mÆize
=0;

366 
	`ßve_weights
(
√t
, 
outfûe
);

367 
	}
}

369 
	$mkimg
(*
cfgfûe
, *
weightfûe
, 
h
, 
w
, 
num
, *
¥efix
)

371 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

372 
image
 *
ims
 = 
	`gë_weights
(
√t
->
œyîs
[0]);

373 
n
 = 
√t
->
œyîs
[0].n;

374 
z
;

375 
z
 = 0; z < 
num
; ++z){

376 
image
 
im
 = 
	`make_image
(
h
, 
w
, 3);

377 
	`fûl_image
(
im
, .5);

378 
i
;

379 
i
 = 0; i < 100; ++i){

380 
image
 
r
 = 
	`c›y_image
(
ims
[
	`ønd
()%
n
]);

381 
	`rŸ©e_image_cw
(
r
, 
	`ønd
()%4);

382 
	`øndom_di°‹t_image
(
r
, 1, 1.5, 1.5);

383 
dx
 = 
	`ønd
()%(
w
-
r
.w);

384 
dy
 = 
	`ønd
()%(
h
-
r
.h);

385 
	`gho°_image
(
r
, 
im
, 
dx
, 
dy
);

386 
	`‰ì_image
(
r
);

388 
buff
[256];

389 
	`•rötf
(
buff
, "%s/gí_%d", 
¥efix
, 
z
);

390 
	`ßve_image
(
im
, 
buff
);

391 
	`‰ì_image
(
im
);

393 
	}
}

395 
	$visuÆize
(*
cfgfûe
, *
weightfûe
)

397 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

398 
	`visuÆize_√tw‹k
(
√t
);

399 #ifde‡
OPENCV


400 
	`cvWaôKey
(0);

402 
	}
}

404 
	$maö
(
¨gc
, **
¨gv
)

409 if(
¨gc
 < 2){

410 
	`Ârötf
(
°dîr
, "ußge: %†<fun˘i⁄>\n", 
¨gv
[0]);

413 
gpu_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-i", 0);

414 if(
	`föd_¨g
(
¨gc
, 
¨gv
, "-nogpu")) {

415 
gpu_ödex
 = -1;

418 #i‚de‡
GPU


419 
gpu_ödex
 = -1;

421 if(
gpu_ödex
 >= 0){

422 
	`cuda_£t_devi˚
(
gpu_ödex
);

426 i‡(0 =
	`°rcmp
(
¨gv
[1], "average")){

427 
	`avîage
(
¨gc
, 
¨gv
);

428 } i‡(0 =
	`°rcmp
(
¨gv
[1], "yolo")){

429 
	`run_yﬁo
(
¨gc
, 
¨gv
);

430 } i‡(0 =
	`°rcmp
(
¨gv
[1], "super")){

431 
	`run_su≥r
(
¨gc
, 
¨gv
);

432 } i‡(0 =
	`°rcmp
(
¨gv
[1], "lsd")){

433 
	`run_lsd
(
¨gc
, 
¨gv
);

434 } i‡(0 =
	`°rcmp
(
¨gv
[1], "detector")){

435 
	`run_dëe˘‹
(
¨gc
, 
¨gv
);

436 } i‡(0 =
	`°rcmp
(
¨gv
[1], "detect")){

437 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .5);

438 *
fûíame
 = (
¨gc
 > 4Ë? 
¨gv
[4]: 0;

439 *
outfûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-out", 0);

440 
fuŒs¸ìn
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-fullscreen");

441 
	`ã°_dëe˘‹
("cfg/coco.d©a", 
¨gv
[2],árgv[3], 
fûíame
, 
thªsh
, .5, 
outfûe
, 
fuŒs¸ìn
);

442 } i‡(0 =
	`°rcmp
(
¨gv
[1], "cifar")){

443 
	`run_ciÁr
(
¨gc
, 
¨gv
);

444 } i‡(0 =
	`°rcmp
(
¨gv
[1], "go")){

445 
	`run_go
(
¨gc
, 
¨gv
);

446 } i‡(0 =
	`°rcmp
(
¨gv
[1], "rnn")){

447 
	`run_ch¨_∫n
(
¨gc
, 
¨gv
);

448 } i‡(0 =
	`°rcmp
(
¨gv
[1], "coco")){

449 
	`run_coco
(
¨gc
, 
¨gv
);

450 } i‡(0 =
	`°rcmp
(
¨gv
[1], "classify")){

451 
	`¥edi˘_˛assifõr
("cfg/imagíë1k.d©a", 
¨gv
[2],árgv[3],árgv[4], 5);

452 } i‡(0 =
	`°rcmp
(
¨gv
[1], "classifier")){

453 
	`run_˛assifõr
(
¨gc
, 
¨gv
);

454 } i‡(0 =
	`°rcmp
(
¨gv
[1], "regressor")){

455 
	`run_ªgªss‹
(
¨gc
, 
¨gv
);

456 } i‡(0 =
	`°rcmp
(
¨gv
[1], "segmenter")){

457 
	`run_£gmíãr
(
¨gc
, 
¨gv
);

458 } i‡(0 =
	`°rcmp
(
¨gv
[1], "unet_segmenter")){

459 
	`run_u√t_£gmíãr
(
¨gc
, 
¨gv
);

460 } i‡(0 =
	`°rcmp
(
¨gv
[1], "art")){

461 
	`run_¨t
(
¨gc
, 
¨gv
);

462 } i‡(0 =
	`°rcmp
(
¨gv
[1], "tag")){

463 
	`run_èg
(
¨gc
, 
¨gv
);

464 } i‡(0 =
	`°rcmp
(
¨gv
[1], "3d")){

465 
	`composôe_3d
(
¨gv
[2],árgv[3],árgv[4], (
¨gc
 > 5Ë? 
	`©of
(argv[5]) : 0);

466 } i‡(0 =
	`°rcmp
(
¨gv
[1], "test")){

467 
	`ã°_ªsize
(
¨gv
[2]);

468 } i‡(0 =
	`°rcmp
(
¨gv
[1], "captcha")){

469 
	`run_ˇ±cha
(
¨gc
, 
¨gv
);

470 } i‡(0 =
	`°rcmp
(
¨gv
[1], "nightmare")){

471 
	`run_nightm¨e
(
¨gc
, 
¨gv
);

472 } i‡(0 =
	`°rcmp
(
¨gv
[1], "rgbgr")){

473 
	`rgbgr_√t
(
¨gv
[2],árgv[3],árgv[4]);

474 } i‡(0 =
	`°rcmp
(
¨gv
[1], "reset")){

475 
	`ª£t_n‹mÆize_√t
(
¨gv
[2],árgv[3],árgv[4]);

476 } i‡(0 =
	`°rcmp
(
¨gv
[1], "denormalize")){

477 
	`dí‹mÆize_√t
(
¨gv
[2],árgv[3],árgv[4]);

478 } i‡(0 =
	`°rcmp
(
¨gv
[1], "statistics")){

479 
	`°©i°ics_√t
(
¨gv
[2],árgv[3]);

480 } i‡(0 =
	`°rcmp
(
¨gv
[1], "normalize")){

481 
	`n‹mÆize_√t
(
¨gv
[2],árgv[3],árgv[4]);

482 } i‡(0 =
	`°rcmp
(
¨gv
[1], "rescale")){

483 
	`ªsˇÀ_√t
(
¨gv
[2],árgv[3],árgv[4]);

484 } i‡(0 =
	`°rcmp
(
¨gv
[1], "ops")){

485 
	`›î©i⁄s
(
¨gv
[2]);

486 } i‡(0 =
	`°rcmp
(
¨gv
[1], "speed")){

487 
	`•ìd
(
¨gv
[2], (
¨gc
 > 3 &&árgv[3]Ë? 
	`©oi
(argv[3]) : 0);

488 } i‡(0 =
	`°rcmp
(
¨gv
[1], "oneoff")){

489 
	`⁄eoff
(
¨gv
[2],árgv[3],árgv[4]);

490 } i‡(0 =
	`°rcmp
(
¨gv
[1], "oneoff2")){

491 
	`⁄eoff2
(
¨gv
[2],árgv[3],árgv[4], 
	`©oi
(argv[5]));

492 } i‡(0 =
	`°rcmp
(
¨gv
[1], "print")){

493 
	`¥öt_weights
(
¨gv
[2],árgv[3], 
	`©oi
(argv[4]));

494 } i‡(0 =
	`°rcmp
(
¨gv
[1], "partial")){

495 
	`∑πül
(
¨gv
[2],árgv[3],árgv[4], 
	`©oi
(argv[5]));

496 } i‡(0 =
	`°rcmp
(
¨gv
[1], "average")){

497 
	`avîage
(
¨gc
, 
¨gv
);

498 } i‡(0 =
	`°rcmp
(
¨gv
[1], "visualize")){

499 
	`visuÆize
(
¨gv
[2], (
¨gc
 > 3) ?árgv[3] : 0);

500 } i‡(0 =
	`°rcmp
(
¨gv
[1], "mkimg")){

501 
	`mkimg
(
¨gv
[2],árgv[3], 
	`©oi
(argv[4]),átoi(argv[5]),átoi(argv[6]),árgv[7]);

502 } i‡(0 =
	`°rcmp
(
¨gv
[1], "imtest")){

503 
	`ã°_ªsize
(
¨gv
[2]);

505 
	`Ârötf
(
°dîr
, "NŸá¿›ti⁄: %s\n", 
¨gv
[1]);

508 
	}
}

	@detector.c

1 
	~"d¨k√t.h
"

3 
	gcoco_ids
[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};

6 
	$åaö_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

8 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

9 *
åaö_images
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

10 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

12 
	`§™d
(
	`time
(0));

13 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

14 
	`¥ötf
("%s\n", 
ba£
);

15 
avg_loss
 = -1;

16 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network));

18 
	`§™d
(
	`time
(0));

19 
£ed
 = 
	`ønd
();

20 
i
;

21 
i
 = 0; i < 
ngpus
; ++i){

22 
	`§™d
(
£ed
);

23 #ifde‡
GPU


24 
	`cuda_£t_devi˚
(
gpus
[
i
]);

26 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

27 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

29 
	`§™d
(
	`time
(0));

30 
√tw‹k
 *
√t
 = 
√ts
[0];

32 
imgs
 = 
√t
->
b©ch
 *Çë->
subdivisi⁄s
 * 
ngpus
;

33 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

34 
d©a
 
åaö
, 
buf„r
;

36 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
 - 1];

38 
˛as£s
 = 
l
.classes;

39 
jôãr
 = 
l
.jitter;

41 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

43 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

45 
lﬂd_¨gs
 
¨gs
 = 
	`gë_ba£_¨gs
(
√t
);

46 
¨gs
.
co‹ds
 = 
l
.coords;

47 
¨gs
.
∑ths
 =Öaths;

48 
¨gs
.
n
 = 
imgs
;

49 
¨gs
.
m
 = 
∂i°
->
size
;

50 
¨gs
.
˛as£s
 = classes;

51 
¨gs
.
jôãr
 = jitter;

52 
¨gs
.
num_boxes
 = 
l
.
max_boxes
;

53 
¨gs
.
d
 = &
buf„r
;

54 
¨gs
.
ty≥
 = 
DETECTION_DATA
;

56 
¨gs
.
thªads
 = 64;

58 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

59 
time
;

60 
cou¡
 = 0;

62 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
){

63 if(
l
.
øndom
 && 
cou¡
++%10 == 0){

64 
	`¥ötf
("Resizing\n");

65 
dim
 = (
	`ønd
() % 10 + 10) * 32;

66 i‡(
	`gë_cuºít_b©ch
(
√t
)+200 >Çë->
max_b©ches
Ë
dim
 = 608;

68 
	`¥ötf
("%d\n", 
dim
);

69 
¨gs
.
w
 = 
dim
;

70 
¨gs
.
h
 = 
dim
;

72 
	`±hªad_joö
(
lﬂd_thªad
, 0);

73 
åaö
 = 
buf„r
;

74 
	`‰ì_d©a
(
åaö
);

75 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

77 #¥agm®
omp
 
∑øŒñ
 

78 
i
 = 0; i < 
ngpus
; ++i){

79 
	`ªsize_√tw‹k
(
√ts
[
i
], 
dim
, dim);

81 
√t
 = 
√ts
[0];

83 
time
=
	`wh©_time_is_ô_now
();

84 
	`±hªad_joö
(
lﬂd_thªad
, 0);

85 
åaö
 = 
buf„r
;

86 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

112 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`wh©_time_is_ô_now
()-
time
);

114 
time
=
	`wh©_time_is_ô_now
();

115 
loss
 = 0;

116 #ifde‡
GPU


117 if(
ngpus
 == 1){

118 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

120 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

123 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

125 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

126 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

128 
i
 = 
	`gë_cuºít_b©ch
(
√t
);

129 
	`¥ötf
("%ld: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
	`gë_cuºít_b©ch
(
√t
), 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`wh©_time_is_ô_now
()-
time
, 
i
*
imgs
);

130 if(
i
%100==0){

131 #ifde‡
GPU


132 if(
ngpus
 !1Ë
	`sync_√ts
(
√ts
,Çgpus, 0);

134 
buff
[256];

135 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

136 
	`ßve_weights
(
√t
, 
buff
);

138 if(
i
%10000==0 || (i < 1000 && i%100 == 0)){

139 #ifde‡
GPU


140 if(
ngpus
 !1Ë
	`sync_√ts
(
√ts
,Çgpus, 0);

142 
buff
[256];

143 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

144 
	`ßve_weights
(
√t
, 
buff
);

146 
	`‰ì_d©a
(
åaö
);

148 #ifde‡
GPU


149 if(
ngpus
 !1Ë
	`sync_√ts
(
√ts
,Çgpus, 0);

151 
buff
[256];

152 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

153 
	`ßve_weights
(
√t
, 
buff
);

154 
	}
}

157 
	$gë_coco_image_id
(*
fûíame
)

159 *
p
 = 
	`°ºchr
(
fûíame
, '/');

160 *
c
 = 
	`°ºchr
(
fûíame
, '_');

161 if(
c
Ë
p
 = c;

162  
	`©oi
(
p
+1);

163 
	}
}

165 
	$¥öt_cocos
(
FILE
 *
Â
, *
image_∑th
, 
dëe˘i⁄
 *
dës
, 
num_boxes
, 
˛as£s
, 
w
, 
h
)

167 
i
, 
j
;

168 
image_id
 = 
	`gë_coco_image_id
(
image_∑th
);

169 
i
 = 0; i < 
num_boxes
; ++i){

170 
xmö
 = 
dës
[
i
].
bbox
.
x
 - dës[i].bbox.
w
/2.;

171 
xmax
 = 
dës
[
i
].
bbox
.
x
 + dës[i].bbox.
w
/2.;

172 
ymö
 = 
dës
[
i
].
bbox
.
y
 - dës[i].bbox.
h
/2.;

173 
ymax
 = 
dës
[
i
].
bbox
.
y
 + dës[i].bbox.
h
/2.;

175 i‡(
xmö
 < 0) xmin = 0;

176 i‡(
ymö
 < 0) ymin = 0;

177 i‡(
xmax
 > 
w
) xmax = w;

178 i‡(
ymax
 > 
h
) ymax = h;

180 
bx
 = 
xmö
;

181 
by
 = 
ymö
;

182 
bw
 = 
xmax
 - 
xmö
;

183 
bh
 = 
ymax
 - 
ymö
;

185 
j
 = 0; j < 
˛as£s
; ++j){

186 i‡(
dës
[
i
].
¥ob
[
j
]Ë
	`Ârötf
(
Â
, "{\"image_id\":%d, \"ˇãg‹y_id\":%d, \"bbox\":[%f, %f, %f, %f], \"sc‹e\":%f},\n", 
image_id
, 
coco_ids
[j], 
bx
, 
by
, 
bw
, 
bh
, dets[i].prob[j]);

189 
	}
}

191 
	$¥öt_dëe˘‹_dëe˘i⁄s
(
FILE
 **
Âs
, *
id
, 
dëe˘i⁄
 *
dës
, 
tŸÆ
, 
˛as£s
, 
w
, 
h
)

193 
i
, 
j
;

194 
i
 = 0; i < 
tŸÆ
; ++i){

195 
xmö
 = 
dës
[
i
].
bbox
.
x
 - dës[i].bbox.
w
/2. + 1;

196 
xmax
 = 
dës
[
i
].
bbox
.
x
 + dës[i].bbox.
w
/2. + 1;

197 
ymö
 = 
dës
[
i
].
bbox
.
y
 - dës[i].bbox.
h
/2. + 1;

198 
ymax
 = 
dës
[
i
].
bbox
.
y
 + dës[i].bbox.
h
/2. + 1;

200 i‡(
xmö
 < 1) xmin = 1;

201 i‡(
ymö
 < 1) ymin = 1;

202 i‡(
xmax
 > 
w
) xmax = w;

203 i‡(
ymax
 > 
h
) ymax = h;

205 
j
 = 0; j < 
˛as£s
; ++j){

206 i‡(
dës
[
i
].
¥ob
[
j
]Ë
	`Ârötf
(
Âs
[j], "%†%‡%‡%‡%‡%f\n", 
id
, dets[i].prob[j],

207 
xmö
, 
ymö
, 
xmax
, 
ymax
);

210 
	}
}

212 
	$¥öt_imagíë_dëe˘i⁄s
(
FILE
 *
Â
, 
id
, 
dëe˘i⁄
 *
dës
, 
tŸÆ
, 
˛as£s
, 
w
, 
h
)

214 
i
, 
j
;

215 
i
 = 0; i < 
tŸÆ
; ++i){

216 
xmö
 = 
dës
[
i
].
bbox
.
x
 - dës[i].bbox.
w
/2.;

217 
xmax
 = 
dës
[
i
].
bbox
.
x
 + dës[i].bbox.
w
/2.;

218 
ymö
 = 
dës
[
i
].
bbox
.
y
 - dës[i].bbox.
h
/2.;

219 
ymax
 = 
dës
[
i
].
bbox
.
y
 + dës[i].bbox.
h
/2.;

221 i‡(
xmö
 < 0) xmin = 0;

222 i‡(
ymö
 < 0) ymin = 0;

223 i‡(
xmax
 > 
w
) xmax = w;

224 i‡(
ymax
 > 
h
) ymax = h;

226 
j
 = 0; j < 
˛as£s
; ++j){

227 
˛ass
 = 
j
;

228 i‡(
dës
[
i
].
¥ob
[
˛ass
]Ë
	`Ârötf
(
Â
, "%d %d %‡%‡%‡%‡%f\n", 
id
, 
j
+1, dets[i].prob[class],

229 
xmö
, 
ymö
, 
xmax
, 
ymax
);

232 
	}
}

234 
	$vÆid©e_dëe˘‹_Êù
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
outfûe
)

236 
j
;

237 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

238 *
vÆid_images
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

239 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

240 *
¥efix
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "results", "results");

241 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

242 *
m≠f
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "map", 0);

243 *
m≠
 = 0;

244 i‡(
m≠f
Ë
m≠
 = 
	`ªad_m≠
(mapf);

246 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

247 
	`£t_b©ch_√tw‹k
(
√t
, 2);

248 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

249 
	`§™d
(
	`time
(0));

251 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_images
);

252 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

254 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

255 
˛as£s
 = 
l
.classes;

257 
buff
[1024];

258 *
ty≥
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "eval", "voc");

259 
FILE
 *
Â
 = 0;

260 
FILE
 **
Âs
 = 0;

261 
coco
 = 0;

262 
imagíë
 = 0;

263 if(0==
	`°rcmp
(
ty≥
, "coco")){

264 if(!
outfûe
) outfile = "coco_results";

265 
	`¢¥ötf
(
buff
, 1024, "%s/%s.js⁄", 
¥efix
, 
outfûe
);

266 
Â
 = 
	`f›í
(
buff
, "w");

267 
	`Ârötf
(
Â
, "[\n");

268 
coco
 = 1;

269 } if(0==
	`°rcmp
(
ty≥
, "imagenet")){

270 if(!
outfûe
) outfile = "imagenet-detection";

271 
	`¢¥ötf
(
buff
, 1024, "%s/%s.txt", 
¥efix
, 
outfûe
);

272 
Â
 = 
	`f›í
(
buff
, "w");

273 
imagíë
 = 1;

274 
˛as£s
 = 200;

276 if(!
outfûe
) outfile = "comp4_det_test_";

277 
Âs
 = 
	`ˇŒoc
(
˛as£s
, (
FILE
 *));

278 
j
 = 0; j < 
˛as£s
; ++j){

279 
	`¢¥ötf
(
buff
, 1024, "%s/%s%s.txt", 
¥efix
, 
outfûe
, 
«mes
[
j
]);

280 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

284 
m
 = 
∂i°
->
size
;

285 
i
=0;

286 
t
;

288 
thªsh
 = .005;

289 
nms
 = .45;

291 
¡hªads
 = 4;

292 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

293 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

294 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

295 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

296 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

298 
image
 
öput
 = 
	`make_image
(
√t
->
w
,Çë->
h
,Çë->
c
*2);

300 
lﬂd_¨gs
 
¨gs
 = {0};

301 
¨gs
.
w
 = 
√t
->w;

302 
¨gs
.
h
 = 
√t
->h;

304 
¨gs
.
ty≥
 = 
LETTERBOX_DATA
;

306 
t
 = 0;Å < 
¡hªads
; ++t){

307 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

308 
¨gs
.
im
 = &
buf
[
t
];

309 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

310 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

312 
°¨t
 = 
	`wh©_time_is_ô_now
();

313 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

314 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

315 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

316 
	`±hªad_joö
(
thr
[
t
], 0);

317 
vÆ
[
t
] = 
buf
[t];

318 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

320 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

321 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

322 
¨gs
.
im
 = &
buf
[
t
];

323 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

324 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

326 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

327 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

328 *
id
 = 
	`ba£cfg
(
∑th
);

329 
	`c›y_˝u
(
√t
->
w
*√t->
h
*√t->
c
, 
vÆ_ªsized
[
t
].
d©a
, 1, 
öput
.data, 1);

330 
	`Êù_image
(
vÆ_ªsized
[
t
]);

331 
	`c›y_˝u
(
√t
->
w
*√t->
h
*√t->
c
, 
vÆ_ªsized
[
t
].
d©a
, 1, 
öput
.data +Çet->w*net->h*net->c, 1);

333 
	`√tw‹k_¥edi˘
(
√t
, 
öput
.
d©a
);

334 
w
 = 
vÆ
[
t
].w;

335 
h
 = 
vÆ
[
t
].h;

336 
num
 = 0;

337 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
w
, 
h
, 
thªsh
, .5, 
m≠
, 0, &
num
);

338 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
num
, 
˛as£s
,Çms);

339 i‡(
coco
){

340 
	`¥öt_cocos
(
Â
, 
∑th
, 
dës
, 
num
, 
˛as£s
, 
w
, 
h
);

341 } i‡(
imagíë
){

342 
	`¥öt_imagíë_dëe˘i⁄s
(
Â
, 
i
+
t
-
¡hªads
+1, 
dës
, 
num
, 
˛as£s
, 
w
, 
h
);

344 
	`¥öt_dëe˘‹_dëe˘i⁄s
(
Âs
, 
id
, 
dës
, 
num
, 
˛as£s
, 
w
, 
h
);

346 
	`‰ì_dëe˘i⁄s
(
dës
, 
num
);

347 
	`‰ì
(
id
);

348 
	`‰ì_image
(
vÆ
[
t
]);

349 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

352 
j
 = 0; j < 
˛as£s
; ++j){

353 if(
Âs
Ë
	`f˛o£
(Âs[
j
]);

355 if(
coco
){

356 
	`f£ek
(
Â
, -2, 
SEEK_CUR
);

357 
	`Ârötf
(
Â
, "\n]\n");

358 
	`f˛o£
(
Â
);

360 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", 
	`wh©_time_is_ô_now
(Ë- 
°¨t
);

361 
	}
}

364 
	$vÆid©e_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
outfûe
)

366 
j
;

367 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

368 *
vÆid_images
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

369 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

370 *
¥efix
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "results", "results");

371 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

372 *
m≠f
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "map", 0);

373 *
m≠
 = 0;

374 i‡(
m≠f
Ë
m≠
 = 
	`ªad_m≠
(mapf);

376 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

377 
	`£t_b©ch_√tw‹k
(
√t
, 1);

378 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

379 
	`§™d
(
	`time
(0));

381 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_images
);

382 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

384 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

385 
˛as£s
 = 
l
.classes;

387 
buff
[1024];

388 *
ty≥
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "eval", "voc");

389 
FILE
 *
Â
 = 0;

390 
FILE
 **
Âs
 = 0;

391 
coco
 = 0;

392 
imagíë
 = 0;

393 if(0==
	`°rcmp
(
ty≥
, "coco")){

394 if(!
outfûe
) outfile = "coco_results";

395 
	`¢¥ötf
(
buff
, 1024, "%s/%s.js⁄", 
¥efix
, 
outfûe
);

396 
Â
 = 
	`f›í
(
buff
, "w");

397 
	`Ârötf
(
Â
, "[\n");

398 
coco
 = 1;

399 } if(0==
	`°rcmp
(
ty≥
, "imagenet")){

400 if(!
outfûe
) outfile = "imagenet-detection";

401 
	`¢¥ötf
(
buff
, 1024, "%s/%s.txt", 
¥efix
, 
outfûe
);

402 
Â
 = 
	`f›í
(
buff
, "w");

403 
imagíë
 = 1;

404 
˛as£s
 = 200;

406 if(!
outfûe
) outfile = "comp4_det_test_";

407 
Âs
 = 
	`ˇŒoc
(
˛as£s
, (
FILE
 *));

408 
j
 = 0; j < 
˛as£s
; ++j){

409 
	`¢¥ötf
(
buff
, 1024, "%s/%s%s.txt", 
¥efix
, 
outfûe
, 
«mes
[
j
]);

410 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

415 
m
 = 
∂i°
->
size
;

416 
i
=0;

417 
t
;

419 
thªsh
 = .005;

420 
nms
 = .45;

422 
¡hªads
 = 4;

423 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

424 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

425 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

426 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

427 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

429 
lﬂd_¨gs
 
¨gs
 = {0};

430 
¨gs
.
w
 = 
√t
->w;

431 
¨gs
.
h
 = 
√t
->h;

433 
¨gs
.
ty≥
 = 
LETTERBOX_DATA
;

435 
t
 = 0;Å < 
¡hªads
; ++t){

436 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

437 
¨gs
.
im
 = &
buf
[
t
];

438 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

439 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

441 
°¨t
 = 
	`wh©_time_is_ô_now
();

442 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

443 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

444 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

445 
	`±hªad_joö
(
thr
[
t
], 0);

446 
vÆ
[
t
] = 
buf
[t];

447 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

449 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

450 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

451 
¨gs
.
im
 = &
buf
[
t
];

452 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

453 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

455 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

456 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

457 *
id
 = 
	`ba£cfg
(
∑th
);

458 *
X
 = 
vÆ_ªsized
[
t
].
d©a
;

459 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

460 
w
 = 
vÆ
[
t
].w;

461 
h
 = 
vÆ
[
t
].h;

462 
nboxes
 = 0;

463 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
w
, 
h
, 
thªsh
, .5, 
m≠
, 0, &
nboxes
);

464 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
nboxes
, 
˛as£s
,Çms);

465 i‡(
coco
){

466 
	`¥öt_cocos
(
Â
, 
∑th
, 
dës
, 
nboxes
, 
˛as£s
, 
w
, 
h
);

467 } i‡(
imagíë
){

468 
	`¥öt_imagíë_dëe˘i⁄s
(
Â
, 
i
+
t
-
¡hªads
+1, 
dës
, 
nboxes
, 
˛as£s
, 
w
, 
h
);

470 
	`¥öt_dëe˘‹_dëe˘i⁄s
(
Âs
, 
id
, 
dës
, 
nboxes
, 
˛as£s
, 
w
, 
h
);

472 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

473 
	`‰ì
(
id
);

474 
	`‰ì_image
(
vÆ
[
t
]);

475 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

478 
j
 = 0; j < 
˛as£s
; ++j){

479 if(
Âs
Ë
	`f˛o£
(Âs[
j
]);

481 if(
coco
){

482 
	`f£ek
(
Â
, -2, 
SEEK_CUR
);

483 
	`Ârötf
(
Â
, "\n]\n");

484 
	`f˛o£
(
Â
);

486 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", 
	`wh©_time_is_ô_now
(Ë- 
°¨t
);

487 
	}
}

489 
	$vÆid©e_dëe˘‹_ªˇŒ
(*
cfgfûe
, *
weightfûe
)

491 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

492 
	`£t_b©ch_√tw‹k
(
√t
, 1);

493 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

494 
	`§™d
(
	`time
(0));

496 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/coco_val_5k.list");

497 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

499 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

501 
j
, 
k
;

503 
m
 = 
∂i°
->
size
;

504 
i
=0;

506 
thªsh
 = .001;

507 
iou_thªsh
 = .5;

508 
nms
 = .4;

510 
tŸÆ
 = 0;

511 
c‹ª˘
 = 0;

512 
¥›oßls
 = 0;

513 
avg_iou
 = 0;

515 
i
 = 0; i < 
m
; ++i){

516 *
∑th
 = 
∑ths
[
i
];

517 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
∑th
, 0, 0);

518 
image
 
sized
 = 
	`ªsize_image
(
‹ig
, 
√t
->
w
,Çë->
h
);

519 *
id
 = 
	`ba£cfg
(
∑th
);

520 
	`√tw‹k_¥edi˘
(
√t
, 
sized
.
d©a
);

521 
nboxes
 = 0;

522 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
sized
.
w
, sized.
h
, 
thªsh
, .5, 0, 1, &
nboxes
);

523 i‡(
nms
Ë
	`do_nms_obj
(
dës
, 
nboxes
, 1,Çms);

525 
œbñ∑th
[4096];

526 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

527 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

528 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

529 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

531 
num_œbñs
 = 0;

532 
box_œbñ
 *
åuth
 = 
	`ªad_boxes
(
œbñ∑th
, &
num_œbñs
);

533 
k
 = 0; k < 
nboxes
; ++k){

534 if(
dës
[
k
].
obje˘√ss
 > 
thªsh
){

535 ++
¥›oßls
;

538 
j
 = 0; j < 
num_œbñs
; ++j) {

539 ++
tŸÆ
;

540 
box
 
t
 = {
åuth
[
j
].
x
,Åruth[j].
y
,Åruth[j].
w
,Åruth[j].
h
};

541 
be°_iou
 = 0;

542 
k
 = 0; k < 
l
.
w
*l.
h
*l.
n
; ++k){

543 
iou
 = 
	`box_iou
(
dës
[
k
].
bbox
, 
t
);

544 if(
dës
[
k
].
obje˘√ss
 > 
thªsh
 && 
iou
 > 
be°_iou
){

545 
be°_iou
 = 
iou
;

548 
avg_iou
 +
be°_iou
;

549 if(
be°_iou
 > 
iou_thªsh
){

550 ++
c‹ª˘
;

554 
	`Ârötf
(
°dîr
, "%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tReˇŒ:%.2f%%\n", 
i
, 
c‹ª˘
, 
tŸÆ
, ()
¥›oßls
/(i+1), 
avg_iou
*100/total, 100.*correct/total);

555 
	`‰ì
(
id
);

556 
	`‰ì_image
(
‹ig
);

557 
	`‰ì_image
(
sized
);

559 
	}
}

562 
	$ã°_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
, 
hõr_thªsh
, *
outfûe
, 
fuŒs¸ìn
)

564 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

565 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

566 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

568 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

569 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

570 
	`£t_b©ch_√tw‹k
(
√t
, 1);

571 
	`§™d
(2222222);

572 
time
;

573 
buff
[256];

574 *
öput
 = 
buff
;

575 
nms
=.45;

577 if(
fûíame
){

578 
	`°∫˝y
(
öput
, 
fûíame
, 256);

580 
	`¥ötf
("Enter Image Path: ");

581 
	`fÊush
(
°dout
);

582 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

583 if(!
öput
) ;

584 
	`°πok
(
öput
, "\n");

586 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
,0,0);

587 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

592 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

595 *
X
 = 
sized
.
d©a
;

596 
time
=
	`wh©_time_is_ô_now
();

597 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

598 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`wh©_time_is_ô_now
()-
time
);

599 
nboxes
 = 0;

600 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
im
.
w
, im.
h
, 
thªsh
, 
hõr_thªsh
, 0, 1, &
nboxes
);

603 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
nboxes
, 
l
.
˛as£s
,Çms);

604 
	`døw_dëe˘i⁄s
(
im
, 
dës
, 
nboxes
, 
thªsh
, 
«mes
, 
Æphabë
, 
l
.
˛as£s
);

605 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

606 if(
outfûe
){

607 
	`ßve_image
(
im
, 
outfûe
);

610 
	`ßve_image
(
im
, "predictions");

611 #ifde‡
OPENCV


612 
	`cvNamedWödow
("¥edi˘i⁄s", 
CV_WINDOW_NORMAL
);

613 if(
fuŒs¸ìn
){

614 
	`cvSëWödowPr›îty
("¥edi˘i⁄s", 
CV_WND_PROP_FULLSCREEN
, 
CV_WINDOW_FULLSCREEN
);

616 
	`show_image
(
im
, "predictions");

617 
	`cvWaôKey
(0);

618 
	`cvDe°royAŒWödows
();

622 
	`‰ì_image
(
im
);

623 
	`‰ì_image
(
sized
);

624 i‡(
fûíame
) ;

626 
	}
}

794 
	$run_dëe˘‹
(
¨gc
, **
¨gv
)

796 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

797 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .5);

798 
hõr_thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-hier", .5);

799 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

800 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

801 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 3);

802 if(
¨gc
 < 4){

803 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

806 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

807 *
outfûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-out", 0);

808 *
gpus
 = 0;

809 
gpu
 = 0;

810 
ngpus
 = 0;

811 if(
gpu_li°
){

812 
	`¥ötf
("%s\n", 
gpu_li°
);

813 
Àn
 = 
	`°æí
(
gpu_li°
);

814 
ngpus
 = 1;

815 
i
;

816 
i
 = 0; i < 
Àn
; ++i){

817 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

819 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

820 
i
 = 0; i < 
ngpus
; ++i){

821 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

822 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

825 
gpu
 = 
gpu_ödex
;

826 
gpus
 = &
gpu
;

827 
ngpus
 = 1;

830 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

831 
fuŒs¸ìn
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-fullscreen");

832 
width
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-w", 0);

833 
height
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-h", 0);

834 
Âs
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-fps", 0);

837 *
d©acfg
 = 
¨gv
[3];

838 *
cfg
 = 
¨gv
[4];

839 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

840 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

841 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
fûíame
, 
thªsh
, 
hõr_thªsh
, 
outfûe
, 
fuŒs¸ìn
);

842 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

843 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
outfûe
);

844 if(0==
	`°rcmp
(
¨gv
[2], "vÆid2")Ë
	`vÆid©e_dëe˘‹_Êù
(
d©acfg
, 
cfg
, 
weights
, 
outfûe
);

845 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_dëe˘‹_ªˇŒ
(
cfg
, 
weights
);

846 if(0==
	`°rcmp
(
¨gv
[2], "demo")) {

847 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

848 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 20);

849 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

850 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

851 
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
«mes
, 
˛as£s
, 
‰ame_skù
, 
¥efix
, 
avg
, 
hõr_thªsh
, 
width
, 
height
, 
Âs
, 
fuŒs¸ìn
);

855 
	}
}

	@dice.c

1 
	~"d¨k√t.h
"

3 *
	gdi˚_œbñs
[] = {"face1","face2","face3","face4","face5","face6"};

5 
	$åaö_di˚
(*
cfgfûe
, *
weightfûe
)

7 
	`§™d
(
	`time
(0));

8 
avg_loss
 = -1;

9 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

10 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

11 
	`¥ötf
("%s\n", 
ba£
);

12 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

13 if(
weightfûe
){

14 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

16 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

17 
imgs
 = 1024;

18 
i
 = *
√t
.
£í
/
imgs
;

19 **
œbñs
 = 
di˚_œbñs
;

20 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/dice/dice.train.list");

21 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

22 
	`¥ötf
("%d\n", 
∂i°
->
size
);

23 
˛ock_t
 
time
;

25 ++
i
;

26 
time
=
	`˛ock
();

27 
d©a
 
åaö
 = 
	`lﬂd_d©a_ﬁd
(
∑ths
, 
imgs
, 
∂i°
->
size
, 
œbñs
, 6, 
√t
.
w
,Çë.
h
);

28 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

30 
time
=
	`˛ock
();

31 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

32 if(
avg_loss
 =-1Ëavg_los†
loss
;

33 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

34 
	`¥ötf
("%d: %f, %‡avg, %l‡£c⁄ds, %ld images\n", 
i
, 
loss
, 
avg_loss
, 
	`£c
(
	`˛ock
()-
time
), *
√t
.
£í
);

35 
	`‰ì_d©a
(
åaö
);

36 if((
i
 % 100Ë=0Ë
√t
.
À¨nög_øã
 *= .1;

37 if(
i
%100==0){

38 
buff
[256];

39 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
i
);

40 
	`ßve_weights
(
√t
, 
buff
);

43 
	}
}

45 
	$vÆid©e_di˚
(*
fûíame
, *
weightfûe
)

47 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

48 if(
weightfûe
){

49 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

51 
	`§™d
(
	`time
(0));

53 **
œbñs
 = 
di˚_œbñs
;

54 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/dice/dice.val.list");

56 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

57 
m
 = 
∂i°
->
size
;

58 
	`‰ì_li°
(
∂i°
);

60 
d©a
 
vÆ
 = 
	`lﬂd_d©a_ﬁd
(
∑ths
, 
m
, 0, 
œbñs
, 6, 
√t
.
w
,Çë.
h
);

61 *
acc
 = 
	`√tw‹k_accuøcõs
(
√t
, 
vÆ
, 2);

62 
	`¥ötf
("VÆid©i⁄ Accuøcy: %f, %d images\n", 
acc
[0], 
m
);

63 
	`‰ì_d©a
(
vÆ
);

64 
	}
}

66 
	$ã°_di˚
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

68 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

69 if(
weightfûe
){

70 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

72 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

73 
	`§™d
(2222222);

74 
i
 = 0;

75 **
«mes
 = 
di˚_œbñs
;

76 
buff
[256];

77 *
öput
 = 
buff
;

78 
ödexes
[6];

80 if(
fûíame
){

81 
	`°∫˝y
(
öput
, 
fûíame
, 256);

83 
	`¥ötf
("Enter Image Path: ");

84 
	`fÊush
(
°dout
);

85 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

86 if(!
öput
) ;

87 
	`°πok
(
öput
, "\n");

89 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 
√t
.
w
,Çë.
h
);

90 *
X
 = 
im
.
d©a
;

91 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

92 
	`t›_¥edi˘i⁄s
(
√t
, 6, 
ödexes
);

93 
i
 = 0; i < 6; ++i){

94 
ödex
 = 
ödexes
[
i
];

95 
	`¥ötf
("%s: %f\n", 
«mes
[
ödex
], 
¥edi˘i⁄s
[index]);

97 
	`‰ì_image
(
im
);

98 i‡(
fûíame
) ;

100 
	}
}

102 
	$run_di˚
(
¨gc
, **
¨gv
)

104 if(
¨gc
 < 4){

105 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

109 *
cfg
 = 
¨gv
[3];

110 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

111 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

112 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_di˚
(
cfg
, 
weights
, 
fûíame
);

113 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_di˚
(
cfg
, 
weights
);

114 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_di˚
(
cfg
, 
weights
);

115 
	}
}

	@go.c

1 
	~"d¨k√t.h
"

3 
	~<as£π.h
>

4 
	~<m©h.h
>

5 
	~<uni°d.h
>

7 
	gövîãd
 = 1;

8 
	gnoi
 = 1;

9 c⁄° 
	gnöd
 = 10;

10 
ÀgÆ_go
(*
b
, *
ko
, 
p
, 
r
, 
c
);

11 
check_ko
(*
x
, *
ko
);

14 **
	md©a
;

15 
	mn
;

16 } 
	tmoves
;

18 *
	$fgëgo
(
FILE
 *
Â
)

20 if(
	`„of
(
Â
))  0;

21 
size_t
 
size
 = 96;

22 *
löe
 = 
	`mÆloc
(
size
*());

23 if(
size
 !
	`‰ód
(
löe
, (), size, 
Â
)){

24 
	`‰ì
(
löe
);

28  
löe
;

29 
	}
}

31 
moves
 
	$lﬂd_go_moves
(*
fûíame
)

33 
moves
 
m
;

34 
m
.
n
 = 128;

35 
m
.
d©a
 = 
	`ˇŒoc
(128, (*));

36 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

37 
cou¡
 = 0;

38 *
löe
 = 0;

39 (
löe
 = 
	`fgëgo
(
Â
))) {

40 i‡(
cou¡
 >
m
.
n
) {

41 
m
.
n
 *= 2;

42 
m
.
d©a
 = 
	`ªÆloc
(m.d©a, m.
n
*(*));

44 
m
.
d©a
[
cou¡
] = 
löe
;

45 ++
cou¡
;

47 
	`¥ötf
("%d\n", 
cou¡
);

48 
m
.
n
 = 
cou¡
;

49 
m
.
d©a
 = 
	`ªÆloc
(m.d©a, 
cou¡
*(*));

50  
m
;

51 
	}
}

53 
	$°rög_to_bﬂrd
(*
s
, *
bﬂrd
)

55 
i
, 
j
;

56 
	`mem£t
(
bﬂrd
, 0, 2*19*19*());

57 
cou¡
 = 0;

58 
i
 = 0; i < 91; ++i){

59 
c
 = 
s
[
i
];

60 
j
 = 0; j < 4; ++j){

61 
me
 = (
c
 >> (2*
j
)) & 1;

62 
you
 = (
c
 >> (2*
j
 + 1)) & 1;

63 i‡(
me
Ë
bﬂrd
[
cou¡
] = 1;

64 i‡(
you
Ë
bﬂrd
[
cou¡
 + 19*19] = 1;

65 ++
cou¡
;

66 if(
cou¡
 >= 19*19) ;

69 
	}
}

71 
	$bﬂrd_to_°rög
(*
s
, *
bﬂrd
)

73 
i
, 
j
;

74 
	`mem£t
(
s
, 0, (19*19/4+1)*());

75 
cou¡
 = 0;

76 
i
 = 0; i < 91; ++i){

77 
j
 = 0; j < 4; ++j){

78 
me
 = (
bﬂrd
[
cou¡
] == 1);

79 
you
 = (
bﬂrd
[
cou¡
 + 19*19] == 1);

80 i‡(
me
Ë
s
[
i
] = s[i] | (1<<(2*
j
));

81 i‡(
you
Ë
s
[
i
] = s[i] | (1<<(2*
j
 + 1));

82 ++
cou¡
;

83 if(
cou¡
 >= 19*19) ;

86 
	}
}

88 
	$occupõd
(*
b
, 
i
)

90 i‡(
b
[
i
])  1;

91 i‡(
b
[
i
+19*19])  -1;

93 
	}
}

95 
d©a
 
	$øndom_go_moves
(
moves
 
m
, 
n
)

97 
d©a
 
d
 = {0};

98 
d
.
X
 = 
	`make_m©rix
(
n
, 19*19*3);

99 
d
.
y
 = 
	`make_m©rix
(
n
, 19*19+2);

100 
i
, 
j
;

101 
i
 = 0; i < 
n
; ++i){

102 *
bﬂrd
 = 
d
.
X
.
vÆs
[
i
];

103 *
œbñ
 = 
d
.
y
.
vÆs
[
i
];

104 *
b
 = 
m
.
d©a
[
	`ønd
()%m.
n
];

105 
∂ayî
 = 
b
[0] - '0';

106 
ªsu…
 = 
b
[1] - '0';

107 
row
 = 
b
[2];

108 
cﬁ
 = 
b
[3];

109 
	`°rög_to_bﬂrd
(
b
+4, 
bﬂrd
);

110 if(
∂ayî
 > 0Ë
j
 = 0; j < 19*19; ++jË
bﬂrd
[19*19*2 + j] = 1;

111 
œbñ
[19*19+1] = (
∂ayî
==
ªsu…
);

112 if(
row
 >19 || 
cﬁ
 >= 19){

113 
œbñ
[19*19] = 1;

115 
œbñ
[
cﬁ
 + 19*
row
] = 1;

116 if(
	`occupõd
(
bﬂrd
, 
cﬁ
 + 19*
row
)Ë
	`¥ötf
("hey\n");

119 
Êù
 = 
	`ønd
()%2;

120 
rŸ©e
 = 
	`ønd
()%4;

121 
image
 
ö
 = 
	`Êﬂt_to_image
(19, 19, 3, 
bﬂrd
);

122 
image
 
out
 = 
	`Êﬂt_to_image
(19, 19, 1, 
œbñ
);

123 if(
Êù
){

124 
	`Êù_image
(
ö
);

125 
	`Êù_image
(
out
);

127 
	`rŸ©e_image_cw
(
ö
, 
rŸ©e
);

128 
	`rŸ©e_image_cw
(
out
, 
rŸ©e
);

130  
d
;

131 
	}
}

134 
	$åaö_go
(*
cfgfûe
, *
weightfûe
, *
fûíame
, *
gpus
, 
ngpus
, 
˛ór
)

136 
i
;

137 
avg_loss
 = -1;

138 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

139 
	`¥ötf
("%s\n", 
ba£
);

140 
	`¥ötf
("%d\n", 
ngpus
);

141 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network*));

143 
	`§™d
(
	`time
(0));

144 
£ed
 = 
	`ønd
();

145 
i
 = 0; i < 
ngpus
; ++i){

146 
	`§™d
(
£ed
);

147 #ifde‡
GPU


148 
	`cuda_£t_devi˚
(
gpus
[
i
]);

150 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

151 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

153 
√tw‹k
 *
√t
 = 
√ts
[0];

154 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

156 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

158 
buff
[256];

159 
moves
 
m
 = 
	`lﬂd_go_moves
(
fûíame
);

162 
N
 = 
m
.
n
;

163 
	`¥ötf
("Moves: %d\n", 
N
);

164 
ïoch
 = (*
√t
->
£í
)/
N
;

165 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

166 
time
=
	`wh©_time_is_ô_now
();

168 
d©a
 
åaö
 = 
	`øndom_go_moves
(
m
, 
√t
->
b©ch
*√t->
subdivisi⁄s
*
ngpus
);

169 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`wh©_time_is_ô_now
(Ë- 
time
);

170 
time
=
	`wh©_time_is_ô_now
();

172 
loss
 = 0;

173 #ifde‡
GPU


174 if(
ngpus
 == 1){

175 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

177 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 10);

180 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

182 
	`‰ì_d©a
(
åaö
);

184 if(
avg_loss
 =-1Ëavg_los†
loss
;

185 
avg_loss
 =ávg_loss*.95 + 
loss
*.05;

186 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`wh©_time_is_ô_now
()-
time
, *net->seen);

187 if(*
√t
->
£í
/
N
 > 
ïoch
){

188 
ïoch
 = *
√t
->
£í
/
N
;

189 
buff
[256];

190 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
,
ba£
, 
ïoch
);

191 
	`ßve_weights
(
√t
, 
buff
);

194 if(
	`gë_cuºít_b©ch
(
√t
)%1000 == 0){

195 
buff
[256];

196 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

197 
	`ßve_weights
(
√t
, 
buff
);

199 if(
	`gë_cuºít_b©ch
(
√t
)%10000 == 0){

200 
buff
[256];

201 
	`•rötf
(
buff
, "%s/%s_%ld.backup",
backup_dúe˘‹y
,
ba£
,
	`gë_cuºít_b©ch
(
√t
));

202 
	`ßve_weights
(
√t
, 
buff
);

205 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

206 
	`ßve_weights
(
√t
, 
buff
);

208 
	`‰ì_√tw‹k
(
√t
);

209 
	`‰ì
(
ba£
);

210 
	}
}

212 
	$¥›ag©e_libîty
(*
bﬂrd
, *
lib
, *
visôed
, 
row
, 
cﬁ
, 
side
)

214 i‡(
row
 < 0 ||Ñow > 18 || 
cﬁ
 < 0 || col > 18) ;

215 
ödex
 = 
row
*19 + 
cﬁ
;

216 i‡(
	`occupõd
(
bﬂrd
,
ödex
Ë!
side
) ;

217 i‡(
visôed
[
ödex
]) ;

218 
visôed
[
ödex
] = 1;

219 
lib
[
ödex
] += 1;

220 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
+1, 
cﬁ
, 
side
);

221 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
-1, 
cﬁ
, 
side
);

222 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
, 
cﬁ
+1, 
side
);

223 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
, 
cﬁ
-1, 
side
);

224 
	}
}

227 *
	$ˇlcuœã_libîtõs
(*
bﬂrd
)

229 *
lib
 = 
	`ˇŒoc
(19*19, ());

230 
visôed
[19*19];

231 
i
, 
j
;

232 
j
 = 0; j < 19; ++j){

233 
i
 = 0; i < 19; ++i){

234 
	`mem£t
(
visôed
, 0, 19*19*());

235 
ödex
 = 
j
*19 + 
i
;

236 if(!
	`occupõd
(
bﬂrd
,
ödex
)){

237 i‡((
i
 > 0Ë&& 
	`occupõd
(
bﬂrd
,
ödex
 - 1)Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, 
j
, i-1, occupied(board,index-1));

238 i‡((
i
 < 18Ë&& 
	`occupõd
(
bﬂrd
,
ödex
 + 1)Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, 
j
, i+1, occupied(board,index+1));

239 i‡((
j
 > 0Ë&& 
	`occupõd
(
bﬂrd
,
ödex
 - 19)Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, j-1, 
i
, occupied(board,index-19));

240 i‡((
j
 < 18Ë&& 
	`occupõd
(
bﬂrd
,
ödex
 + 19)Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, j+1, 
i
, occupied(board,index+19));

244  
lib
;

245 
	}
}

247 
	$¥öt_bﬂrd
(
FILE
 *
°ªam
, *
bﬂrd
, 
∂ayî
, *
ödexes
)

249 
i
,
j
,
n
;

250 
	`Ârötf
(
°ªam
, " ");

251 
i
 = 0; i < 19; ++i){

252 
	`Ârötf
(
°ªam
, "%¯", 'A' + 
i
 + 1*(ò> 7 && 
noi
));

254 
	`Ârötf
(
°ªam
, "\n");

255 
j
 = 0; j < 19; ++j){

256 
	`Ârötf
(
°ªam
, "%2d", (
övîãd
Ë? 19-
j
 : j+1);

257 
i
 = 0; i < 19; ++i){

258 
ödex
 = 
j
*19 + 
i
;

259 if(
ödexes
){

260 
found
 = 0;

261 
n
 = 0;Ç < 
nöd
; ++n){

262 if(
ödex
 =
ödexes
[
n
]){

263 
found
 = 1;

271 
	`Ârötf
(
°ªam
, " %d", 
n
+1);

274 if(
found
) ;

278 i‡(
	`occupõd
(
bﬂrd
, 
ödex
Ë=
∂ayî
Ë
	`Ârötf
(
°ªam
, " X");

279 i‡(
	`occupõd
(
bﬂrd
, 
ödex
Ë==-
∂ayî
Ë
	`Ârötf
(
°ªam
, " O");

280 
	`Ârötf
(
°ªam
, " .");

282 
	`Ârötf
(
°ªam
, "\n");

284 
	}
}

286 
	$Êù_bﬂrd
(*
bﬂrd
)

288 
i
;

289 
i
 = 0; i < 19*19; ++i){

290 
sw≠
 = 
bﬂrd
[
i
];

291 
bﬂrd
[
i
] = board[i+19*19];

292 
bﬂrd
[
i
+19*19] = 
sw≠
;

293 
bﬂrd
[
i
+19*19*2] = 1-board[i+19*19*2];

295 
	}
}

297 
	$¥edi˘_move2
(
√tw‹k
 *
√t
, *
bﬂrd
, *
move
, 
mu…i
)

299 *
ouçut
 = 
	`√tw‹k_¥edi˘
(
√t
, 
bﬂrd
);

300 
	`c›y_˝u
(19*19+1, 
ouçut
, 1, 
move
, 1);

301 
ªsu…
 = 
ouçut
[19*19 + 1];

302 
i
;

303 if(
mu…i
){

304 
image
 
bim
 = 
	`Êﬂt_to_image
(19, 19, 3, 
bﬂrd
);

305 
i
 = 1; i < 8; ++i){

306 
	`rŸ©e_image_cw
(
bim
, 
i
);

307 if(
i
 >4Ë
	`Êù_image
(
bim
);

309 *
ouçut
 = 
	`√tw‹k_¥edi˘
(
√t
, 
bﬂrd
);

310 
image
 
oim
 = 
	`Êﬂt_to_image
(19, 19, 1, 
ouçut
);

311 
ªsu…
 +
ouçut
[19*19 + 1];

313 if(
i
 >4Ë
	`Êù_image
(
oim
);

314 
	`rŸ©e_image_cw
(
oim
, -
i
);

316 
	`axpy_˝u
(19*19+1, 1, 
ouçut
, 1, 
move
, 1);

318 if(
i
 >4Ë
	`Êù_image
(
bim
);

319 
	`rŸ©e_image_cw
(
bim
, -
i
);

321 
ªsu…
 =Ñesult/8;

322 
	`sˇl_˝u
(19*19+1, 1./8., 
move
, 1);

324 
i
 = 0; i < 19*19; ++i){

325 if(
bﬂrd
[
i
] || bﬂrd[i+19*19]Ë
move
[i] = 0;

327  
ªsu…
;

328 
	}
}

330 
	$ªmove_c⁄√˘ed
(*
b
, *
lib
, 
p
, 
r
, 
c
)

332 i‡(
r
 < 0 ||Ñ >19 || 
c
 < 0 || c >= 19) ;

333 i‡(
	`occupõd
(
b
, 
r
*19 + 
c
Ë!
p
) ;

334 i‡(
lib
[
r
*19 + 
c
] != 1) ;

335 
b
[
r
*19 + 
c
] = 0;

336 
b
[19*19 + 
r
*19 + 
c
] = 0;

337 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
+1, 
c
);

338 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
-1, 
c
);

339 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
, 
c
+1);

340 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
, 
c
-1);

341 
	}
}

344 
	$move_go
(*
b
, 
p
, 
r
, 
c
)

346 *
l
 = 
	`ˇlcuœã_libîtõs
(
b
);

347 if(
p
 > 0Ë
b
[
r
*19 + 
c
] = 1;

348 
b
[19*19 + 
r
*19 + 
c
] = 1;

349 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
+1, 
c
);

350 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
-1, 
c
);

351 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
, 
c
+1);

352 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
, 
c
-1);

353 
	`‰ì
(
l
);

354 
	}
}

356 
	$com∑ª_bﬂrd
(*
a
, *
b
)

358 if(
	`memcmp
(
a
, 
b
, 19*19*3*()) == 0)  1;

360 
	}
}

362 
	sm˘s_åì
{

363 *
	mbﬂrd
;

364 
m˘s_åì
 **
	mchûdªn
;

365 *
	m¥i‹
;

366 *
	mvisô_cou¡
;

367 *
	mvÆue
;

368 *
	mmón
;

369 *
	m¥ob
;

370 
	mtŸÆ_cou¡
;

371 
	mªsu…
;

372 
	md⁄e
;

373 
	m∑ss
;

374 } 
	tm˘s_åì
;

376 
	$‰ì_m˘s
(
m˘s_åì
 *
roŸ
)

378 if(!
roŸ
) ;

379 
i
;

380 
	`‰ì
(
roŸ
->
bﬂrd
);

381 
i
 = 0; i < 19*19+1; ++i){

382 if(
roŸ
->
chûdªn
[
i
]Ë
	`‰ì_m˘s
(root->children[i]);

384 
	`‰ì
(
roŸ
->
chûdªn
);

385 
	`‰ì
(
roŸ
->
¥i‹
);

386 
	`‰ì
(
roŸ
->
visô_cou¡
);

387 
	`‰ì
(
roŸ
->
vÆue
);

388 
	`‰ì
(
roŸ
->
món
);

389 
	`‰ì
(
roŸ
->
¥ob
);

390 
	`‰ì
(
roŸ
);

391 
	}
}

393 *
	$√tw‹k_¥edi˘_rŸ©i⁄s
(
√tw‹k
 *
√t
, *
√xt
)

395 
n
 = 
√t
->
b©ch
;

396 *
ö
 = 
	`ˇŒoc
(19*19*3*
n
, ());

397 
image
 
im
 = 
	`Êﬂt_to_image
(19, 19, 3, 
√xt
);

398 
i
,
j
;

399 *
öds
 = 
	`øndom_ödex_‹dî
(0, 8);

400 
j
 = 0; j < 
n
; ++j){

401 
i
 = 
öds
[
j
];

402 
	`rŸ©e_image_cw
(
im
, 
i
);

403 if(
i
 >4Ë
	`Êù_image
(
im
);

404 
	`mem˝y
(
ö
 + 19*19*3*
j
, 
im
.
d©a
, 19*19*3*());

405 if(
i
 >4Ë
	`Êù_image
(
im
);

406 
	`rŸ©e_image_cw
(
im
, -
i
);

408 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö
);

409 
j
 = 0; j < 
n
; ++j){

410 
i
 = 
öds
[
j
];

411 
image
 
im
 = 
	`Êﬂt_to_image
(19, 19, 1, 
¥ed
 + 
j
*(19*19 + 2));

412 if(
i
 >4Ë
	`Êù_image
(
im
);

413 
	`rŸ©e_image_cw
(
im
, -
i
);

414 if(
j
 > 0){

415 
	`axpy_˝u
(19*19+2, 1, 
im
.
d©a
, 1, 
¥ed
, 1);

418 
	`‰ì
(
ö
);

419 
	`‰ì
(
öds
);

420 
	`sˇl_˝u
(19*19+2, 1./
n
, 
¥ed
, 1);

421  
¥ed
;

422 
	}
}

424 
m˘s_åì
 *
	$ex∑nd
(*
√xt
, *
ko
, 
√tw‹k
 *
√t
)

426 
m˘s_åì
 *
roŸ
 = 
	`ˇŒoc
(1, (mcts_tree));

427 
roŸ
->
bﬂrd
 = 
√xt
;

428 
roŸ
->
chûdªn
 = 
	`ˇŒoc
(19*19+1, (
m˘s_åì
*));

429 
roŸ
->
¥i‹
 = 
	`ˇŒoc
(19*19 + 1, ());

430 
roŸ
->
¥ob
 = 
	`ˇŒoc
(19*19 + 1, ());

431 
roŸ
->
món
 = 
	`ˇŒoc
(19*19 + 1, ());

432 
roŸ
->
vÆue
 = 
	`ˇŒoc
(19*19 + 1, ());

433 
roŸ
->
visô_cou¡
 = 
	`ˇŒoc
(19*19 + 1, ());

434 
roŸ
->
tŸÆ_cou¡
 = 1;

435 
i
;

436 *
¥ed
 = 
	`√tw‹k_¥edi˘_rŸ©i⁄s
(
√t
, 
√xt
);

437 
	`c›y_˝u
(19*19+1, 
¥ed
, 1, 
roŸ
->
¥i‹
, 1);

438 
vÆ
 = 2*
¥ed
[19*19 + 1] - 1;

439 
roŸ
->
ªsu…
 = 
vÆ
;

440 
i
 = 0; i < 19*19+1; ++i) {

441 
roŸ
->
visô_cou¡
[
i
] = 0;

442 
roŸ
->
vÆue
[
i
] = 0;

443 
roŸ
->
món
[
i
] = 
vÆ
;

444 if(
i
 < 19*19 && 
	`occupõd
(
√xt
, i)){

445 
roŸ
->
vÆue
[
i
] = -1;

446 
roŸ
->
món
[
i
] = -1;

447 
roŸ
->
¥i‹
[
i
] = 0;

451  
roŸ
;

452 
	}
}

454 *
	$c›y_bﬂrd
(*
bﬂrd
)

456 *
√xt
 = 
	`ˇŒoc
(19*19*3, ());

457 
	`c›y_˝u
(19*19*3, 
bﬂrd
, 1, 
√xt
, 1);

458  
√xt
;

459 
	}
}

461 
	$£À˘_m˘s
(
m˘s_åì
 *
roŸ
, 
√tw‹k
 *
√t
, *
¥ev
, 
˝u˘
)

463 if(
roŸ
->
d⁄e
Ë -roŸ->
ªsu…
;

464 
i
;

465 
max
 = -1000;

466 
max_i
 = 0;

467 
i
 = 0; i < 19*19+1; ++i){

468 
roŸ
->
¥ob
[
i
] =ÑoŸ->
món
[i] + 
˝u˘
*roŸ->
¥i‹
[i] * 
	`sqπ
‘oŸ->
tŸÆ_cou¡
Ë/ (1. +ÑoŸ->
visô_cou¡
[i]);

469 if(
roŸ
->
¥ob
[
i
] > 
max
){

470 
max
 = 
roŸ
->
¥ob
[
i
];

471 
max_i
 = 
i
;

474 
vÆ
;

475 
i
 = 
max_i
;

476 
roŸ
->
visô_cou¡
[
i
]++;

477 
roŸ
->
tŸÆ_cou¡
++;

478 i‡(
roŸ
->
chûdªn
[
i
]) {

479 
vÆ
 = 
	`£À˘_m˘s
(
roŸ
->
chûdªn
[
i
], 
√t
,ÑoŸ->
bﬂrd
, 
˝u˘
);

481 if(
max_i
 < 19*19 && !
	`ÀgÆ_go
(
roŸ
->
bﬂrd
, 
¥ev
, 1, max_i/19, max_i%19)) {

482 
roŸ
->
món
[
i
] = -1;

483 
roŸ
->
vÆue
[
i
] = -1;

484 
roŸ
->
¥i‹
[
i
] = 0;

485 --
roŸ
->
tŸÆ_cou¡
;

486  
	`£À˘_m˘s
(
roŸ
, 
√t
, 
¥ev
, 
˝u˘
);

490 *
√xt
 = 
	`c›y_bﬂrd
(
roŸ
->
bﬂrd
);

491 i‡(
max_i
 < 19*19) {

492 
	`move_go
(
√xt
, 1, 
max_i
 / 19, max_i % 19);

494 
	`Êù_bﬂrd
(
√xt
);

495 
roŸ
->
chûdªn
[
i
] = 
	`ex∑nd
(
√xt
,ÑoŸ->
bﬂrd
, 
√t
);

496 
vÆ
 = -
roŸ
->
chûdªn
[
i
]->
ªsu…
;

497 if(
max_i
 == 19*19){

498 
roŸ
->
chûdªn
[
i
]->
∑ss
 = 1;

499 i‡(
roŸ
->
∑ss
){

500 
roŸ
->
chûdªn
[
i
]->
d⁄e
 = 1;

505 
roŸ
->
vÆue
[
i
] +
vÆ
;

506 
roŸ
->
món
[
i
] =ÑoŸ->
vÆue
[i]/roŸ->
visô_cou¡
[i];

507  -
vÆ
;

508 
	}
}

510 
m˘s_åì
 *
	$run_m˘s
(
m˘s_åì
 *
åì
, 
√tw‹k
 *
√t
, *
bﬂrd
, *
ko
, 
∂ayî
, 
n
, 
˝u˘
, 
£cs
)

512 
i
;

513 
t
 = 
	`wh©_time_is_ô_now
();

514 if(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

515 if(!
åì
Ëåì = 
	`ex∑nd
(
	`c›y_bﬂrd
(
bﬂrd
), 
ko
, 
√t
);

516 
	`as£π
(
	`com∑ª_bﬂrd
(
åì
->
bﬂrd
, board));

517 
i
 = 0; i < 
n
; ++i){

518 i‡(
£cs
 > 0 && (
	`wh©_time_is_ô_now
(Ë- 
t
) > secs) ;

519 
max_i
 = 
	`max_öt_ödex
(
åì
->
visô_cou¡
, 19*19+1);

520 i‡(
åì
->
visô_cou¡
[
max_i
] >
n
) ;

521 
	`£À˘_m˘s
(
åì
, 
√t
, 
ko
, 
˝u˘
);

523 if(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

525  
åì
;

526 
	}
}

528 
m˘s_åì
 *
	$move_m˘s
(
m˘s_åì
 *
åì
, 
ödex
)

530 if(
ödex
 < 0 || index > 19*19 || !
åì
 || !åì->
chûdªn
[index]) {

531 
	`‰ì_m˘s
(
åì
);

532 
åì
 = 0;

534 
m˘s_åì
 *
sw≠
 = 
åì
;

535 
åì
 =Åªe->
chûdªn
[
ödex
];

536 
sw≠
->
chûdªn
[
ödex
] = 0;

537 
	`‰ì_m˘s
(
sw≠
);

539  
åì
;

540 
	}
}

543 
	mvÆue
;

544 
	mm˘s
;

545 
	mrow
;

546 
	mcﬁ
;

547 } 
	tmove
;

549 
move
 
	$pick_move
(
m˘s_åì
 *
åì
, 
ãmp
, 
∂ayî
)

551 
i
;

552 
¥obs
[19*19+1] = {0};

553 
move
 
m
 = {0};

554 
sum
 = 0;

561 
i
 = 0; i < 19*19+1; ++i){

562 
sum
 +
	`pow
(
åì
->
visô_cou¡
[
i
], 1./
ãmp
);

564 
i
 = 0; i < 19*19+1; ++i){

565 
¥obs
[
i
] = 
	`pow
(
åì
->
visô_cou¡
[i], 1./
ãmp
Ë/ 
sum
;

568 
ödex
 = 
	`ßm∂e_¨øy
(
¥obs
, 19*19+1);

569 
m
.
row
 = 
ödex
 / 19;

570 
m
.
cﬁ
 = 
ödex
 % 19;

571 
m
.
vÆue
 = (
åì
->
ªsu…
+1.)/2.;

572 
m
.
m˘s
 = (
åì
->
món
[
ödex
]+1.)/2.;

574 
ödexes
[
nöd
];

575 
	`t›_k
(
¥obs
, 19*19+1, 
nöd
, 
ödexes
);

576 
	`¥öt_bﬂrd
(
°dîr
, 
åì
->
bﬂrd
, 
∂ayî
, 
ödexes
);

578 
	`Ârötf
(
°dîr
, "%d %d, Resu…: %f, Pri‹: %f, Prob: %f, Mó¿VÆue: %f, Chûd Resu…: %f, Visôed: %d\n", 
ödex
/19, index%19, 
åì
->
ªsu…
,Åªe->
¥i‹
[ödex], 
¥obs
[ödex],Åªe->
món
[ödex], (åì->
chûdªn
[ödex])?åì->chûdªn[ödex]->ªsu…:0,Åªe->
visô_cou¡
[index]);

579 
öd
 = 
	`max_ödex
(
¥obs
, 19*19+1);

580 
	`Ârötf
(
°dîr
, "%d %d, Resu…: %f, Pri‹: %f, Prob: %f, Mó¿VÆue: %f, Chûd Resu…: %f, Visôed: %d\n", 
öd
/19, ind%19, 
åì
->
ªsu…
,Åªe->
¥i‹
[öd], 
¥obs
[öd],Åªe->
món
[öd], (åì->
chûdªn
[öd])?åì->chûdªn[öd]->ªsu…:0,Åªe->
visô_cou¡
[ind]);

581 
öd
 = 
	`max_ödex
(
åì
->
¥i‹
, 19*19+1);

582 
	`Ârötf
(
°dîr
, "%d %d, Resu…: %f, Pri‹: %f, Prob: %f, Mó¿VÆue: %f, Chûd Resu…: %f, Visôed: %d\n", 
öd
/19, ind%19, 
åì
->
ªsu…
,Åªe->
¥i‹
[öd], 
¥obs
[öd],Åªe->
món
[öd], (åì->
chûdªn
[öd])?åì->chûdªn[öd]->ªsu…:0,Åªe->
visô_cou¡
[ind]);

583  
m
;

584 
	}
}

614 
	$makes_ß„_go
(*
b
, *
lib
, 
p
, 
r
, 
c
){

615 i‡(
r
 < 0 ||Ñ >19 || 
c
 < 0 || c >= 19)  0;

616 i‡(
	`occupõd
(
b
,
r
*19 + 
c
Ë=-
p
){

617 i‡(
lib
[
r
*19 + 
c
] > 1)  0;

620 i‡(!
	`occupõd
(
b
,
r
*19 + 
c
))  1;

621 i‡(
lib
[
r
*19 + 
c
] > 1)  1;

623 
	}
}

625 
	$suicide_go
(*
b
, 
p
, 
r
, 
c
)

627 *
l
 = 
	`ˇlcuœã_libîtõs
(
b
);

628 
ß„
 = 0;

629 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
+1, 
c
);

630 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
-1, 
c
);

631 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
, 
c
+1);

632 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
, 
c
-1);

633 
	`‰ì
(
l
);

634  !
ß„
;

635 
	}
}

637 
	$check_ko
(*
x
, *
ko
)

639 if(!
ko
)  0;

640 
cuº
[19*19*3];

641 
	`c›y_˝u
(19*19*3, 
x
, 1, 
cuº
, 1);

642 if(
cuº
[19*19*2] !
ko
[19*19*2]Ë
	`Êù_bﬂrd
(curr);

643 if(
	`com∑ª_bﬂrd
(
cuº
, 
ko
))  1;

645 
	}
}

647 
	$ÀgÆ_go
(*
b
, *
ko
, 
p
, 
r
, 
c
)

649 i‡(
	`occupõd
(
b
, 
r
*19+
c
))  0;

650 
cuº
[19*19*3];

651 
	`c›y_˝u
(19*19*3, 
b
, 1, 
cuº
, 1);

652 
	`move_go
(
cuº
, 
p
, 
r
, 
c
);

653 if(
	`check_ko
(
cuº
, 
ko
))  0;

654 if(
	`suicide_go
(
b
, 
p
, 
r
, 
c
))  0;

656 
	}
}

733 
	$vÆid_go
(*
cfgfûe
, *
weightfûe
, 
mu…i
, *
fûíame
)

735 
	`§™d
(
	`time
(0));

736 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

737 
	`¥ötf
("%s\n", 
ba£
);

738 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

739 
	`£t_b©ch_√tw‹k
(
√t
, 1);

740 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

742 *
bﬂrd
 = 
	`ˇŒoc
(19*19*3, ());

743 *
move
 = 
	`ˇŒoc
(19*19+2, ());

745 
moves
 
m
 = 
	`lﬂd_go_moves
(
fûíame
);

747 
N
 = 
m
.
n
;

748 
i
,
j
;

749 
c‹ª˘
 = 0;

750 
i
 = 0; i <
N
; ++i) {

751 *
b
 = 
m
.
d©a
[
i
];

752 
∂ayî
 = 
b
[0] - '0';

754 
row
 = 
b
[2];

755 
cﬁ
 = 
b
[3];

756 
åuth
 = 
cﬁ
 + 19*
row
;

757 
	`°rög_to_bﬂrd
(
b
+4, 
bﬂrd
);

758 if(
∂ayî
 > 0Ë
j
 = 0; j < 19*19; ++jË
bﬂrd
[19*19*2 + j] = 1;

759 
	`¥edi˘_move2
(
√t
, 
bﬂrd
, 
move
, 
mu…i
);

760 
ödex
 = 
	`max_ödex
(
move
, 19*19+1);

761 if(
ödex
 =
åuth
Ë++
c‹ª˘
;

762 
	`¥ötf
("%d Accuøcy %f\n", 
i
, (Ë
c‹ª˘
/(i+1));

764 
	}
}

766 
	$¥öt_game
(*
bﬂrd
, 
FILE
 *
Â
)

768 
i
, 
j
;

769 
cou¡
 = 3;

770 
	`Ârötf
(
Â
, "komi 6.5\n");

771 
	`Ârötf
(
Â
, "boardsize 19\n");

772 
	`Ârötf
(
Â
, "clear_board\n");

773 
j
 = 0; j < 19; ++j){

774 
i
 = 0; i < 19; ++i){

775 if(
	`occupõd
(
bﬂrd
,
j
*19 + 
i
Ë=1Ë
	`Ârötf
(
Â
, "play black %c%d\n", 'A'+i+(i>=8), 19-j);

776 if(
	`occupõd
(
bﬂrd
,
j
*19 + 
i
Ë=-1Ë
	`Ârötf
(
Â
, "play white %c%d\n", 'A'+i+(i>=8), 19-j);

777 if(
	`occupõd
(
bﬂrd
,
j
*19 + 
i
)Ë++
cou¡
;

780  
cou¡
;

781 
	}
}

784 
	$°dö_ªady
()

786 
fd_£t
 
ªadfds
;

787 
	`FD_ZERO
(&
ªadfds
);

789 
timevÆ
 
timeout
;

790 
timeout
.
tv_£c
 = 0;

791 
timeout
.
tv_u£c
 = 0;

792 
	`FD_SET
(
STDIN_FILENO
, &
ªadfds
);

794 i‡(
	`£À˘
(1, &
ªadfds
, 
NULL
, NULL, &
timeout
)){

798 
	}
}

800 
m˘s_åì
 *
	$p⁄dî
(
m˘s_åì
 *
åì
, 
√tw‹k
 *
√t
, *
b
, *
ko
, 
∂ayî
, 
˝u˘
)

802 
t
 = 
	`wh©_time_is_ô_now
();

803 
cou¡
 = 0;

804 i‡(
åì
Ë
cou¡
 =Åªe->
tŸÆ_cou¡
;

805 !
	`°dö_ªady
()){

806 i‡(
	`wh©_time_is_ô_now
(Ë- 
t
 > 120) ;

807 
åì
 = 
	`run_m˘s
—ªe, 
√t
, 
b
, 
ko
, 
∂ayî
, 100000, 
˝u˘
, .1);

809 
	`Ârötf
(
°dîr
, "P⁄dîed %d moves...\n", 
åì
->
tŸÆ_cou¡
 - 
cou¡
);

810  
åì
;

811 
	}
}

813 
	$ígöe_go
(*
fûíame
, *
weightfûe
, 
m˘s_ôîs
, 
£cs
, 
ãmp
, 
˝u˘
, 
™⁄
, 
ªsign
)

815 
m˘s_åì
 *
roŸ
 = 0;

816 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

817 
	`£t_b©ch_√tw‹k
(
√t
, 1);

818 
	`§™d
(
	`time
(0));

819 *
bﬂrd
 = 
	`ˇŒoc
(19*19*3, ());

820 
	`Êù_bﬂrd
(
bﬂrd
);

821 *
⁄e
 = 
	`ˇŒoc
(19*19*3, ());

822 *
two
 = 
	`ˇŒoc
(19*19*3, ());

823 
p⁄dî_∂ayî
 = 0;

824 
∑s£d
 = 0;

825 
move_num
 = 0;

826 
maö_time
 = 0;

827 
byo_yomi_time
 = 0;

828 
byo_yomi_°⁄es
 = 0;

829 
bœck_time_À·
 = 0;

830 
bœck_°⁄es_À·
 = 0;

831 
whôe_time_À·
 = 0;

832 
whôe_°⁄es_À·
 = 0;

833 
‹ig_time
 = 
£cs
;

834 
ﬁd_p⁄dî
 = 0;

836 if(
p⁄dî_∂ayî
){

837 
roŸ
 = 
	`p⁄dî
‘oŸ, 
√t
, 
bﬂrd
, 
two
, 
p⁄dî_∂ayî
, 
˝u˘
);

839 
ﬁd_p⁄dî
 = 
p⁄dî_∂ayî
;

840 
p⁄dî_∂ayî
 = 0;

841 
buff
[256];

842 
id
 = 0;

843 
has_id
 = (
	`sˇnf
("%d", &
id
) == 1);

844 
	`sˇnf
("%s", 
buff
);

845 i‡(
	`„of
(
°dö
)) ;

846 
	`Ârötf
(
°dîr
, "%s\n", 
buff
);

847 
ids
[256];

848 
	`•rötf
(
ids
, "%d", 
id
);

850 i‡(!
has_id
Ë
ids
[0] = 0;

851 i‡(!
	`°rcmp
(
buff
, "protocol_version")){

852 
	`¥ötf
("=%†2\n\n", 
ids
);

853 } i‡(!
	`°rcmp
(
buff
, "name")){

854 if(
™⁄
){

855 
	`¥ötf
("=%†ThêFoﬁ!\n\n", 
ids
);

857 
	`¥ötf
("=%†D¨kGo\n\n", 
ids
);

859 } i‡(!
	`°rcmp
(
buff
, "time_settings")){

860 
p⁄dî_∂ayî
 = 
ﬁd_p⁄dî
;

861 
	`sˇnf
("%d %d %d", &
maö_time
, &
byo_yomi_time
, &
byo_yomi_°⁄es
);

862 
	`¥ötf
("=%†\n\n", 
ids
);

863 } i‡(!
	`°rcmp
(
buff
, "time_left")){

864 
p⁄dî_∂ayî
 = 
ﬁd_p⁄dî
;

865 
cﬁ‹
[256];

866 
time
 = 0, 
°⁄es
 = 0;

867 
	`sˇnf
("%†%d %d", 
cﬁ‹
, &
time
, &
°⁄es
);

868 i‡(
cﬁ‹
[0] == 'b' || color[0] == 'B'){

869 
bœck_time_À·
 = 
time
;

870 
bœck_°⁄es_À·
 = 
°⁄es
;

872 
whôe_time_À·
 = 
time
;

873 
whôe_°⁄es_À·
 = 
°⁄es
;

875 
	`¥ötf
("=%†\n\n", 
ids
);

876 } i‡(!
	`°rcmp
(
buff
, "version")){

877 if(
™⁄
){

878 
	`¥ötf
("=%†:-DDDD\n\n", 
ids
);

880 
	`¥ötf
("=%†1.0. W™àm‹êD¨kGo? You c™ föd mê⁄ OGS, u∆imôed games,Çÿwaôög! hâps://⁄löe-go.com/u£r/võw/434218\n\n", 
ids
);

882 } i‡(!
	`°rcmp
(
buff
, "known_command")){

883 
comm
[256];

884 
	`sˇnf
("%s", 
comm
);

885 
known
 = (!
	`°rcmp
(
comm
, "protocol_version") ||

886 !
	`°rcmp
(
comm
, "name") ||

887 !
	`°rcmp
(
comm
, "version") ||

888 !
	`°rcmp
(
comm
, "known_command") ||

889 !
	`°rcmp
(
comm
, "list_commands") ||

890 !
	`°rcmp
(
comm
, "quit") ||

891 !
	`°rcmp
(
comm
, "boardsize") ||

892 !
	`°rcmp
(
comm
, "clear_board") ||

893 !
	`°rcmp
(
comm
, "komi") ||

894 !
	`°rcmp
(
comm
, "final_status_list") ||

895 !
	`°rcmp
(
comm
, "play") ||

896 !
	`°rcmp
(
comm
, "genmove_white") ||

897 !
	`°rcmp
(
comm
, "genmove_black") ||

898 !
	`°rcmp
(
comm
, "fixed_handicap") ||

899 !
	`°rcmp
(
comm
, "genmove"));

900 if(
known
Ë
	`¥ötf
("=%†åue\n\n", 
ids
);

901 
	`¥ötf
("=%†Ál£\n\n", 
ids
);

902 } i‡(!
	`°rcmp
(
buff
, "list_commands")){

903 
	`¥ötf
("=%†¥Ÿocﬁ_vîsi⁄\nshowbﬂrd\¬ame\nvîsi⁄\nknown_comm™d\∆i°_comm™ds\nquô\nbﬂrdsize\n˛ór_bﬂrd\nkomi\≈œy\ngímove_bœck\ngímove_whôe\ngímove\nföÆ_°©us_li°\nfixed_h™diˇp\n\n", 
ids
);

904 } i‡(!
	`°rcmp
(
buff
, "quit")){

906 } i‡(!
	`°rcmp
(
buff
, "boardsize")){

907 
bﬂrdsize
 = 0;

908 
	`sˇnf
("%d", &
bﬂrdsize
);

910 if(
bﬂrdsize
 != 19){

911 
	`¥ötf
("?%†u«c˚±abÀ size\n\n", 
ids
);

913 
roŸ
 = 
	`move_m˘s
(root, -1);

914 
	`mem£t
(
bﬂrd
, 0, 3*19*19*());

915 
	`Êù_bﬂrd
(
bﬂrd
);

916 
move_num
 = 0;

917 
	`¥ötf
("=%†\n\n", 
ids
);

919 } i‡(!
	`°rcmp
(
buff
, "fixed_handicap")){

920 
h™diˇp
 = 0;

921 
	`sˇnf
("%d", &
h™diˇp
);

922 
ödexes
[] = {72, 288, 300, 60, 180, 174, 186, 66, 294};

923 
i
;

924 
i
 = 0; i < 
h™diˇp
; ++i){

925 
bﬂrd
[
ödexes
[
i
]] = 1;

926 ++
move_num
;

928 
roŸ
 = 
	`move_m˘s
(root, -1);

929 } i‡(!
	`°rcmp
(
buff
, "clear_board")){

930 
∑s£d
 = 0;

931 
	`mem£t
(
bﬂrd
, 0, 3*19*19*());

932 
	`Êù_bﬂrd
(
bﬂrd
);

933 
move_num
 = 0;

934 
roŸ
 = 
	`move_m˘s
(root, -1);

935 
	`¥ötf
("=%†\n\n", 
ids
);

936 } i‡(!
	`°rcmp
(
buff
, "komi")){

937 
komi
 = 0;

938 
	`sˇnf
("%f", &
komi
);

939 
	`¥ötf
("=%†\n\n", 
ids
);

940 } i‡(!
	`°rcmp
(
buff
, "showboard")){

941 
	`¥ötf
("=%†\n", 
ids
);

942 
	`¥öt_bﬂrd
(
°dout
, 
bﬂrd
, 1, 0);

943 
	`¥ötf
("\n");

944 } i‡(!
	`°rcmp
(
buff
, "play") || !strcmp(buff, "black") || !strcmp(buff, "white")){

945 ++
move_num
;

946 
cﬁ‹
[256];

947 if(!
	`°rcmp
(
buff
, "play"))

949 
	`sˇnf
("%†", 
cﬁ‹
);

951 
	`sˇnf
(" ");

952 
cﬁ‹
[0] = 
buff
[0];

954 
c
;

955 
r
;

956 
cou¡
 = 
	`sˇnf
("%c%d", &
c
, &
r
);

957 
∂ayî
 = (
cﬁ‹
[0] == 'b' || color[0] == 'B') ? 1 : -1;

958 if((
c
 ='p' || c ='P'Ë&& 
cou¡
 < 2) {

959 
∑s£d
 = 1;

960 
	`¥ötf
("=%†\n\n", 
ids
);

961 *
löe
 = 
	`fgël
(
°dö
);

962 
	`‰ì
(
löe
);

963 
	`fÊush
(
°dout
);

964 
	`fÊush
(
°dîr
);

965 
roŸ
 = 
	`move_m˘s
(root, 19*19);

968 
∑s£d
 = 0;

970 if(
c
 >= 'A' && c <= 'Z') c = c - 'A';

971 if(
c
 >= 'a' && c <= 'z') c = c - 'a';

972 if(
c
 >= 8) --c;

973 
r
 = 19 -Ñ;

974 
	`Ârötf
(
°dîr
, "move: %d %d\n", 
r
, 
c
);

976 *
sw≠
 = 
two
;

977 
two
 = 
⁄e
;

978 
⁄e
 = 
sw≠
;

979 
	`move_go
(
bﬂrd
, 
∂ayî
, 
r
, 
c
);

980 
	`c›y_˝u
(19*19*3, 
bﬂrd
, 1, 
⁄e
, 1);

981 if(
roŸ
Ë
	`Ârötf
(
°dîr
, "Pri‹: %f\n",ÑoŸ->
¥i‹
[
r
*19 + 
c
]);

982 if(
roŸ
Ë
	`Ârötf
(
°dîr
, "Món: %f\n",ÑoŸ->
món
[
r
*19 + 
c
]);

983 if(
roŸ
Ë
	`Ârötf
(
°dîr
, "Resu…: %f\n",ÑoŸ->
ªsu…
);

984 
roŸ
 = 
	`move_m˘s
‘oŸ, 
r
*19 + 
c
);

985 if(
roŸ
Ë
	`Ârötf
(
°dîr
, "Visôed: %d\n",ÑoŸ->
tŸÆ_cou¡
);

986 
	`Ârötf
(
°dîr
, "NOT VISITED\n");

988 
	`¥ötf
("=%†\n\n", 
ids
);

990 } i‡(!
	`°rcmp
(
buff
, "genmove") || !strcmp(buff, "genmove_black") || !strcmp(buff, "genmove_white")){

991 ++
move_num
;

992 
∂ayî
 = 0;

993 if(!
	`°rcmp
(
buff
, "genmove")){

994 
cﬁ‹
[256];

995 
	`sˇnf
("%s", 
cﬁ‹
);

996 
∂ayî
 = (
cﬁ‹
[0] == 'b' || color[0] == 'B') ? 1 : -1;

997 } i‡(!
	`°rcmp
(
buff
, "genmove_black")){

998 
∂ayî
 = 1;

1000 
∂ayî
 = -1;

1002 if(
∂ayî
 > 0){

1003 if(
bœck_time_À·
 <30Ë
£cs
 = 2.5;

1004 
£cs
 = 
‹ig_time
;

1006 if(
whôe_time_À·
 <30Ë
£cs
 = 2.5;

1007 
£cs
 = 
‹ig_time
;

1009 
p⁄dî_∂ayî
 = -
∂ayî
;

1012 
t
 = 
	`wh©_time_is_ô_now
();

1013 
roŸ
 = 
	`run_m˘s
‘oŸ, 
√t
, 
bﬂrd
, 
two
, 
∂ayî
, 
m˘s_ôîs
, 
˝u˘
, 
£cs
);

1014 
	`Ârötf
(
°dîr
, "%‡Sec⁄ds\n", 
	`wh©_time_is_ô_now
(Ë- 
t
);

1015 
move
 
m
 = 
	`pick_move
(
roŸ
, 
ãmp
, 
∂ayî
);

1016 
roŸ
 = 
	`move_m˘s
‘oŸ, 
m
.
row
*19 + m.
cﬁ
);

1019 if(
move_num
 > 
ªsign
 && 
m
.
vÆue
 < .1 && m.
m˘s
 < .1){

1020 
	`¥ötf
("=%†ªsign\n\n", 
ids
);

1021 } if(
m
.
row
 == 19){

1022 
	`¥ötf
("=%†∑ss\n\n", 
ids
);

1023 
∑s£d
 = 0;

1025 
row
 = 
m
.row;

1026 
cﬁ
 = 
m
.col;

1028 *
sw≠
 = 
two
;

1029 
two
 = 
⁄e
;

1030 
⁄e
 = 
sw≠
;

1032 
	`move_go
(
bﬂrd
, 
∂ayî
, 
row
, 
cﬁ
);

1033 
	`c›y_˝u
(19*19*3, 
bﬂrd
, 1, 
⁄e
, 1);

1034 
row
 = 19 -Ñow;

1035 i‡(
cﬁ
 >= 8) ++col;

1036 
	`¥ötf
("=%†%c%d\n\n", 
ids
, 'A' + 
cﬁ
, 
row
);

1039 } i‡(!
	`°rcmp
(
buff
, "p")){

1041 } i‡(!
	`°rcmp
(
buff
, "final_status_list")){

1042 
ty≥
[256];

1043 
	`sˇnf
("%s", 
ty≥
);

1044 
	`Ârötf
(
°dîr
, "final_status\n");

1045 *
löe
 = 
	`fgël
(
°dö
);

1046 
	`‰ì
(
löe
);

1047 if(
ty≥
[0] == 'd' ||Åype[0] == 'D'){

1048 
i
;

1049 
FILE
 *
f
 = 
	`f›í
("game.txt", "w");

1050 
cou¡
 = 
	`¥öt_game
(
bﬂrd
, 
f
);

1051 
	`Ârötf
(
f
, "%†föÆ_°©us_li° dód\n", 
ids
);

1052 
	`f˛o£
(
f
);

1053 
FILE
 *
p
 = 
	`p›í
("./gnugo --mode gtp < game.txt", "r");

1054 
i
 = 0; i < 
cou¡
; ++i){

1055 
	`‰ì
(
	`fgël
(
p
));

1056 
	`‰ì
(
	`fgël
(
p
));

1058 *
l
 = 0;

1059 (
l
 = 
	`fgël
(
p
))){

1060 
	`¥ötf
("%s\n", 
l
);

1061 
	`‰ì
(
l
);

1064 
	`¥ötf
("?%†unknow¿comm™d\n\n", 
ids
);

1066 } i‡(!
	`°rcmp
(
buff
, "kgs-genmove_cleanup")){

1067 
ty≥
[256];

1068 
	`sˇnf
("%s", 
ty≥
);

1069 
	`Ârötf
(
°dîr
, "kgs-genmove_cleanup\n");

1070 *
löe
 = 
	`fgël
(
°dö
);

1071 
	`‰ì
(
löe
);

1072 
i
;

1073 
FILE
 *
f
 = 
	`f›í
("game.txt", "w");

1074 
cou¡
 = 
	`¥öt_game
(
bﬂrd
, 
f
);

1075 
	`Ârötf
(
f
, "%†kgs-gímove_˛ónu∞%s\n", 
ids
, 
ty≥
);

1076 
	`f˛o£
(
f
);

1077 
FILE
 *
p
 = 
	`p›í
("./gnugo --mode gtp < game.txt", "r");

1078 
i
 = 0; i < 
cou¡
; ++i){

1079 
	`‰ì
(
	`fgël
(
p
));

1080 
	`‰ì
(
	`fgël
(
p
));

1082 *
l
 = 0;

1083 (
l
 = 
	`fgël
(
p
))){

1084 
	`¥ötf
("%s\n", 
l
);

1085 
	`‰ì
(
l
);

1088 *
löe
 = 
	`fgël
(
°dö
);

1089 
	`‰ì
(
löe
);

1090 
	`¥ötf
("?%†unknow¿comm™d\n\n", 
ids
);

1092 
	`fÊush
(
°dout
);

1093 
	`fÊush
(
°dîr
);

1095 
	`¥ötf
("%d %d %d\n",
∑s£d
, 
bœck_°⁄es_À·
, 
whôe_°⁄es_À·
);

1096 
	}
}

1098 
	$ã°_go
(*
cfg
, *
weights
, 
mu…i
)

1100 
i
;

1101 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

1102 
	`£t_b©ch_√tw‹k
(
√t
, 1);

1103 
	`§™d
(
	`time
(0));

1104 *
bﬂrd
 = 
	`ˇŒoc
(19*19*3, ());

1105 
	`Êù_bﬂrd
(
bﬂrd
);

1106 *
move
 = 
	`ˇŒoc
(19*19+1, ());

1107 
cﬁ‹
 = 1;

1109 
ªsu…
 = 
	`¥edi˘_move2
(
√t
, 
bﬂrd
, 
move
, 
mu…i
);

1110 
	`¥ötf
("%.2f%% Wö Ch™˚\n", (
ªsu…
+1)/2*100);

1112 
ödexes
[
nöd
];

1113 
row
, 
cﬁ
;

1114 
	`t›_k
(
move
, 19*19+1, 
nöd
, 
ödexes
);

1115 
	`¥öt_bﬂrd
(
°dîr
, 
bﬂrd
, 
cﬁ‹
, 
ödexes
);

1116 
i
 = 0; i < 
nöd
; ++i){

1117 
ödex
 = 
ödexes
[
i
];

1118 
row
 = 
ödex
 / 19;

1119 
cﬁ
 = 
ödex
 % 19;

1120 if(
row
 == 19){

1121 
	`¥ötf
("%d: Pass, %.2f%%\n", 
i
+1, 
move
[
ödex
]*100);

1123 
	`¥ötf
("%d: %¯%d, %.2f%%\n", 
i
+1, 
cﬁ
 + 'A' + 1*(cﬁ > 7 && 
noi
), (
övîãd
)?19 - 
row
 :Ñow+1, 
move
[
ödex
]*100);

1128 if(
cﬁ‹
 =1Ë
	`¥ötf
("X Enter move: ");

1129 
	`¥ötf
("O Enter move: ");

1131 
c
;

1132 *
löe
 = 
	`fgël
(
°dö
);

1133 
picked
 = 1;

1134 
dnum
 = 
	`ssˇnf
(
löe
, "%d", &
picked
);

1135 
˙um
 = 
	`ssˇnf
(
löe
, "%c", &
c
);

1136 i‡(
	`°æí
(
löe
Ë=0 || 
dnum
) {

1137 --
picked
;

1138 i‡(
picked
 < 
nöd
){

1139 
ödex
 = 
ödexes
[
picked
];

1140 
row
 = 
ödex
 / 19;

1141 
cﬁ
 = 
ödex
 % 19;

1142 if(
row
 < 19){

1143 
	`move_go
(
bﬂrd
, 1, 
row
, 
cﬁ
);

1146 } i‡(
˙um
){

1147 i‡(
c
 <= 'T' && c >= 'A'){

1148 
num
 = 
	`ssˇnf
(
löe
, "%¯%d", &
c
, &
row
);

1149 
row
 = (
övîãd
)?19 -Ñow :Ñow-1;

1150 
cﬁ
 = 
c
 - 'A';

1151 i‡(
cﬁ
 > 7 && 
noi
) col -= 1;

1152 i‡(
num
 =2Ë
	`move_go
(
bﬂrd
, 1, 
row
, 
cﬁ
);

1153 } i‡(
c
 == 'p') {

1155 } if(
c
=='b' || c == 'w'){

1156 
g
;

1157 
num
 = 
	`ssˇnf
(
löe
, "%¯%¯%d", &
g
, &
c
, &
row
);

1158 
row
 = (
övîãd
)?19 -Ñow :Ñow-1;

1159 
cﬁ
 = 
c
 - 'A';

1160 i‡(
cﬁ
 > 7 && 
noi
) col -= 1;

1161 i‡(
num
 == 3) {

1162 
mc
 = (
g
 == 'b') ? 1 : -1;

1163 i‡(
mc
 =
cﬁ‹
) {

1164 
bﬂrd
[
row
*19 + 
cﬁ
] = 1;

1166 
bﬂrd
[19*19 + 
row
*19 + 
cﬁ
] = 1;

1169 } if(
c
 == 'c'){

1170 
g
;

1171 
num
 = 
	`ssˇnf
(
löe
, "%¯%¯%d", &
g
, &
c
, &
row
);

1172 
row
 = (
övîãd
)?19 -Ñow :Ñow-1;

1173 
cﬁ
 = 
c
 - 'A';

1174 i‡(
cﬁ
 > 7 && 
noi
) col -= 1;

1175 i‡(
num
 == 3) {

1176 
bﬂrd
[
row
*19 + 
cﬁ
] = 0;

1177 
bﬂrd
[19*19 + 
row
*19 + 
cﬁ
] = 0;

1181 
	`‰ì
(
löe
);

1182 
	`Êù_bﬂrd
(
bﬂrd
);

1183 
cﬁ‹
 = -color;

1185 
	}
}

1187 
	$sc‹e_game
(*
bﬂrd
)

1189 
i
;

1190 
FILE
 *
f
 = 
	`f›í
("game.txt", "w");

1191 
cou¡
 = 
	`¥öt_game
(
bﬂrd
, 
f
);

1192 
	`Ârötf
(
f
, "final_score\n");

1193 
	`f˛o£
(
f
);

1194 
FILE
 *
p
 = 
	`p›í
("./gnugo --mode gtp < game.txt", "r");

1195 
i
 = 0; i < 
cou¡
; ++i){

1196 
	`‰ì
(
	`fgël
(
p
));

1197 
	`‰ì
(
	`fgël
(
p
));

1199 *
l
 = 0;

1200 
sc‹e
 = 0;

1201 
∂ayî
 = 0;

1202 (
l
 = 
	`fgël
(
p
))){

1203 
	`Ârötf
(
°dîr
, "%† \t", 
l
);

1204 
n
 = 
	`ssˇnf
(
l
, "%c+%f", &
∂ayî
, &
sc‹e
);

1205 
	`‰ì
(
l
);

1206 i‡(
n
 == 2) ;

1208 if(
∂ayî
 ='W'Ë
sc‹e
 = -score;

1209 
	`p˛o£
(
p
);

1210  
sc‹e
;

1211 
	}
}

1213 
	$£lf_go
(*
fûíame
, *
weightfûe
, *
f2
, *
w2
, 
mu…i
)

1215 
m˘s_åì
 *
åì1
 = 0;

1216 
m˘s_åì
 *
åì2
 = 0;

1217 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
fûíame
, 
weightfûe
, 0);

1220 
√tw‹k
 *
√t2
;

1221 i‡(
f2
) {

1222 
√t2
 = 
	`∑r£_√tw‹k_cfg
(
f2
);

1223 if(
w2
){

1224 
	`lﬂd_weights
(
√t2
, 
w2
);

1227 
√t2
 = 
	`ˇŒoc
(1, (
√tw‹k
));

1228 *
√t2
 = *
√t
;

1230 
	`§™d
(
	`time
(0));

1231 
bﬂrds
[600][93];

1232 
cou¡
 = 0;

1235 *
bﬂrd
 = 
	`ˇŒoc
(19*19*3, ());

1236 
	`Êù_bﬂrd
(
bﬂrd
);

1237 *
⁄e
 = 
	`ˇŒoc
(19*19*3, ());

1238 *
two
 = 
	`ˇŒoc
(19*19*3, ());

1239 
d⁄e
 = 0;

1240 
∂ayî
 = 1;

1241 
p1
 = 0;

1242 
p2
 = 0;

1243 
tŸÆ
 = 0;

1244 
ãmp
 = .1;

1245 
m˘s_ôîs
 = 500;

1246 
˝u˘
 = 5;

1248 i‡(
d⁄e
){

1249 
åì1
 = 
	`move_m˘s
(tree1, -1);

1250 
åì2
 = 
	`move_m˘s
(tree2, -1);

1251 
sc‹e
 = 
	`sc‹e_game
(
bﬂrd
);

1252 if((
sc‹e
 > 0Ë=(
tŸÆ
%2==0)Ë++
p1
;

1253 ++
p2
;

1254 ++
tŸÆ
;

1255 
	`Ârötf
(
°dîr
, "TŸÆ: %d, Pœyî 1: %f, Pœyî 2: %f\n", 
tŸÆ
, ()
p1
/tŸÆ, ()
p2
/total);

1256 
	`¶ìp
(1);

1267 
	`mem£t
(
bﬂrd
, 0, 3*19*19*());

1268 
	`Êù_bﬂrd
(
bﬂrd
);

1269 
∂ayî
 = 1;

1270 
d⁄e
 = 0;

1271 
cou¡
 = 0;

1272 
	`fÊush
(
°dout
);

1273 
	`fÊush
(
°dîr
);

1278 i‡((
tŸÆ
%2==0Ë=(
∂ayî
==1)){

1280 
˝u˘
 = 5;

1283 
˝u˘
 = 1;

1285 
√tw‹k
 *
u£
 = ((
tŸÆ
%2==0Ë=(
∂ayî
==1)Ë? 
√t
 : 
√t2
;

1286 
m˘s_åì
 *
t
 = ((
tŸÆ
%2==0Ë=(
∂ayî
==1)Ë? 
åì1
 : 
åì2
;

1287 
t
 = 
	`run_m˘s
—, 
u£
, 
bﬂrd
, 
two
, 
∂ayî
, 
m˘s_ôîs
, 
˝u˘
, 0);

1288 
move
 
m
 = 
	`pick_move
(
t
, 
ãmp
, 
∂ayî
);

1289 if(((
tŸÆ
%2==0Ë=(
∂ayî
==1))Ë
åì1
 = 
t
;

1290 
åì2
 = 
t
;

1292 
åì1
 = 
	`move_m˘s
—ªe1, 
m
.
row
*19 + m.
cﬁ
);

1293 
åì2
 = 
	`move_m˘s
—ªe2, 
m
.
row
*19 + m.
cﬁ
);

1295 if(
m
.
row
 == 19){

1296 
d⁄e
 = 1;

1299 
row
 = 
m
.row;

1300 
cﬁ
 = 
m
.col;

1302 *
sw≠
 = 
two
;

1303 
two
 = 
⁄e
;

1304 
⁄e
 = 
sw≠
;

1306 if(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

1307 
bﬂrds
[
cou¡
][0] = 
row
;

1308 
bﬂrds
[
cou¡
][1] = 
cﬁ
;

1309 
	`bﬂrd_to_°rög
(
bﬂrds
[
cou¡
] + 2, 
bﬂrd
);

1310 if(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

1311 ++
cou¡
;

1313 
	`move_go
(
bﬂrd
, 
∂ayî
, 
row
, 
cﬁ
);

1314 
	`c›y_˝u
(19*19*3, 
bﬂrd
, 1, 
⁄e
, 1);

1316 
∂ayî
 = -player;

1318 
	}
}

1320 
	$run_go
(
¨gc
, **
¨gv
)

1323 if(
¨gc
 < 4){

1324 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

1328 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

1329 *
gpus
 = 0;

1330 
gpu
 = 0;

1331 
ngpus
 = 0;

1332 if(
gpu_li°
){

1333 
	`¥ötf
("%s\n", 
gpu_li°
);

1334 
Àn
 = 
	`°æí
(
gpu_li°
);

1335 
ngpus
 = 1;

1336 
i
;

1337 
i
 = 0; i < 
Àn
; ++i){

1338 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

1340 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

1341 
i
 = 0; i < 
ngpus
; ++i){

1342 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

1343 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

1346 
gpu
 = 
gpu_ödex
;

1347 
gpus
 = &
gpu
;

1348 
ngpus
 = 1;

1350 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

1352 *
cfg
 = 
¨gv
[3];

1353 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

1354 *
c2
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

1355 *
w2
 = (
¨gc
 > 6Ë? 
¨gv
[6] : 0;

1356 
mu…i
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-multi");

1357 
™⁄
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-anon");

1358 
ôîs
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-iters", 500);

1359 
ªsign
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-resign", 175);

1360 
˝u˘
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-cpuct", 5);

1361 
ãmp
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-temp", .1);

1362 
time
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-time", 0);

1363 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_go
(
cfg
, 
weights
, 
c2
, 
gpus
, 
ngpus
, 
˛ór
);

1364 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid_go
(
cfg
, 
weights
, 
mu…i
, 
c2
);

1365 if(0==
	`°rcmp
(
¨gv
[2], "£lf")Ë
	`£lf_go
(
cfg
, 
weights
, 
c2
, 
w2
, 
mu…i
);

1366 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_go
(
cfg
, 
weights
, 
mu…i
);

1367 if(0==
	`°rcmp
(
¨gv
[2], "ígöe")Ë
	`ígöe_go
(
cfg
, 
weights
, 
ôîs
, 
time
, 
ãmp
, 
˝u˘
, 
™⁄
, 
ªsign
);

1368 
	}
}

	@lsd.c

1 
	~<m©h.h
>

2 
	~"d¨k√t.h
"

387 
	$¶îp
(*
°¨t
, *
íd
, 
s
, 
n
, *
out
)

389 
omega
 = 
	`acos
(
	`dŸ_˝u
(
n
, 
°¨t
, 1, 
íd
, 1));

390 
so
 = 
	`sö
(
omega
);

391 
	`fûl_˝u
(
n
, 0, 
out
, 1);

392 
	`axpy_˝u
(
n
, 
	`sö
((1-
s
)*
omega
)/
so
, 
°¨t
, 1, 
out
, 1);

393 
	`axpy_˝u
(
n
, 
	`sö
(
s
*
omega
)/
so
, 
íd
, 1, 
out
, 1);

395 
mag
 = 
	`mag_¨øy
(
out
, 
n
);

396 
	`sˇÀ_¨øy
(
out
, 
n
, 1./
mag
);

397 
	}
}

399 
image
 
	$øndom_unô_ve˘‹_image
(
w
, 
h
, 
c
)

401 
image
 
im
 = 
	`make_image
(
w
, 
h
, 
c
);

402 
i
;

403 
i
 = 0; i < 
im
.
w
*im.
h
*im.
c
; ++i){

404 
im
.
d©a
[
i
] = 
	`ønd_n‹mÆ
();

406 
mag
 = 
	`mag_¨øy
(
im
.
d©a
, im.
w
*im.
h
*im.
c
);

407 
	`sˇÀ_¨øy
(
im
.
d©a
, im.
w
*im.
h
*im.
c
, 1./
mag
);

408  
im
;

409 
	}
}

411 
	$öãr_dcg™
(*
cfgfûe
, *
weightfûe
)

413 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

414 
	`£t_b©ch_√tw‹k
(
√t
, 1);

415 
	`§™d
(2222222);

417 
˛ock_t
 
time
;

418 
buff
[256];

419 *
öput
 = 
buff
;

420 
i
, 
imœyî
 = 0;

422 
i
 = 0; i < 
√t
->
n
; ++i) {

423 i‡(
√t
->
œyîs
[
i
].
out_c
 == 3) {

424 
imœyî
 = 
i
;

425 
	`¥ötf
("%d\n", 
i
);

429 
image
 
°¨t
 = 
	`øndom_unô_ve˘‹_image
(
√t
->
w
,Çë->
h
,Çë->
c
);

430 
image
 
íd
 = 
	`øndom_unô_ve˘‹_image
(
√t
->
w
,Çë->
h
,Çë->
c
);

431 
image
 
im
 = 
	`make_image
(
√t
->
w
,Çë->
h
,Çë->
c
);

432 
image
 
‹ig
 = 
	`c›y_image
(
°¨t
);

434 
c
 = 0;

435 
cou¡
 = 0;

436 
max_cou¡
 = 15;

438 ++
c
;

440 if(
cou¡
 =
max_cou¡
){

441 
cou¡
 = 0;

442 
	`‰ì_image
(
°¨t
);

443 
°¨t
 = 
íd
;

444 
íd
 = 
	`øndom_unô_ve˘‹_image
(
√t
->
w
,Çë->
h
,Çë->
c
);

445 if(
c
 > 300){

446 
íd
 = 
‹ig
;

448 if(
c
>300 + 
max_cou¡
) ;

450 ++
cou¡
;

452 
	`¶îp
(
°¨t
.
d©a
, 
íd
.d©a, ()
cou¡
 / 
max_cou¡
, 
im
.
w
*im.
h
*im.
c
, im.data);

454 *
X
 = 
im
.
d©a
;

455 
time
=
	`˛ock
();

456 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

457 
image
 
out
 = 
	`gë_√tw‹k_image_œyî
(
√t
, 
imœyî
);

459 
	`n‹mÆize_image
(
out
);

460 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

462 
	`•rötf
(
buff
, "out%05d", 
c
);

463 
	`show_image
(
out
, "out");

464 
	`ßve_image
(
out
, "out");

465 
	`ßve_image
(
out
, 
buff
);

466 #ifde‡
OPENCV


471 
	}
}

473 
	$ã°_dcg™
(*
cfgfûe
, *
weightfûe
)

475 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

476 
	`£t_b©ch_√tw‹k
(
√t
, 1);

477 
	`§™d
(2222222);

479 
˛ock_t
 
time
;

480 
buff
[256];

481 *
öput
 = 
buff
;

482 
imœyî
 = 0;

484 
imœyî
 = 
√t
->
n
-1;

487 
image
 
im
 = 
	`make_image
(
√t
->
w
,Çë->
h
,Çë->
c
);

488 
i
;

489 
i
 = 0; i < 
im
.
w
*im.
h
*im.
c
; ++i){

490 
im
.
d©a
[
i
] = 
	`ønd_n‹mÆ
();

495 *
X
 = 
im
.
d©a
;

496 
time
=
	`˛ock
();

497 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

498 
image
 
out
 = 
	`gë_√tw‹k_image_œyî
(
√t
, 
imœyî
);

500 
	`n‹mÆize_image
(
out
);

501 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

502 
	`show_image
(
out
, "out");

503 
	`ßve_image
(
out
, "out");

504 #ifde‡
OPENCV


505 
	`cvWaôKey
(0);

508 
	`‰ì_image
(
im
);

510 
	}
}

512 
	$£t_√tw‹k_Æpha_bëa
(
√tw‹k
 *
√t
, 
Æpha
, 
bëa
)

514 
i
;

515 
i
 = 0; i < 
√t
->
n
; ++i){

516 if(
√t
->
œyîs
[
i
].
ty≥
 =
SHORTCUT
){

517 
√t
->
œyîs
[
i
].
Æpha
 =álpha;

518 
√t
->
œyîs
[
i
].
bëa
 = beta;

521 
	}
}

523 
	$åaö_¥og
(*
cfg
, *
weight
, *
acfg
, *
aweight
, 
˛ór
, 
di•œy
, *
åaö_images
, 
maxb©ch
)

525 #ifde‡
GPU


526 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

527 
	`§™d
(
	`time
(0));

528 *
ba£
 = 
	`ba£cfg
(
cfg
);

529 *
aba£
 = 
	`ba£cfg
(
acfg
);

530 
	`¥ötf
("%s\n", 
ba£
);

531 
√tw‹k
 *
g√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weight
, 
˛ór
);

532 
√tw‹k
 *
™ë
 = 
	`lﬂd_√tw‹k
(
acfg
, 
aweight
, 
˛ór
);

534 
i
, 
j
, 
k
;

535 
œyî
 
imœyî
 = 
g√t
->
œyîs
[g√t->
n
-1];

537 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
g√t
->
À¨nög_øã
, g√t->
momítum
, g√t->
deˇy
);

538 
imgs
 = 
g√t
->
b©ch
*g√t->
subdivisi⁄s
;

539 
i
 = *
g√t
->
£í
/
imgs
;

540 
d©a
 
åaö
, 
buf„r
;

543 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

544 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

546 
lﬂd_¨gs
 
¨gs

	`gë_ba£_¨gs
(
™ë
);

547 
¨gs
.
∑ths
 =Öaths;

548 
¨gs
.
n
 = 
imgs
;

549 
¨gs
.
m
 = 
∂i°
->
size
;

550 
¨gs
.
d
 = &
buf„r
;

551 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

552 
¨gs
.
thªads
=16;

553 
¨gs
.
˛as£s
 = 1;

554 *
ls
[2] = {"imagenet", "zzzzzzzz"};

555 
¨gs
.
œbñs
 = 
ls
;

557 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

558 
˛ock_t
 
time
;

560 
g√t
->
åaö
 = 1;

561 
™ë
->
åaö
 = 1;

563 
x_size
 = 
g√t
->
öputs
*g√t->
b©ch
;

564 
y_size
 = 
g√t
->
åuths
*g√t->
b©ch
;

565 *
imîr‹
 = 
	`cuda_make_¨øy
(0, 
y_size
);

567 
Æoss_avg
 = -1;

569 i‡(
maxb©ch
 =0Ëmaxb©ch = 
g√t
->
max_b©ches
;

570 
	`gë_cuºít_b©ch
(
g√t
Ë< 
maxb©ch
) {

572 
cb
 = 
	`gë_cuºít_b©ch
(
g√t
);

573 
Æpha
 = (Ë
cb
 / (
maxb©ch
/2);

574 if(
Æpha
 > 1)álpha = 1;

575 
bëa
 = 1 - 
Æpha
;

576 
	`¥ötf
("%‡%f\n", 
Æpha
, 
bëa
);

577 
	`£t_√tw‹k_Æpha_bëa
(
g√t
, 
Æpha
, 
bëa
);

578 
	`£t_√tw‹k_Æpha_bëa
(
™ë
, 
bëa
, 
Æpha
);

581 
i
 += 1;

582 
time
=
	`˛ock
();

583 
	`±hªad_joö
(
lﬂd_thªad
, 0);

584 
åaö
 = 
buf„r
;

586 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

588 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

590 
d©a
 
gí
 = 
	`c›y_d©a
(
åaö
);

591 
j
 = 0; j < 
imgs
; ++j) {

592 
åaö
.
y
.
vÆs
[
j
][0] = 1;

593 
gí
.
y
.
vÆs
[
j
][0] = 0;

595 
time
=
	`˛ock
();

597 
j
 = 0; j < 
g√t
->
subdivisi⁄s
; ++j) {

598 
	`gë_√xt_b©ch
(
åaö
, 
g√t
->
b©ch
, 
j
*g√t->b©ch, g√t->
åuth
, 0);

599 
z
;

600 
z
 = 0; z < 
x_size
; ++z){

601 
g√t
->
öput
[
z
] = 
	`ønd_n‹mÆ
();

609 *
g√t
->
£í
 +g√t->
b©ch
;

610 
	`f‹w¨d_√tw‹k
(
g√t
);

612 
	`fûl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
imîr‹
, 1);

613 
	`fûl_˝u
(
™ë
->
åuths
*™ë->
b©ch
, 1,á√t->
åuth
, 1);

614 
	`c›y_˝u
(
™ë
->
öputs
*™ë->
b©ch
, 
imœyî
.
ouçut
, 1,á√t->
öput
, 1);

615 
™ë
->
dñè_gpu
 = 
imîr‹
;

616 
	`f‹w¨d_√tw‹k
(
™ë
);

617 
	`backw¨d_√tw‹k
(
™ë
);

621 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1);

622 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
g√t
->
œyîs
[g√t->
n
-1].
dñè_gpu
, 1);

624 
	`axpy_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1, 
g√t
->
œyîs
[g√t->
n
-1].
dñè_gpu
, 1);

626 
	`backw¨d_√tw‹k
(
g√t
);

628 
k
 = 0; k < 
g√t
->
b©ch
; ++k){

629 
ödex
 = 
j
*
g√t
->
b©ch
 + 
k
;

630 
	`c›y_˝u
(
g√t
->
ouçuts
, g√t->
ouçut
 + 
k
*g√t->ouçuts, 1, 
gí
.
X
.
vÆs
[
ödex
], 1);

633 
	`h¨mÀss_upd©e_√tw‹k_gpu
(
™ë
);

635 
d©a
 
mîge
 = 
	`c⁄ˇt_d©a
(
åaö
, 
gí
);

636 
Æoss
 = 
	`åaö_√tw‹k
(
™ë
, 
mîge
);

638 #ifde‡
OPENCV


639 if(
di•œy
){

640 
image
 
im
 = 
	`Êﬂt_to_image
(
™ë
->
w
,á√t->
h
,á√t->
c
, 
gí
.
X
.
vÆs
[0]);

641 
image
 
im2
 = 
	`Êﬂt_to_image
(
™ë
->
w
,á√t->
h
,á√t->
c
, 
åaö
.
X
.
vÆs
[0]);

642 
	`show_image
(
im
, "gen");

643 
	`show_image
(
im2
, "train");

644 
	`ßve_image
(
im
, "gen");

645 
	`ßve_image
(
im2
, "train");

646 
	`cvWaôKey
(1);

650 
	`upd©e_√tw‹k_gpu
(
g√t
);

652 
	`‰ì_d©a
(
mîge
);

653 
	`‰ì_d©a
(
åaö
);

654 
	`‰ì_d©a
(
gí
);

655 i‡(
Æoss_avg
 < 0ËÆoss_avg = 
Æoss
;

656 
Æoss_avg
 =áloss_avg*.9 + 
Æoss
*.1;

658 
	`¥ötf
("%d:ádv: %‡|ádv_avg: %f, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
Æoss
, 
Æoss_avg
, 
	`gë_cuºít_øã
(
g√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

659 if(
i
%10000==0){

660 
buff
[256];

661 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

662 
	`ßve_weights
(
g√t
, 
buff
);

663 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
aba£
, 
i
);

664 
	`ßve_weights
(
™ë
, 
buff
);

666 if(
i
%1000==0){

667 
buff
[256];

668 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

669 
	`ßve_weights
(
g√t
, 
buff
);

670 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
aba£
);

671 
	`ßve_weights
(
™ë
, 
buff
);

674 
buff
[256];

675 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

676 
	`ßve_weights
(
g√t
, 
buff
);

678 
	}
}

680 
	$åaö_dcg™
(*
cfg
, *
weight
, *
acfg
, *
aweight
, 
˛ór
, 
di•œy
, *
åaö_images
, 
maxb©ch
)

682 #ifde‡
GPU


683 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

684 
	`§™d
(
	`time
(0));

685 *
ba£
 = 
	`ba£cfg
(
cfg
);

686 *
aba£
 = 
	`ba£cfg
(
acfg
);

687 
	`¥ötf
("%s\n", 
ba£
);

688 
√tw‹k
 *
g√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weight
, 
˛ór
);

689 
√tw‹k
 *
™ë
 = 
	`lﬂd_√tw‹k
(
acfg
, 
aweight
, 
˛ór
);

692 
i
, 
j
, 
k
;

693 
œyî
 
imœyî
 = {0};

694 
i
 = 0; i < 
g√t
->
n
; ++i) {

695 i‡(
g√t
->
œyîs
[
i
].
out_c
 == 3) {

696 
imœyî
 = 
g√t
->
œyîs
[
i
];

701 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
g√t
->
À¨nög_øã
, g√t->
momítum
, g√t->
deˇy
);

702 
imgs
 = 
g√t
->
b©ch
*g√t->
subdivisi⁄s
;

703 
i
 = *
g√t
->
£í
/
imgs
;

704 
d©a
 
åaö
, 
buf„r
;

707 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

709 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

711 
lﬂd_¨gs
 
¨gs

	`gë_ba£_¨gs
(
™ë
);

712 
¨gs
.
∑ths
 =Öaths;

713 
¨gs
.
n
 = 
imgs
;

714 
¨gs
.
m
 = 
∂i°
->
size
;

715 
¨gs
.
d
 = &
buf„r
;

716 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

717 
¨gs
.
thªads
=16;

718 
¨gs
.
˛as£s
 = 1;

719 *
ls
[2] = {"imagenet", "zzzzzzzz"};

720 
¨gs
.
œbñs
 = 
ls
;

722 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

723 
˛ock_t
 
time
;

725 
g√t
->
åaö
 = 1;

726 
™ë
->
åaö
 = 1;

728 
x_size
 = 
g√t
->
öputs
*g√t->
b©ch
;

729 
y_size
 = 
g√t
->
åuths
*g√t->
b©ch
;

730 *
imîr‹
 = 
	`cuda_make_¨øy
(0, 
y_size
);

734 
Æoss_avg
 = -1;

738 i‡(
maxb©ch
 =0Ëmaxb©ch = 
g√t
->
max_b©ches
;

739 
	`gë_cuºít_b©ch
(
g√t
Ë< 
maxb©ch
) {

740 
i
 += 1;

741 
time
=
	`˛ock
();

742 
	`±hªad_joö
(
lﬂd_thªad
, 0);

743 
åaö
 = 
buf„r
;

748 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

750 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

752 
d©a
 
gí
 = 
	`c›y_d©a
(
åaö
);

753 
j
 = 0; j < 
imgs
; ++j) {

754 
åaö
.
y
.
vÆs
[
j
][0] = 1;

755 
gí
.
y
.
vÆs
[
j
][0] = 0;

757 
time
=
	`˛ock
();

759 
j
 = 0; j < 
g√t
->
subdivisi⁄s
; ++j){

760 
	`gë_√xt_b©ch
(
åaö
, 
g√t
->
b©ch
, 
j
*g√t->b©ch, g√t->
åuth
, 0);

761 
z
;

762 
z
 = 0; z < 
x_size
; ++z){

763 
g√t
->
öput
[
z
] = 
	`ønd_n‹mÆ
();

765 
z
 = 0; z < 
g√t
->
b©ch
; ++z){

766 
mag
 = 
	`mag_¨øy
(
g√t
->
öput
 + 
z
*g√t->
öputs
, gnet->inputs);

767 
	`sˇÀ_¨øy
(
g√t
->
öput
 + 
z
*g√t->
öputs
, g√t->öputs, 1./
mag
);

779 *
g√t
->
£í
 +g√t->
b©ch
;

780 
	`f‹w¨d_√tw‹k
(
g√t
);

782 
	`fûl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
imîr‹
, 1);

783 
	`fûl_˝u
(
™ë
->
åuths
*™ë->
b©ch
, 1,á√t->
åuth
, 1);

784 
	`c›y_˝u
(
™ë
->
öputs
*™ë->
b©ch
, 
imœyî
.
ouçut
, 1,á√t->
öput
, 1);

785 
™ë
->
dñè_gpu
 = 
imîr‹
;

786 
	`f‹w¨d_√tw‹k
(
™ë
);

787 
	`backw¨d_√tw‹k
(
™ë
);

792 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1);

793 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
g√t
->
œyîs
[g√t->
n
-1].
dñè_gpu
, 1);

798 
	`axpy_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1, 
g√t
->
œyîs
[g√t->
n
-1].
dñè_gpu
, 1);

800 
	`backw¨d_√tw‹k
(
g√t
);

810 
k
 = 0; k < 
g√t
->
b©ch
; ++k){

811 
ödex
 = 
j
*
g√t
->
b©ch
 + 
k
;

812 
	`c›y_˝u
(
g√t
->
ouçuts
, g√t->
ouçut
 + 
k
*g√t->ouçuts, 1, 
gí
.
X
.
vÆs
[
ödex
], 1);

815 
	`h¨mÀss_upd©e_√tw‹k_gpu
(
™ë
);

817 
d©a
 
mîge
 = 
	`c⁄ˇt_d©a
(
åaö
, 
gí
);

819 
Æoss
 = 
	`åaö_√tw‹k
(
™ë
, 
mîge
);

825 #ifde‡
OPENCV


826 if(
di•œy
){

827 
image
 
im
 = 
	`Êﬂt_to_image
(
™ë
->
w
,á√t->
h
,á√t->
c
, 
gí
.
X
.
vÆs
[0]);

828 
image
 
im2
 = 
	`Êﬂt_to_image
(
™ë
->
w
,á√t->
h
,á√t->
c
, 
åaö
.
X
.
vÆs
[0]);

829 
	`show_image
(
im
, "gen");

830 
	`show_image
(
im2
, "train");

831 
	`ßve_image
(
im
, "gen");

832 
	`ßve_image
(
im2
, "train");

833 
	`cvWaôKey
(1);

845 
	`upd©e_√tw‹k_gpu
(
g√t
);

847 
	`‰ì_d©a
(
mîge
);

848 
	`‰ì_d©a
(
åaö
);

849 
	`‰ì_d©a
(
gí
);

850 i‡(
Æoss_avg
 < 0ËÆoss_avg = 
Æoss
;

851 
Æoss_avg
 =áloss_avg*.9 + 
Æoss
*.1;

853 
	`¥ötf
("%d:ádv: %‡|ádv_avg: %f, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
Æoss
, 
Æoss_avg
, 
	`gë_cuºít_øã
(
g√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

854 if(
i
%10000==0){

855 
buff
[256];

856 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

857 
	`ßve_weights
(
g√t
, 
buff
);

858 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
aba£
, 
i
);

859 
	`ßve_weights
(
™ë
, 
buff
);

861 if(
i
%1000==0){

862 
buff
[256];

863 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

864 
	`ßve_weights
(
g√t
, 
buff
);

865 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
aba£
);

866 
	`ßve_weights
(
™ë
, 
buff
);

869 
buff
[256];

870 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

871 
	`ßve_weights
(
g√t
, 
buff
);

873 
	}
}

875 
	$åaö_cﬁ‹izî
(*
cfg
, *
weight
, *
acfg
, *
aweight
, 
˛ór
, 
di•œy
)

877 #ifde‡
GPU


880 *
åaö_images
 = "/home/pjreddie/data/imagenet/imagenet1k.train.list";

881 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

882 
	`§™d
(
	`time
(0));

883 *
ba£
 = 
	`ba£cfg
(
cfg
);

884 *
aba£
 = 
	`ba£cfg
(
acfg
);

885 
	`¥ötf
("%s\n", 
ba£
);

886 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weight
, 
˛ór
);

887 
√tw‹k
 *
™ë
 = 
	`lﬂd_√tw‹k
(
acfg
, 
aweight
, 
˛ór
);

889 
i
, 
j
, 
k
;

890 
œyî
 
imœyî
 = {0};

891 
i
 = 0; i < 
√t
->
n
; ++i) {

892 i‡(
√t
->
œyîs
[
i
].
out_c
 == 3) {

893 
imœyî
 = 
√t
->
œyîs
[
i
];

898 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

899 
imgs
 = 
√t
->
b©ch
*√t->
subdivisi⁄s
;

900 
i
 = *
√t
->
£í
/
imgs
;

901 
d©a
 
åaö
, 
buf„r
;

904 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

906 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

908 
lﬂd_¨gs
 
¨gs

	`gë_ba£_¨gs
(
√t
);

909 
¨gs
.
∑ths
 =Öaths;

910 
¨gs
.
n
 = 
imgs
;

911 
¨gs
.
m
 = 
∂i°
->
size
;

912 
¨gs
.
d
 = &
buf„r
;

914 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

915 
¨gs
.
˛as£s
 = 1;

916 *
ls
[2] = {"imagenet"};

917 
¨gs
.
œbñs
 = 
ls
;

919 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

920 
˛ock_t
 
time
;

922 
x_size
 = 
√t
->
öputs
*√t->
b©ch
;

924 
√t
->
dñè
 = 0;

925 
√t
->
åaö
 = 1;

926 *
pixs
 = 
	`ˇŒoc
(
x_size
, ());

927 *
gøypixs
 = 
	`ˇŒoc
(
x_size
, ());

931 
™ë
->
dñè
 = 0;

932 
™ë
->
åaö
 = 1;

934 *
imîr‹
 = 
	`cuda_make_¨øy
(0, 
imœyî
.
ouçuts
*imœyî.
b©ch
);

936 
Æoss_avg
 = -1;

937 
gloss_avg
 = -1;

941 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
) {

942 
i
 += 1;

943 
time
=
	`˛ock
();

944 
	`±hªad_joö
(
lﬂd_thªad
, 0);

945 
åaö
 = 
buf„r
;

946 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

948 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

950 
d©a
 
gøy
 = 
	`c›y_d©a
(
åaö
);

951 
j
 = 0; j < 
imgs
; ++j){

952 
image
 
gim
 = 
	`Êﬂt_to_image
(
√t
->
w
,Çë->
h
,Çë->
c
, 
gøy
.
X
.
vÆs
[
j
]);

953 
	`gøysˇÀ_image_3c
(
gim
);

954 
åaö
.
y
.
vÆs
[
j
][0] = .95;

955 
gøy
.
y
.
vÆs
[
j
][0] = .05;

957 
time
=
	`˛ock
();

958 
gloss
 = 0;

960 
j
 = 0; j < 
√t
->
subdivisi⁄s
; ++j){

961 
	`gë_√xt_b©ch
(
åaö
, 
√t
->
b©ch
, 
j
*√t->b©ch, 
pixs
, 0);

962 
	`gë_√xt_b©ch
(
gøy
, 
√t
->
b©ch
, 
j
*√t->b©ch, 
gøypixs
, 0);

963 
	`cuda_push_¨øy
(
√t
->
öput_gpu
, 
gøypixs
,Çë->
öputs
*√t->
b©ch
);

964 
	`cuda_push_¨øy
(
√t
->
åuth_gpu
, 
pixs
,Çë->
åuths
*√t->
b©ch
);

972 *
√t
->
£í
 +√t->
b©ch
;

973 
	`f‹w¨d_√tw‹k_gpu
(
√t
);

975 
	`fûl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
imîr‹
, 1);

976 
	`c›y_gpu
(
™ë
->
öputs
*™ë->
b©ch
, 
imœyî
.
ouçut_gpu
, 1,á√t->
öput_gpu
, 1);

977 
	`fûl_gpu
(
™ë
->
öputs
*™ë->
b©ch
, .95,á√t->
åuth_gpu
, 1);

978 
™ë
->
dñè_gpu
 = 
imîr‹
;

979 
	`f‹w¨d_√tw‹k_gpu
(
™ë
);

980 
	`backw¨d_√tw‹k_gpu
(
™ë
);

982 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1./100., 
√t
->
œyîs
[√t->
n
-1].
dñè_gpu
, 1);

984 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1);

986 
	`¥ötf
("ªÆ√s†%f\n", 
	`cuda_mag_¨øy
(
imîr‹
, 
imœyî
.
ouçuts
*imœyî.
b©ch
));

987 
	`¥ötf
("„©uª†%f\n", 
	`cuda_mag_¨øy
(
√t
->
œyîs
[√t->
n
-1].
dñè_gpu
, 
imœyî
.
ouçuts
*imœyî.
b©ch
));

989 
	`axpy_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1, 
√t
->
œyîs
[√t->
n
-1].
dñè_gpu
, 1);

991 
	`backw¨d_√tw‹k_gpu
(
√t
);

994 
gloss
 +*
√t
->
co°
 /“ë->
subdivisi⁄s
*√t->
b©ch
);

996 
k
 = 0; k < 
√t
->
b©ch
; ++k){

997 
ödex
 = 
j
*
√t
->
b©ch
 + 
k
;

998 
	`c›y_˝u
(
imœyî
.
ouçuts
, imœyî.
ouçut
 + 
k
*imœyî.ouçuts, 1, 
gøy
.
X
.
vÆs
[
ödex
], 1);

1001 
	`h¨mÀss_upd©e_√tw‹k_gpu
(
™ë
);

1003 
d©a
 
mîge
 = 
	`c⁄ˇt_d©a
(
åaö
, 
gøy
);

1005 
Æoss
 = 
	`åaö_√tw‹k
(
™ë
, 
mîge
);

1007 
	`upd©e_√tw‹k_gpu
(
√t
);

1009 #ifde‡
OPENCV


1010 if(
di•œy
){

1011 
image
 
im
 = 
	`Êﬂt_to_image
(
™ë
->
w
,á√t->
h
,á√t->
c
, 
gøy
.
X
.
vÆs
[0]);

1012 
image
 
im2
 = 
	`Êﬂt_to_image
(
™ë
->
w
,á√t->
h
,á√t->
c
, 
åaö
.
X
.
vÆs
[0]);

1013 
	`show_image
(
im
, "gen");

1014 
	`show_image
(
im2
, "train");

1015 
	`cvWaôKey
(1);

1018 
	`‰ì_d©a
(
mîge
);

1019 
	`‰ì_d©a
(
åaö
);

1020 
	`‰ì_d©a
(
gøy
);

1021 i‡(
Æoss_avg
 < 0ËÆoss_avg = 
Æoss
;

1022 
Æoss_avg
 =áloss_avg*.9 + 
Æoss
*.1;

1023 
gloss_avg
 = gloss_avg*.9 + 
gloss
*.1;

1025 
	`¥ötf
("%d: gí: %f,ádv: %‡| gí_avg: %f,ádv_avg: %f, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
gloss
, 
Æoss
, 
gloss_avg
, 
Æoss_avg
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

1026 if(
i
%1000==0){

1027 
buff
[256];

1028 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

1029 
	`ßve_weights
(
√t
, 
buff
);

1030 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
aba£
, 
i
);

1031 
	`ßve_weights
(
™ë
, 
buff
);

1033 if(
i
%100==0){

1034 
buff
[256];

1035 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

1036 
	`ßve_weights
(
√t
, 
buff
);

1037 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
aba£
);

1038 
	`ßve_weights
(
™ë
, 
buff
);

1041 
buff
[256];

1042 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

1043 
	`ßve_weights
(
√t
, 
buff
);

1045 
	}
}

1304 
	$ã°_lsd
(*
cfg
, *
weights
, *
fûíame
, 
gøy
)

1306 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

1307 
	`£t_b©ch_√tw‹k
(
√t
, 1);

1308 
	`§™d
(2222222);

1310 
˛ock_t
 
time
;

1311 
buff
[256];

1312 *
öput
 = 
buff
;

1313 
i
, 
imœyî
 = 0;

1315 
i
 = 0; i < 
√t
->
n
; ++i) {

1316 i‡(
√t
->
œyîs
[
i
].
out_c
 == 3) {

1317 
imœyî
 = 
i
;

1318 
	`¥ötf
("%d\n", 
i
);

1324 if(
fûíame
){

1325 
	`°∫˝y
(
öput
, 
fûíame
, 256);

1327 
	`¥ötf
("Enter Image Path: ");

1328 
	`fÊush
(
°dout
);

1329 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

1330 if(!
öput
) ;

1331 
	`°πok
(
öput
, "\n");

1333 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

1334 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
->
w
);

1335 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
->w)/2, (ªsized.
h
 -Çet->h)/2,Çet->w,Çet->h);

1336 if(
gøy
Ë
	`gøysˇÀ_image_3c
(
¸›
);

1338 *
X
 = 
¸›
.
d©a
;

1339 
time
=
	`˛ock
();

1340 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

1341 
image
 
out
 = 
	`gë_√tw‹k_image_œyî
(
√t
, 
imœyî
);

1343 
	`c⁄°øö_image
(
out
);

1344 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

1345 
	`show_image
(
out
, "out");

1346 
	`show_image
(
¸›
, "crop");

1347 
	`ßve_image
(
out
, "out");

1348 #ifde‡
OPENCV


1349 
	`cvWaôKey
(0);

1352 
	`‰ì_image
(
im
);

1353 
	`‰ì_image
(
ªsized
);

1354 
	`‰ì_image
(
¸›
);

1355 i‡(
fûíame
) ;

1357 
	}
}

1360 
	$run_lsd
(
¨gc
, **
¨gv
)

1362 if(
¨gc
 < 4){

1363 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

1367 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

1368 
di•œy
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-display");

1369 
b©ches
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-b", 0);

1370 *
fûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-file", "/home/pjreddie/data/imagenet/imagenet1k.train.list");

1372 *
cfg
 = 
¨gv
[3];

1373 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

1374 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

1375 *
acfg
 = 
¨gv
[5];

1376 *
aweights
 = (
¨gc
 > 6Ë? 
¨gv
[6] : 0;

1381 if(0==
	`°rcmp
(
¨gv
[2], "åaög™")Ë
	`åaö_dcg™
(
cfg
, 
weights
, 
acfg
, 
aweights
, 
˛ór
, 
di•œy
, 
fûe
, 
b©ches
);

1382 if(0==
	`°rcmp
(
¨gv
[2], "åaö¥og")Ë
	`åaö_¥og
(
cfg
, 
weights
, 
acfg
, 
aweights
, 
˛ór
, 
di•œy
, 
fûe
, 
b©ches
);

1383 if(0==
	`°rcmp
(
¨gv
[2], "åaöcﬁ‹")Ë
	`åaö_cﬁ‹izî
(
cfg
, 
weights
, 
acfg
, 
aweights
, 
˛ór
, 
di•œy
);

1384 if(0==
	`°rcmp
(
¨gv
[2], "g™")Ë
	`ã°_dcg™
(
cfg
, 
weights
);

1385 if(0==
	`°rcmp
(
¨gv
[2], "öãr")Ë
	`öãr_dcg™
(
cfg
, 
weights
);

1386 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_lsd
(
cfg
, 
weights
, 
fûíame
, 0);

1387 if(0==
	`°rcmp
(
¨gv
[2], "cﬁ‹")Ë
	`ã°_lsd
(
cfg
, 
weights
, 
fûíame
, 1);

1391 
	}
}

	@nightmare.c

1 
	~"d¨k√t.h
"

3 
	~<m©h.h
>

7 
	$abs_món
(*
x
, 
n
)

9 
i
;

10 
sum
 = 0;

11 
i
 = 0; i < 
n
; ++i){

12 
sum
 +
	`Ábs
(
x
[
i
]);

14  
sum
/
n
;

15 
	}
}

17 
	$ˇlcuœã_loss
(*
ouçut
, *
dñè
, 
n
, 
thªsh
)

19 
i
;

20 
món
 = 
	`món_¨øy
(
ouçut
, 
n
);

21 
v¨
 = 
	`v¨ün˚_¨øy
(
ouçut
, 
n
);

22 
i
 = 0; i < 
n
; ++i){

23 if(
dñè
[
i
] > 
món
 + 
thªsh
*
	`sqπ
(
v¨
)Ëdñè[i] = 
ouçut
[i];

24 
dñè
[
i
] = 0;

26 
	}
}

28 
	$›timize_pi˘uª
(
√tw‹k
 *
√t
, 
image
 
‹ig
, 
max_œyî
, 
sˇÀ
, 
øã
, 
thªsh
, 
n‹m
)

32 
√t
->
n
 = 
max_œyî
 + 1;

34 
dx
 = 
	`ønd
()%16 - 8;

35 
dy
 = 
	`ønd
()%16 - 8;

36 
Êù
 = 
	`ønd
()%2;

38 
image
 
¸›
 = 
	`¸›_image
(
‹ig
, 
dx
, 
dy
, orig.
w
, orig.
h
);

39 
image
 
im
 = 
	`ªsize_image
(
¸›
, ()(
‹ig
.
w
 * 
sˇÀ
), ()(‹ig.
h
 * scale));

40 if(
Êù
Ë
	`Êù_image
(
im
);

42 
	`ªsize_√tw‹k
(
√t
, 
im
.
w
, im.
h
);

43 
œyî
 
œ°
 = 
√t
->
œyîs
[√t->
n
-1];

46 
image
 
dñè
 = 
	`make_image
(
im
.
w
, im.
h
, im.
c
);

48 #ifde‡
GPU


49 
√t
->
dñè_gpu
 = 
	`cuda_make_¨øy
(
dñè
.
d©a
, 
im
.
w
*im.
h
*im.
c
);

50 
	`c›y_˝u
(
√t
->
öputs
, 
im
.
d©a
, 1,Çë->
öput
, 1);

52 
	`f‹w¨d_√tw‹k_gpu
(
√t
);

53 
	`c›y_gpu
(
œ°
.
ouçuts
,Üa°.
ouçut_gpu
, 1,Üa°.
dñè_gpu
, 1);

55 
	`cuda_puŒ_¨øy
(
œ°
.
dñè_gpu
,Üa°.
dñè
,Üa°.
ouçuts
);

56 
	`ˇlcuœã_loss
(
œ°
.
dñè
,Üa°.dñè,Üa°.
ouçuts
, 
thªsh
);

57 
	`cuda_push_¨øy
(
œ°
.
dñè_gpu
,Üa°.
dñè
,Üa°.
ouçuts
);

59 
	`backw¨d_√tw‹k_gpu
(
√t
);

61 
	`cuda_puŒ_¨øy
(
√t
->
dñè_gpu
, 
dñè
.
d©a
, 
im
.
w
*im.
h
*im.
c
);

62 
	`cuda_‰ì
(
√t
->
dñè_gpu
);

63 
√t
->
dñè_gpu
 = 0;

65 
	`¥ötf
("\¬ë: %d %d %d im: %d %d %d\n", 
√t
->
w
,Çë->
h
,Çë->
öputs
, 
im
.w, im.h, im.
c
);

66 
	`c›y_˝u
(
√t
->
öputs
, 
im
.
d©a
, 1,Çë->
öput
, 1);

67 
√t
->
dñè
 = dñè.
d©a
;

68 
	`f‹w¨d_√tw‹k
(
√t
);

69 
	`c›y_˝u
(
œ°
.
ouçuts
,Üa°.
ouçut
, 1,Üa°.
dñè
, 1);

70 
	`ˇlcuœã_loss
(
œ°
.
ouçut
,Üa°.
dñè
,Üa°.
ouçuts
, 
thªsh
);

71 
	`backw¨d_√tw‹k
(
√t
);

74 if(
Êù
Ë
	`Êù_image
(
dñè
);

76 
image
 
ªsized
 = 
	`ªsize_image
(
dñè
, 
‹ig
.
w
, orig.
h
);

77 
image
 
out
 = 
	`¸›_image
(
ªsized
, -
dx
, -
dy
, 
‹ig
.
w
, orig.
h
);

86 
image
 
gøy
 = 
	`make_image
(
out
.
w
, out.
h
, out.
c
);

87 
	`fûl_image
(
gøy
, .5);

88 
	`axpy_˝u
(
‹ig
.
w
*‹ig.
h
*‹ig.
c
, -1, orig.
d©a
, 1, 
gøy
.data, 1);

89 
	`axpy_˝u
(
‹ig
.
w
*‹ig.
h
*‹ig.
c
, .1, 
gøy
.
d©a
, 1, 
out
.data, 1);

91 if(
n‹m
Ë
	`n‹mÆize_¨øy
(
out
.
d©a
, out.
w
*out.
h
*out.
c
);

92 
	`axpy_˝u
(
‹ig
.
w
*‹ig.
h
*‹ig.
c
, 
øã
, 
out
.
d©a
, 1, orig.data, 1);

104 
	`c⁄°øö_image
(
‹ig
);

106 
	`‰ì_image
(
¸›
);

107 
	`‰ì_image
(
im
);

108 
	`‰ì_image
(
dñè
);

109 
	`‰ì_image
(
ªsized
);

110 
	`‰ì_image
(
out
);

112 
	}
}

114 
	$smoŸh
(
image
 
ªc⁄
, imagê
upd©e
, 
œmbda
, 
num
)

116 
i
, 
j
, 
k
;

117 
ii
, 
jj
;

118 
k
 = 0; k < 
ªc⁄
.
c
; ++k){

119 
j
 = 0; j < 
ªc⁄
.
h
; ++j){

120 
i
 = 0; i < 
ªc⁄
.
w
; ++i){

121 
out_ödex
 = 
i
 + 
ªc⁄
.
w
*(
j
 +Ñec⁄.
h
*
k
);

122 
jj
 = 
j
-
num
; jj <j +Çum && jj < 
ªc⁄
.
h
; ++jj){

123 i‡(
jj
 < 0) ;

124 
ii
 = 
i
-
num
; iò<ò+Çum && iò< 
ªc⁄
.
w
; ++ii){

125 i‡(
ii
 < 0) ;

126 
ö_ödex
 = 
ii
 + 
ªc⁄
.
w
*(
jj
 +Ñec⁄.
h
*
k
);

127 
upd©e
.
d©a
[
out_ödex
] +
œmbda
 * (
ªc⁄
.d©a[
ö_ödex
] -Ñecon.data[out_index]);

133 
	}
}

135 
	$ªc⁄°ru˘_pi˘uª
(
√tw‹k
 *
√t
, *
„©uªs
, 
image
 
ªc⁄
, imagê
upd©e
, 
øã
, 
momítum
, 
œmbda
, 
smoŸh_size
, 
ôîs
)

137 
ôî
 = 0;

138 
ôî
 = 0; iã∏< 
ôîs
; ++iter) {

139 
image
 
dñè
 = 
	`make_image
(
ªc⁄
.
w
,Ñec⁄.
h
,Ñec⁄.
c
);

141 #ifde‡
GPU


142 
œyî
 
l
 = 
	`gë_√tw‹k_ouçut_œyî
(
√t
);

143 
	`cuda_push_¨øy
(
√t
->
öput_gpu
, 
ªc⁄
.
d©a
,Ñec⁄.
w
*ªc⁄.
h
*ªc⁄.
c
);

145 
√t
->
dñè_gpu
 = 
	`cuda_make_¨øy
(
dñè
.
d©a
, dñè.
w
*dñè.
h
*dñè.
c
);

147 
	`f‹w¨d_√tw‹k_gpu
(
√t
);

148 
	`cuda_push_¨øy
(
l
.
dñè_gpu
, 
„©uªs
,Ü.
ouçuts
);

149 
	`axpy_gpu
(
l
.
ouçuts
, -1,Ü.
ouçut_gpu
, 1,Ü.
dñè_gpu
, 1);

150 
	`backw¨d_√tw‹k_gpu
(
√t
);

152 
	`cuda_puŒ_¨øy
(
√t
->
dñè_gpu
, 
dñè
.
d©a
, dñè.
w
*dñè.
h
*dñè.
c
);

154 
	`cuda_‰ì
(
√t
->
dñè_gpu
);

156 
√t
->
öput
 = 
ªc⁄
.
d©a
;

157 
√t
->
dñè
 = dñè.
d©a
;

158 
√t
->
åuth
 = 
„©uªs
;

160 
	`f‹w¨d_√tw‹k
(
√t
);

161 
	`backw¨d_√tw‹k
(
√t
);

165 
	`axpy_˝u
(
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
, 1, 
dñè
.
d©a
, 1, 
upd©e
.data, 1);

168 
	`axpy_˝u
(
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
, 
øã
, 
upd©e
.
d©a
, 1,Ñecon.data, 1);

169 
	`sˇl_˝u
(
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
, 
momítum
, 
upd©e
.
d©a
, 1);

171 
mag
 = 
	`mag_¨øy
(
dñè
.
d©a
, 
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
);

172 
	`¥ötf
("mag: %f\n", 
mag
);

175 
	`c⁄°øö_image
(
ªc⁄
);

176 
	`‰ì_image
(
dñè
);

178 
	}
}

288 
	$run_nightm¨e
(
¨gc
, **
¨gv
)

290 
	`§™d
(0);

291 if(
¨gc
 < 4){

292 
	`Ârötf
(
°dîr
, "ußge: %†%†[cfg] [weights] [image] [œyî] [›ti⁄s! (›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

296 *
cfg
 = 
¨gv
[2];

297 *
weights
 = 
¨gv
[3];

298 *
öput
 = 
¨gv
[4];

299 
max_œyî
 = 
	`©oi
(
¨gv
[5]);

301 
ønge
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-range", 1);

302 
n‹m
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-norm", 1);

303 
rounds
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-rounds", 1);

304 
ôîs
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-iters", 10);

305 
o˘aves
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-octaves", 4);

306 
zoom
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-zoom", 1.);

307 
øã
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-rate", .04);

308 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", 1.);

309 
rŸ©e
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-rotate", 0);

310 
momítum
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-momentum", .9);

311 
œmbda
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-lambda", .01);

312 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

313 
ªc⁄°ru˘
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-reconstruct");

314 
smoŸh_size
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-smooth", 1);

316 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

317 *
cfgba£
 = 
	`ba£cfg
(
cfg
);

318 *
imba£
 = 
	`ba£cfg
(
öput
);

320 
	`£t_b©ch_√tw‹k
(
√t
, 1);

321 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

323 
sˇÀ
 = 1;

324 if(
im
.
w
 > 512 || im.
h
 > 512){

325 if(
im
.
w
 > im.
h
Ë
sˇÀ
 = 512.0/im.w;

326 
sˇÀ
 = 512.0/
im
.
h
;

328 
image
 
ªsized
 = 
	`ªsize_image
(
im
, 
sˇÀ
*im.
w
, sˇÀ*im.
h
);

329 
	`‰ì_image
(
im
);

330 
im
 = 
ªsized
;

334 *
„©uªs
 = 0;

335 
image
 
upd©e
;

336 i‡(
ªc⁄°ru˘
){

337 
√t
->
n
 = 
max_œyî
;

338 
im
 = 
	`Àâîbox_image
(im, 
√t
->
w
,Çë->
h
);

341 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

342 if(
√t
->
œyîs
[√t->
n
-1].
ty≥
 =
REGION
){

343 
	`¥ötf
("region!\n");

344 
	`zîo_obje˘√ss
(
√t
->
œyîs
[√t->
n
-1]);

346 
image
 
out_im
 = 
	`c›y_image
(
	`gë_√tw‹k_image
(
√t
));

353 
	`¥ötf
("%d fótuªs\n", 
out_im
.
w
*out_im.
h
*out_im.
c
);

355 
„©uªs
 = 
out_im
.
d©a
;

365 
upd©e
 = 
	`make_image
(
im
.
w
, im.
h
, im.
c
);

368 
e
;

369 
n
;

370 
e
 = 0;É < 
rounds
; ++e){

371 
	`Ârötf
(
°dîr
, "Iteration: ");

372 
	`fÊush
(
°dîr
);

373 
n
 = 0;Ç < 
ôîs
; ++n){

374 
	`Ârötf
(
°dîr
, "%d, ", 
n
);

375 
	`fÊush
(
°dîr
);

376 if(
ªc⁄°ru˘
){

377 
	`ªc⁄°ru˘_pi˘uª
(
√t
, 
„©uªs
, 
im
, 
upd©e
, 
øã
, 
momítum
, 
œmbda
, 
smoŸh_size
, 1);

379 
	`show_image
(
im
, "reconstruction");

380 #ifde‡
OPENCV


381 
	`cvWaôKey
(10);

384 
œyî
 = 
max_œyî
 + 
	`ønd
()%
ønge
 -Ñange/2;

385 
o˘ave
 = 
	`ønd
()%
o˘aves
;

386 
	`›timize_pi˘uª
(
√t
, 
im
, 
œyî
, 1/
	`pow
(1.33333333, 
o˘ave
), 
øã
, 
thªsh
, 
n‹m
);

389 
	`Ârötf
(
°dîr
, "done\n");

391 
image
 
g
 = 
	`gøysˇÀ_image
(
im
);

392 
	`‰ì_image
(
im
);

393 
im
 = 
g
;

395 
buff
[256];

396 i‡(
¥efix
){

397 
	`•rötf
(
buff
, "%s/%s_%s_%d_%06d",
¥efix
, 
imba£
, 
cfgba£
, 
max_œyî
, 
e
);

399 
	`•rötf
(
buff
, "%s_%s_%d_%06d",
imba£
, 
cfgba£
, 
max_œyî
, 
e
);

401 
	`¥ötf
("%d %s\n", 
e
, 
buff
);

402 
	`ßve_image
(
im
, 
buff
);

406 if(
rŸ©e
){

407 
image
 
rŸ
 = 
	`rŸ©e_image
(
im
, 
rŸ©e
);

408 
	`‰ì_image
(
im
);

409 
im
 = 
rŸ
;

411 
image
 
¸›
 = 
	`¸›_image
(
im
, im.
w
 * (1. - 
zoom
)/2., im.
h
 * (1.-zoom)/2., im.w*zoom, im.h*zoom);

412 
image
 
ªsized
 = 
	`ªsize_image
(
¸›
, 
im
.
w
, im.
h
);

413 
	`‰ì_image
(
im
);

414 
	`‰ì_image
(
¸›
);

415 
im
 = 
ªsized
;

417 
	}
}

	@regressor.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

3 
	~<as£π.h
>

5 
	$åaö_ªgªss‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

7 
i
;

9 
avg_loss
 = -1;

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
	`¥ötf
("%d\n", 
ngpus
);

13 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network*));

15 
	`§™d
(
	`time
(0));

16 
£ed
 = 
	`ønd
();

17 
i
 = 0; i < 
ngpus
; ++i){

18 
	`§™d
(
£ed
);

19 #ifde‡
GPU


20 
	`cuda_£t_devi˚
(
gpus
[
i
]);

22 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

23 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

25 
	`§™d
(
	`time
(0));

26 
√tw‹k
 *
√t
 = 
√ts
[0];

28 
imgs
 = 
√t
->
b©ch
 *Çë->
subdivisi⁄s
 * 
ngpus
;

30 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

31 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

33 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

34 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

35 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 1);

37 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

38 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

39 
	`¥ötf
("%d\n", 
∂i°
->
size
);

40 
N
 = 
∂i°
->
size
;

41 
˛ock_t
 
time
;

43 
lﬂd_¨gs
 
¨gs
 = {0};

44 
¨gs
.
w
 = 
√t
->w;

45 
¨gs
.
h
 = 
√t
->h;

46 
¨gs
.
thªads
 = 32;

47 
¨gs
.
˛as£s
 = classes;

49 
¨gs
.
mö
 = 
√t
->
mö_øtio
*√t->
w
;

50 
¨gs
.
max
 = 
√t
->
max_øtio
*√t->
w
;

51 
¨gs
.
™gÀ
 = 
√t
->angle;

52 
¨gs
.
a•e˘
 = 
√t
->aspect;

53 
¨gs
.
exposuª
 = 
√t
->exposure;

54 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

55 
¨gs
.
hue
 = 
√t
->hue;

56 
¨gs
.
size
 = 
√t
->
w
;

58 
¨gs
.
∑ths
 =Öaths;

59 
¨gs
.
n
 = 
imgs
;

60 
¨gs
.
m
 = 
N
;

61 
¨gs
.
ty≥
 = 
REGRESSION_DATA
;

63 
d©a
 
åaö
;

64 
d©a
 
buf„r
;

65 
±hªad_t
 
lﬂd_thªad
;

66 
¨gs
.
d
 = &
buf„r
;

67 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

69 
ïoch
 = (*
√t
->
£í
)/
N
;

70 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

71 
time
=
	`˛ock
();

73 
	`±hªad_joö
(
lﬂd_thªad
, 0);

74 
åaö
 = 
buf„r
;

75 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

77 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

78 
time
=
	`˛ock
();

80 
loss
 = 0;

81 #ifde‡
GPU


82 if(
ngpus
 == 1){

83 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

85 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

88 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

90 if(
avg_loss
 =-1Ëavg_los†
loss
;

91 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

92 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net->seen);

93 
	`‰ì_d©a
(
åaö
);

94 if(*
√t
->
£í
/
N
 > 
ïoch
){

95 
ïoch
 = *
√t
->
£í
/
N
;

96 
buff
[256];

97 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

98 
	`ßve_weights
(
√t
, 
buff
);

100 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

101 
buff
[256];

102 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

103 
	`ßve_weights
(
√t
, 
buff
);

106 
buff
[256];

107 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

108 
	`ßve_weights
(
√t
, 
buff
);

110 
	`‰ì_√tw‹k
(
√t
);

111 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

112 
	`‰ì_li°
(
∂i°
);

113 
	`‰ì
(
ba£
);

114 
	}
}

116 
	$¥edi˘_ªgªss‹
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

118 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

119 
	`£t_b©ch_√tw‹k
(
√t
, 1);

120 
	`§™d
(2222222);

122 
˛ock_t
 
time
;

123 
buff
[256];

124 *
öput
 = 
buff
;

126 if(
fûíame
){

127 
	`°∫˝y
(
öput
, 
fûíame
, 256);

129 
	`¥ötf
("Enter Image Path: ");

130 
	`fÊush
(
°dout
);

131 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

132 if(!
öput
) ;

133 
	`°πok
(
öput
, "\n");

135 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

136 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

138 *
X
 = 
sized
.
d©a
;

139 
time
=
	`˛ock
();

140 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

141 
	`¥ötf
("Pªdi˘ed: %f\n", 
¥edi˘i⁄s
[0]);

142 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

143 
	`‰ì_image
(
im
);

144 
	`‰ì_image
(
sized
);

145 i‡(
fûíame
) ;

147 
	}
}

150 
	$demo_ªgªss‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

152 #ifde‡
OPENCV


153 
	`¥ötf
("Regressor Demo\n");

154 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

155 
	`£t_b©ch_√tw‹k
(
√t
, 1);

157 
	`§™d
(2222222);

158 
CvC≠tuª
 * 
ˇp
;

160 if(
fûíame
){

161 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

163 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

165 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

166 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 1);

167 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

168 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

170 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

171 
	`cvNamedWödow
("Regªss‹", 
CV_WINDOW_NORMAL
);

172 
	`cvResizeWödow
("Regressor", 512, 512);

173 
Âs
 = 0;

176 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

177 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

179 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

180 
image
 
¸›
 = 
	`˚¡î_¸›_image
(
ö
, 
√t
->
w
,Çë->
h
);

181 
	`gøysˇÀ_image_3c
(
¸›
);

182 
	`show_image
(
¸›
, "Regressor");

184 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
¸›
.
d©a
);

186 
	`¥ötf
("\033[2J");

187 
	`¥ötf
("\033[1;1H");

188 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

190 
i
;

191 
i
 = 0; i < 
˛as£s
; ++i){

192 
	`¥ötf
("%s: %f\n", 
«mes
[
i
], 
¥edi˘i⁄s
[i]);

195 
	`‰ì_image
(
ö
);

196 
	`‰ì_image
(
¸›
);

198 
	`cvWaôKey
(10);

200 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

201 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

202 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

203 
Âs
 = .9*Â†+ .1*
cuº
;

206 
	}
}

209 
	$run_ªgªss‹
(
¨gc
, **
¨gv
)

211 if(
¨gc
 < 4){

212 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

216 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

217 *
gpus
 = 0;

218 
gpu
 = 0;

219 
ngpus
 = 0;

220 if(
gpu_li°
){

221 
	`¥ötf
("%s\n", 
gpu_li°
);

222 
Àn
 = 
	`°æí
(
gpu_li°
);

223 
ngpus
 = 1;

224 
i
;

225 
i
 = 0; i < 
Àn
; ++i){

226 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

228 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

229 
i
 = 0; i < 
ngpus
; ++i){

230 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

231 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

234 
gpu
 = 
gpu_ödex
;

235 
gpus
 = &
gpu
;

236 
ngpus
 = 1;

239 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

240 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

241 *
d©a
 = 
¨gv
[3];

242 *
cfg
 = 
¨gv
[4];

243 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

244 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

245 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`¥edi˘_ªgªss‹
(
d©a
, 
cfg
, 
weights
);

246 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ªgªss‹
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

247 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_ªgªss‹
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

248 
	}
}

	@rnn.c

1 
	~"d¨k√t.h
"

3 
	~<m©h.h
>

6 *
	mx
;

7 *
	my
;

8 } 
	tÊﬂt_∑ú
;

10 **
	$lﬂd_fûes
(*
fûíame
, *
n
)

12 
li°
 *
∑ths
 = 
	`gë_∑ths
(
fûíame
);

13 *
n
 = 
∑ths
->
size
;

14 **
c⁄ã¡s
 = 
	`ˇŒoc
(*
n
, (*));

15 
i
;

16 
node
 *
x
 = 
∑ths
->
‰⁄t
;

17 
i
 = 0; i < *
n
; ++i){

18 
c⁄ã¡s
[
i
] = 
	`ªad_fûe
((*)
x
->
vÆ
);

19 
x
 = x->
√xt
;

21  
c⁄ã¡s
;

22 
	}
}

24 *
	$ªad_tokíized_d©a
(*
fûíame
, 
size_t
 *
ªad
)

26 
size_t
 
size
 = 512;

27 
size_t
 
cou¡
 = 0;

28 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

29 *
d
 = 
	`ˇŒoc
(
size
, ());

30 
n
, 
⁄e
;

31 
⁄e
 = 
	`fsˇnf
(
Â
, "%d", &
n
);

32 
⁄e
 == 1){

33 ++
cou¡
;

34 if(
cou¡
 > 
size
){

35 
size
 = size*2;

36 
d
 = 
	`ªÆloc
(d, 
size
*());

38 
d
[
cou¡
-1] = 
n
;

39 
⁄e
 = 
	`fsˇnf
(
Â
, "%d", &
n
);

41 
	`f˛o£
(
Â
);

42 
d
 = 
	`ªÆloc
(d, 
cou¡
*());

43 *
ªad
 = 
cou¡
;

44  
d
;

45 
	}
}

47 **
	$ªad_tokís
(*
fûíame
, 
size_t
 *
ªad
)

49 
size_t
 
size
 = 512;

50 
size_t
 
cou¡
 = 0;

51 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

52 **
d
 = 
	`ˇŒoc
(
size
, (*));

53 *
löe
;

54 (
löe
=
	`fgël
(
Â
)) != 0){

55 ++
cou¡
;

56 if(
cou¡
 > 
size
){

57 
size
 = size*2;

58 
d
 = 
	`ªÆloc
(d, 
size
*(*));

60 if(0==
	`°rcmp
(
löe
, "<NEWLINE>"))Üine = "\n";

61 
d
[
cou¡
-1] = 
löe
;

63 
	`f˛o£
(
Â
);

64 
d
 = 
	`ªÆloc
(d, 
cou¡
*(*));

65 *
ªad
 = 
cou¡
;

66  
d
;

67 
	}
}

70 
Êﬂt_∑ú
 
	$gë_∫n_tokí_d©a
(*
tokís
, 
size_t
 *
off£ts
, 
ch¨a˘îs
, size_à
Àn
, 
b©ch
, 
°ïs
)

72 *
x
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

73 *
y
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

74 
i
,
j
;

75 
i
 = 0; i < 
b©ch
; ++i){

76 
j
 = 0; j < 
°ïs
; ++j){

77 
cuº
 = 
tokís
[(
off£ts
[
i
])%
Àn
];

78 
√xt
 = 
tokís
[(
off£ts
[
i
] + 1)%
Àn
];

80 
x
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
cuº
] = 1;

81 
y
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
√xt
] = 1;

83 
off£ts
[
i
] = (off£ts[i] + 1Ë% 
Àn
;

85 if(
cuº
 >
ch¨a˘îs
 || cuº < 0 || 
√xt
 >= characters ||Çext < 0){

86 
	`îr‹
("Bad char");

90 
Êﬂt_∑ú
 
p
;

91 
p
.
x
 = x;

92 
p
.
y
 = y;

93  
p
;

94 
	}
}

96 
Êﬂt_∑ú
 
	$gë_£q2£q_d©a
(**
sour˚
, **
de°
, 
n
, 
ch¨a˘îs
, 
size_t
 
Àn
, 
b©ch
, 
°ïs
)

98 
i
,
j
;

99 *
x
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

100 *
y
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

101 
i
 = 0; i < 
b©ch
; ++i){

102 
ödex
 = 
	`ønd
()%
n
;

105 
j
 = 0; j < 
°ïs
; ++j){

106 
cuº
 = 
sour˚
[
ödex
][
j
];

107 
√xt
 = 
de°
[
ödex
][
j
];

109 
x
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
cuº
] = 1;

110 
y
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
√xt
] = 1;

112 if(
cuº
 > 255 || cuº <0 || 
√xt
 > 255 ||Çext <= 0){

117 
	`îr‹
("Bad char");

121 
Êﬂt_∑ú
 
p
;

122 
p
.
x
 = x;

123 
p
.
y
 = y;

124  
p
;

125 
	}
}

127 
Êﬂt_∑ú
 
	$gë_∫n_d©a
(*
ãxt
, 
size_t
 *
off£ts
, 
ch¨a˘îs
, size_à
Àn
, 
b©ch
, 
°ïs
)

129 *
x
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

130 *
y
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

131 
i
,
j
;

132 
i
 = 0; i < 
b©ch
; ++i){

133 
j
 = 0; j < 
°ïs
; ++j){

134 
cuº
 = 
ãxt
[(
off£ts
[
i
])%
Àn
];

135 
√xt
 = 
ãxt
[(
off£ts
[
i
] + 1)%
Àn
];

137 
x
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
cuº
] = 1;

138 
y
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
√xt
] = 1;

140 
off£ts
[
i
] = (off£ts[i] + 1Ë% 
Àn
;

142 if(
cuº
 > 255 || cuº <0 || 
√xt
 > 255 ||Çext <= 0){

147 
	`îr‹
("Bad char");

151 
Êﬂt_∑ú
 
p
;

152 
p
.
x
 = x;

153 
p
.
y
 = y;

154  
p
;

155 
	}
}

157 
	$åaö_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
˛ór
, 
tokíized
)

159 
	`§™d
(
	`time
(0));

160 *
ãxt
 = 0;

161 *
tokís
 = 0;

162 
size_t
 
size
;

163 if(
tokíized
){

164 
tokís
 = 
	`ªad_tokíized_d©a
(
fûíame
, &
size
);

166 
ãxt
 = 
	`ªad_fûe
(
fûíame
);

167 
size
 = 
	`°æí
((c⁄° *)
ãxt
);

170 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

171 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

172 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

173 
avg_loss
 = -1;

174 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

176 
öputs
 = 
√t
->inputs;

177 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g, I≈uts: %d %d %d\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
, 
öputs
,Çë->
b©ch
,Çë->
time_°ïs
);

178 
b©ch
 = 
√t
->batch;

179 
°ïs
 = 
√t
->
time_°ïs
;

180 if(
˛ór
Ë*
√t
->
£í
 = 0;

181 
i
 = (*
√t
->
£í
)/√t->
b©ch
;

183 
°ªams
 = 
b©ch
/
°ïs
;

184 
size_t
 *
off£ts
 = 
	`ˇŒoc
(
°ªams
, (size_t));

185 
j
;

186 
j
 = 0; j < 
°ªams
; ++j){

187 
off£ts
[
j
] = 
	`ønd_size_t
()%
size
;

190 
˛ock_t
 
time
;

191 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
){

192 
i
 += 1;

193 
time
=
	`˛ock
();

194 
Êﬂt_∑ú
 
p
;

195 if(
tokíized
){

196 
p
 = 
	`gë_∫n_tokí_d©a
(
tokís
, 
off£ts
, 
öputs
, 
size
, 
°ªams
, 
°ïs
);

198 
p
 = 
	`gë_∫n_d©a
(
ãxt
, 
off£ts
, 
öputs
, 
size
, 
°ªams
, 
°ïs
);

201 
	`c›y_˝u
(
√t
->
öputs
*√t->
b©ch
, 
p
.
x
, 1,Çë->
öput
, 1);

202 
	`c›y_˝u
(
√t
->
åuths
*√t->
b©ch
, 
p
.
y
, 1,Çë->
åuth
, 1);

203 
loss
 = 
	`åaö_√tw‹k_d©um
(
√t
Ë/ (
b©ch
);

204 
	`‰ì
(
p
.
x
);

205 
	`‰ì
(
p
.
y
);

206 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

207 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

209 
size_t
 
ch¨s
 = 
	`gë_cuºít_b©ch
(
√t
)*
b©ch
;

210 
	`Ârötf
(
°dîr
, "%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %‡ïochs\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), (Ë
ch¨s
/
size
);

212 
j
 = 0; j < 
°ªams
; ++j){

214 if(
	`ønd
()%64 == 0){

216 
off£ts
[
j
] = 
	`ønd_size_t
()%
size
;

217 
	`ª£t_√tw‹k_°©e
(
√t
, 
j
);

221 if(
i
%10000==0){

222 
buff
[256];

223 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

224 
	`ßve_weights
(
√t
, 
buff
);

226 if(
i
%100==0){

227 
buff
[256];

228 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

229 
	`ßve_weights
(
√t
, 
buff
);

232 
buff
[256];

233 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

234 
	`ßve_weights
(
√t
, 
buff
);

235 
	}
}

237 
	$¥öt_symbﬁ
(
n
, **
tokís
){

238 if(
tokís
){

239 
	`¥ötf
("%†", 
tokís
[
n
]);

241 
	`¥ötf
("%c", 
n
);

243 
	}
}

245 
	$ã°_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, 
num
, *
£ed
, 
ãmp
, 
r£ed
, *
tokí_fûe
)

247 **
tokís
 = 0;

248 if(
tokí_fûe
){

249 
size_t
 
n
;

250 
tokís
 = 
	`ªad_tokís
(
tokí_fûe
, &
n
);

253 
	`§™d
(
r£ed
);

254 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

255 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

257 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

258 
öputs
 = 
√t
->inputs;

260 
i
, 
j
;

261 
i
 = 0; i < 
√t
->
n
; ++iË√t->
œyîs
[i].
ãm≥øtuª
 = 
ãmp
;

262 
c
 = 0;

263 
Àn
 = 
	`°æí
(
£ed
);

264 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

274 
i
 = 0; i < 
Àn
-1; ++i){

275 
c
 = 
£ed
[
i
];

276 
öput
[
c
] = 1;

277 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

278 
öput
[
c
] = 0;

279 
	`¥öt_symbﬁ
(
c
, 
tokís
);

281 if(
Àn
Ë
c
 = 
£ed
[len-1];

282 
	`¥öt_symbﬁ
(
c
, 
tokís
);

283 
i
 = 0; i < 
num
; ++i){

284 
öput
[
c
] = 1;

285 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

286 
öput
[
c
] = 0;

287 
j
 = 32; j < 127; ++j){

290 
j
 = 0; j < 
öputs
; ++j){

291 i‡(
out
[
j
] < .0001) out[j] = 0;

293 
c
 = 
	`ßm∂e_¨øy
(
out
, 
öputs
);

294 
	`¥öt_symbﬁ
(
c
, 
tokís
);

296 
	`¥ötf
("\n");

297 
	}
}

299 
	$ã°_è˘ic_∫n_mu…i
(*
cfgfûe
, *
weightfûe
, 
num
, 
ãmp
, 
r£ed
, *
tokí_fûe
)

301 **
tokís
 = 0;

302 if(
tokí_fûe
){

303 
size_t
 
n
;

304 
tokís
 = 
	`ªad_tokís
(
tokí_fûe
, &
n
);

307 
	`§™d
(
r£ed
);

308 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

309 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

311 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

312 
öputs
 = 
√t
->inputs;

314 
i
, 
j
;

315 
i
 = 0; i < 
√t
->
n
; ++iË√t->
œyîs
[i].
ãm≥øtuª
 = 
ãmp
;

316 
c
 = 0;

317 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

318 *
out
 = 0;

321 
	`ª£t_√tw‹k_°©e
(
√t
, 0);

322 (
c
 = 
	`gëc
(
°dö
)Ë!
EOF
 && c != 0){

323 
öput
[
c
] = 1;

324 
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

325 
öput
[
c
] = 0;

327 
i
 = 0; i < 
num
; ++i){

328 
j
 = 0; j < 
öputs
; ++j){

329 i‡(
out
[
j
] < .0001) out[j] = 0;

331 
√xt
 = 
	`ßm∂e_¨øy
(
out
, 
öputs
);

332 if(
c
 ='.' && 
√xt
 == '\n') ;

333 
c
 = 
√xt
;

334 
	`¥öt_symbﬁ
(
c
, 
tokís
);

336 
öput
[
c
] = 1;

337 
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

338 
öput
[
c
] = 0;

340 
	`¥ötf
("\n");

342 
	}
}

344 
	$ã°_è˘ic_∫n
(*
cfgfûe
, *
weightfûe
, 
num
, 
ãmp
, 
r£ed
, *
tokí_fûe
)

346 **
tokís
 = 0;

347 if(
tokí_fûe
){

348 
size_t
 
n
;

349 
tokís
 = 
	`ªad_tokís
(
tokí_fûe
, &
n
);

352 
	`§™d
(
r£ed
);

353 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

354 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

356 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

357 
öputs
 = 
√t
->inputs;

359 
i
, 
j
;

360 
i
 = 0; i < 
√t
->
n
; ++iË√t->
œyîs
[i].
ãm≥øtuª
 = 
ãmp
;

361 
c
 = 0;

362 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

363 *
out
 = 0;

365 (
c
 = 
	`gëc
(
°dö
)Ë!
EOF
){

366 
öput
[
c
] = 1;

367 
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

368 
öput
[
c
] = 0;

370 
i
 = 0; i < 
num
; ++i){

371 
j
 = 0; j < 
öputs
; ++j){

372 i‡(
out
[
j
] < .0001) out[j] = 0;

374 
√xt
 = 
	`ßm∂e_¨øy
(
out
, 
öputs
);

375 if(
c
 ='.' && 
√xt
 == '\n') ;

376 
c
 = 
√xt
;

377 
	`¥öt_symbﬁ
(
c
, 
tokís
);

379 
öput
[
c
] = 1;

380 
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

381 
öput
[
c
] = 0;

383 
	`¥ötf
("\n");

384 
	}
}

386 
	$vÆid_è˘ic_∫n
(*
cfgfûe
, *
weightfûe
, *
£ed
)

388 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

389 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

391 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

392 
öputs
 = 
√t
->inputs;

394 
cou¡
 = 0;

395 
w‹ds
 = 1;

396 
c
;

397 
Àn
 = 
	`°æí
(
£ed
);

398 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

399 
i
;

400 
i
 = 0; i < 
Àn
; ++i){

401 
c
 = 
£ed
[
i
];

402 
öput
[()
c
] = 1;

403 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

404 
öput
[()
c
] = 0;

406 
sum
 = 0;

407 
c
 = 
	`gëc
(
°dö
);

408 
log2
 = 
	`log
(2);

409 
ö
 = 0;

410 
c
 !
EOF
){

411 
√xt
 = 
	`gëc
(
°dö
);

412 if(
√xt
 =
EOF
) ;

413 if(
√xt
 < 0 ||Çexà>255Ë
	`îr‹
("Out ofÑange character");

415 
öput
[
c
] = 1;

416 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

417 
öput
[
c
] = 0;

419 if(
c
 ='.' && 
√xt
 ='\n'Ë
ö
 = 0;

420 if(!
ö
) {

421 if(
c
 ='>' && 
√xt
 == '>'){

422 
ö
 = 1;

423 ++
w‹ds
;

425 
c
 = 
√xt
;

428 ++
cou¡
;

429 
sum
 +
	`log
(
out
[
√xt
])/
log2
;

430 
c
 = 
√xt
;

431 
	`¥ötf
("%d %d Pî∂exôy: %4.4‡ W‹d Pî∂exôy: %4.4f\n", 
cou¡
, 
w‹ds
, 
	`pow
(2, -
sum
/count),Öow(2, -sum/words));

433 
	}
}

435 
	$vÆid_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, *
£ed
)

437 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

438 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

440 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

441 
öputs
 = 
√t
->inputs;

443 
cou¡
 = 0;

444 
w‹ds
 = 1;

445 
c
;

446 
Àn
 = 
	`°æí
(
£ed
);

447 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

448 
i
;

449 
i
 = 0; i < 
Àn
; ++i){

450 
c
 = 
£ed
[
i
];

451 
öput
[()
c
] = 1;

452 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

453 
öput
[()
c
] = 0;

455 
sum
 = 0;

456 
c
 = 
	`gëc
(
°dö
);

457 
log2
 = 
	`log
(2);

458 
c
 !
EOF
){

459 
√xt
 = 
	`gëc
(
°dö
);

460 if(
√xt
 =
EOF
) ;

461 if(
√xt
 < 0 ||Çexà>255Ë
	`îr‹
("Out ofÑange character");

462 ++
cou¡
;

463 if(
√xt
 =' ' ||Çexà='\n' ||Çexà='\t'Ë++
w‹ds
;

464 
öput
[
c
] = 1;

465 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

466 
öput
[
c
] = 0;

467 
sum
 +
	`log
(
out
[
√xt
])/
log2
;

468 
c
 = 
√xt
;

469 
	`¥ötf
("%d BPC: %4.4‡ Pî∂exôy: %4.4‡ W‹d Pî∂exôy: %4.4f\n", 
cou¡
, -
sum
/cou¡, 
	`pow
(2, -sum/cou¡),Öow(2, -sum/
w‹ds
));

471 
	}
}

473 
	$vec_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, *
£ed
)

475 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

476 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

478 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

479 
öputs
 = 
√t
->inputs;

481 
c
;

482 
£ed_Àn
 = 
	`°æí
(
£ed
);

483 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

484 
i
;

485 *
löe
;

486 (
löe
=
	`fgël
(
°dö
)) != 0){

487 
	`ª£t_√tw‹k_°©e
(
√t
, 0);

488 
i
 = 0; i < 
£ed_Àn
; ++i){

489 
c
 = 
£ed
[
i
];

490 
öput
[()
c
] = 1;

491 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

492 
öput
[()
c
] = 0;

494 
	`°rù
(
löe
);

495 
°r_Àn
 = 
	`°æí
(
löe
);

496 
i
 = 0; i < 
°r_Àn
; ++i){

497 
c
 = 
löe
[
i
];

498 
öput
[()
c
] = 1;

499 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

500 
öput
[()
c
] = 0;

502 
c
 = ' ';

503 
öput
[()
c
] = 1;

504 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

505 
öput
[()
c
] = 0;

507 
œyî
 
l
 = 
√t
->
œyîs
[0];

508 #ifde‡
GPU


509 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
ouçuts
);

511 
	`¥ötf
("%s", 
löe
);

512 
i
 = 0; i < 
l
.
ouçuts
; ++i){

513 
	`¥ötf
(",%g", 
l
.
ouçut
[
i
]);

515 
	`¥ötf
("\n");

517 
	}
}

519 
	$run_ch¨_∫n
(
¨gc
, **
¨gv
)

521 if(
¨gc
 < 4){

522 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

525 *
fûíame
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-file", "data/shakespeare.txt");

526 *
£ed
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-seed", "\n\n");

527 
Àn
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-len", 1000);

528 
ãmp
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-temp", .7);

529 
r£ed
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-§™d", 
	`time
(0));

530 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

531 
tokíized
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-tokenized");

532 *
tokís
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-tokens", 0);

534 *
cfg
 = 
¨gv
[3];

535 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

536 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ch¨_∫n
(
cfg
, 
weights
, 
fûíame
, 
˛ór
, 
tokíized
);

537 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid_ch¨_∫n
(
cfg
, 
weights
, 
£ed
);

538 if(0==
	`°rcmp
(
¨gv
[2], "vÆidè˘ic")Ë
	`vÆid_è˘ic_∫n
(
cfg
, 
weights
, 
£ed
);

539 if(0==
	`°rcmp
(
¨gv
[2], "vec")Ë
	`vec_ch¨_∫n
(
cfg
, 
weights
, 
£ed
);

540 if(0==
	`°rcmp
(
¨gv
[2], "gíî©e")Ë
	`ã°_ch¨_∫n
(
cfg
, 
weights
, 
Àn
, 
£ed
, 
ãmp
, 
r£ed
, 
tokís
);

541 if(0==
	`°rcmp
(
¨gv
[2], "gíî©ëa˘ic")Ë
	`ã°_è˘ic_∫n
(
cfg
, 
weights
, 
Àn
, 
ãmp
, 
r£ed
, 
tokís
);

542 
	}
}

	@rnn_vid.c

1 
	~"d¨k√t.h
"

3 #ifde‡
OPENCV


4 
image
 
gë_image_‰om_°ªam
(
CvC≠tuª
 *
ˇp
);

5 
image
 
ùl_to_image
(
I∂Image
* 
§c
);

7 
ªc⁄°ru˘_pi˘uª
(
√tw‹k
 
√t
, *
„©uªs
, 
image
 
ªc⁄
, imagê
upd©e
, 
øã
, 
momítum
, 
œmbda
, 
smoŸh_size
, 
ôîs
);

11 *
	mx
;

12 *
	my
;

13 } 
	tÊﬂt_∑ú
;

15 
Êﬂt_∑ú
 
	$gë_∫n_vid_d©a
(
√tw‹k
 
√t
, **
fûes
, 
n
, 
b©ch
, 
°ïs
)

17 
b
;

18 
	`as£π
(
√t
.
b©ch
 =
°ïs
 + 1);

19 
image
 
out_im
 = 
	`gë_√tw‹k_image
(
√t
);

20 
ouçut_size
 = 
out_im
.
w
*out_im.
h
*out_im.
c
;

21 
	`¥ötf
("%d %d %d\n", 
out_im
.
w
, out_im.
h
, out_im.
c
);

22 *
„©s
 = 
	`ˇŒoc
(
√t
.
b©ch
*b©ch*
ouçut_size
, ());

23 
b
 = 0; b < 
b©ch
; ++b){

24 
öput_size
 = 
√t
.
w
*√t.
h
*√t.
c
;

25 *
öput
 = 
	`ˇŒoc
(
öput_size
*
√t
.
b©ch
, ());

26 *
fûíame
 = 
fûes
[
	`ønd
()%
n
];

27 
CvC≠tuª
 *
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

28 
‰ames
 = 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_COUNT
);

29 
ödex
 = 
	`ønd
(Ë% (
‰ames
 - 
°ïs
 - 2);

30 i‡(
‰ames
 < (
°ïs
 + 4)){

31 --
b
;

32 
	`‰ì
(
öput
);

36 
	`¥ötf
("‰ames: %d, index: %d\n", 
‰ames
, 
ödex
);

37 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_POS_FRAMES
, 
ödex
);

39 
i
;

40 
i
 = 0; i < 
√t
.
b©ch
; ++i){

41 
I∂Image
* 
§c
 = 
	`cvQuîyFøme
(
ˇp
);

42 
image
 
im
 = 
	`ùl_to_image
(
§c
);

43 
	`rgbgr_image
(
im
);

44 
image
 
ª
 = 
	`ªsize_image
(
im
, 
√t
.
w
,Çë.
h
);

47 
	`mem˝y
(
öput
 + 
i
*
öput_size
, 
ª
.
d©a
, input_size*());

48 
	`‰ì_image
(
im
);

49 
	`‰ì_image
(
ª
);

51 *
ouçut
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

53 
	`‰ì
(
öput
);

55 
i
 = 0; i < 
√t
.
b©ch
; ++i){

56 
	`mem˝y
(
„©s
 + (
b
 + 
i
*
b©ch
)*
ouçut_size
, 
ouçut
 + i*output_size, output_size*());

59 
	`cvRñó£C≠tuª
(&
ˇp
);

63 
Êﬂt_∑ú
 
p
 = {0};

64 
p
.
x
 = 
„©s
;

65 
p
.
y
 = 
„©s
 + 
ouçut_size
*
b©ch
;

67  
p
;

68 
	}
}

71 
	$åaö_vid_∫n
(*
cfgfûe
, *
weightfûe
)

73 *
åaö_videos
 = "data/vid/train.txt";

74 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

75 
	`§™d
(
	`time
(0));

76 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

77 
	`¥ötf
("%s\n", 
ba£
);

78 
avg_loss
 = -1;

79 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

80 if(
weightfûe
){

81 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

83 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

84 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

85 
i
 = *
√t
.
£í
/
imgs
;

87 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_videos
);

88 
N
 = 
∂i°
->
size
;

89 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

90 
˛ock_t
 
time
;

91 
°ïs
 = 
√t
.
time_°ïs
;

92 
b©ch
 = 
√t
.b©ch /Çë.
time_°ïs
;

94 
√tw‹k
 
exåa˘‹
 = 
	`∑r£_√tw‹k_cfg
("cfg/extractor.cfg");

95 
	`lﬂd_weights
(&
exåa˘‹
, "/home/pjreddie/trained/yolo-coco.conv");

97 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

98 
i
 += 1;

99 
time
=
	`˛ock
();

100 
Êﬂt_∑ú
 
p
 = 
	`gë_∫n_vid_d©a
(
exåa˘‹
, 
∑ths
, 
N
, 
b©ch
, 
°ïs
);

102 
	`c›y_˝u
(
√t
.
öputs
*√t.
b©ch
, 
p
.
x
, 1,Çë.
öput
, 1);

103 
	`c›y_˝u
(
√t
.
åuths
*√t.
b©ch
, 
p
.
y
, 1,Çë.
åuth
, 1);

104 
loss
 = 
	`åaö_√tw‹k_d©um
(
√t
Ë/ (√t.
b©ch
);

107 
	`‰ì
(
p
.
x
);

108 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

109 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

111 
	`Ârötf
(
°dîr
, "%d: %f, %‡avg, %‡øã, %l‡£c⁄ds\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
));

112 if(
i
%100==0){

113 
buff
[256];

114 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

115 
	`ßve_weights
(
√t
, 
buff
);

117 if(
i
%10==0){

118 
buff
[256];

119 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

120 
	`ßve_weights
(
√t
, 
buff
);

123 
buff
[256];

124 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

125 
	`ßve_weights
(
√t
, 
buff
);

126 
	}
}

129 
image
 
	$ßve_ªc⁄°ru˘i⁄
(
√tw‹k
 
√t
, 
image
 *
öô
, *
„©
, *
«me
, 
i
)

131 
image
 
ªc⁄
;

132 i‡(
öô
) {

133 
ªc⁄
 = 
	`c›y_image
(*
öô
);

135 
ªc⁄
 = 
	`make_øndom_image
(
√t
.
w
,Çë.
h
, 3);

138 
image
 
upd©e
 = 
	`make_image
(
√t
.
w
,Çë.
h
, 3);

139 
	`ªc⁄°ru˘_pi˘uª
(
√t
, 
„©
, 
ªc⁄
, 
upd©e
, .01, .9, .1, 2, 50);

140 
buff
[256];

141 
	`•rötf
(
buff
, "%s%d", 
«me
, 
i
);

142 
	`ßve_image
(
ªc⁄
, 
buff
);

143 
	`‰ì_image
(
upd©e
);

144  
ªc⁄
;

145 
	}
}

147 
	$gíî©e_vid_∫n
(*
cfgfûe
, *
weightfûe
)

149 
√tw‹k
 
exåa˘‹
 = 
	`∑r£_√tw‹k_cfg
("cfg/extractor.recon.cfg");

150 
	`lﬂd_weights
(&
exåa˘‹
, "/home/pjreddie/trained/yolo-coco.conv");

152 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

153 if(
weightfûe
){

154 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

156 
	`£t_b©ch_√tw‹k
(&
exåa˘‹
, 1);

157 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

159 
i
;

160 
CvC≠tuª
 *
ˇp
 = 
	`cvC≠tuªFromFûe
("/extra/vid/ILSVRC2015/Data/VID/snippets/val/ILSVRC2015_val_00007030.mp4");

161 *
„©
;

162 *
√xt
;

163 
image
 
œ°
;

164 
i
 = 0; i < 25; ++i){

165 
image
 
im
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

166 
image
 
ª
 = 
	`ªsize_image
(
im
, 
exåa˘‹
.
w
,Éxåa˘‹.
h
);

167 
„©
 = 
	`√tw‹k_¥edi˘
(
exåa˘‹
, 
ª
.
d©a
);

168 if(
i
 > 0){

169 
	`¥ötf
("%‡%f\n", 
	`món_¨øy
(
„©
, 14*14*512), 
	`v¨ün˚_¨øy
(feat, 14*14*512));

170 
	`¥ötf
("%‡%f\n", 
	`món_¨øy
(
√xt
, 14*14*512), 
	`v¨ün˚_¨øy
(next, 14*14*512));

171 
	`¥ötf
("%f\n", 
	`m£_¨øy
(
„©
, 14*14*512));

172 
	`axpy_˝u
(14*14*512, -1, 
„©
, 1, 
√xt
, 1);

173 
	`¥ötf
("%f\n", 
	`m£_¨øy
(
√xt
, 14*14*512));

175 
√xt
 = 
	`√tw‹k_¥edi˘
(
√t
, 
„©
);

177 
	`‰ì_image
(
im
);

179 
	`‰ì_image
(
	`ßve_ªc⁄°ru˘i⁄
(
exåa˘‹
, 0, 
„©
, "„©", 
i
));

180 
	`‰ì_image
(
	`ßve_ªc⁄°ru˘i⁄
(
exåa˘‹
, 0, 
√xt
, "√xt", 
i
));

181 i‡(
i
==24Ë
œ°
 = 
	`c›y_image
(
ª
);

182 
	`‰ì_image
(
ª
);

184 
i
 = 0; i < 30; ++i){

185 
√xt
 = 
	`√tw‹k_¥edi˘
(
√t
,Çext);

186 
image
 
√w
 = 
	`ßve_ªc⁄°ru˘i⁄
(
exåa˘‹
, &
œ°
, 
√xt
, "√w", 
i
);

187 
	`‰ì_image
(
œ°
);

188 
œ°
 = 
√w
;

190 
	}
}

192 
	$run_vid_∫n
(
¨gc
, **
¨gv
)

194 if(
¨gc
 < 4){

195 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

199 *
cfg
 = 
¨gv
[3];

200 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

202 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_vid_∫n
(
cfg
, 
weights
);

203 if(0==
	`°rcmp
(
¨gv
[2], "gíî©e")Ë
	`gíî©e_vid_∫n
(
cfg
, 
weights
);

204 
	}
}

206 
	$run_vid_∫n
(
¨gc
, **
¨gv
){
	}
}

	@segmenter.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

3 
	~<as£π.h
>

5 
	$åaö_£gmíãr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
, 
di•œy
)

7 
i
;

9 
avg_loss
 = -1;

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
	`¥ötf
("%d\n", 
ngpus
);

13 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network*));

15 
	`§™d
(
	`time
(0));

16 
£ed
 = 
	`ønd
();

17 
i
 = 0; i < 
ngpus
; ++i){

18 
	`§™d
(
£ed
);

19 #ifde‡
GPU


20 
	`cuda_£t_devi˚
(
gpus
[
i
]);

22 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

23 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

25 
	`§™d
(
	`time
(0));

26 
√tw‹k
 *
√t
 = 
√ts
[0];

27 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

29 
div
 = 
√t
->
w
/
¥ed
.w;

30 
	`as£π
(
¥ed
.
w
 * 
div
 =
√t
->w);

31 
	`as£π
(
¥ed
.
h
 * 
div
 =
√t
->h);

33 
imgs
 = 
√t
->
b©ch
 *Çë->
subdivisi⁄s
 * 
ngpus
;

35 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

36 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

38 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

39 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

41 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

42 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

43 
	`¥ötf
("%d\n", 
∂i°
->
size
);

44 
N
 = 
∂i°
->
size
;

45 
˛ock_t
 
time
;

47 
lﬂd_¨gs
 
¨gs
 = {0};

48 
¨gs
.
w
 = 
√t
->w;

49 
¨gs
.
h
 = 
√t
->h;

50 
¨gs
.
thªads
 = 32;

51 
¨gs
.
sˇÀ
 = 
div
;

53 
¨gs
.
mö
 = 
√t
->
mö_¸›
;

54 
¨gs
.
max
 = 
√t
->
max_¸›
;

55 
¨gs
.
™gÀ
 = 
√t
->angle;

56 
¨gs
.
a•e˘
 = 
√t
->aspect;

57 
¨gs
.
exposuª
 = 
√t
->exposure;

58 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

59 
¨gs
.
hue
 = 
√t
->hue;

60 
¨gs
.
size
 = 
√t
->
w
;

61 
¨gs
.
˛as£s
 = 80;

63 
¨gs
.
∑ths
 =Öaths;

64 
¨gs
.
n
 = 
imgs
;

65 
¨gs
.
m
 = 
N
;

66 
¨gs
.
ty≥
 = 
SEGMENTATION_DATA
;

68 
d©a
 
åaö
;

69 
d©a
 
buf„r
;

70 
±hªad_t
 
lﬂd_thªad
;

71 
¨gs
.
d
 = &
buf„r
;

72 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

74 
ïoch
 = (*
√t
->
£í
)/
N
;

75 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

76 
time
=
	`˛ock
();

78 
	`±hªad_joö
(
lﬂd_thªad
, 0);

79 
åaö
 = 
buf„r
;

80 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

82 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

83 
time
=
	`˛ock
();

85 
loss
 = 0;

86 #ifde‡
GPU


87 if(
ngpus
 == 1){

88 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

90 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

93 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

95 if(
di•œy
){

96 
image
 
å
 = 
	`Êﬂt_to_image
(
√t
->
w
/
div
,Çë->
h
/div, 80, 
åaö
.
y
.
vÆs
[√t->
b©ch
*“ë->
subdivisi⁄s
-1)]);

97 
image
 
im
 = 
	`Êﬂt_to_image
(
√t
->
w
,Çë->
h
,Çë->
c
, 
åaö
.
X
.
vÆs
[√t->
b©ch
*“ë->
subdivisi⁄s
-1)]);

98 
image
 
mask
 = 
	`mask_to_rgb
(
å
);

99 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

100 
	`show_image
(
im
, "input");

101 
	`show_image
(
¥mask
, "pred");

102 
	`show_image
(
mask
, "truth");

103 #ifde‡
OPENCV


104 
	`cvWaôKey
(100);

106 
	`‰ì_image
(
mask
);

107 
	`‰ì_image
(
¥mask
);

109 if(
avg_loss
 =-1Ëavg_los†
loss
;

110 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

111 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net->seen);

112 
	`‰ì_d©a
(
åaö
);

113 if(*
√t
->
£í
/
N
 > 
ïoch
){

114 
ïoch
 = *
√t
->
£í
/
N
;

115 
buff
[256];

116 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

117 
	`ßve_weights
(
√t
, 
buff
);

119 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

120 
buff
[256];

121 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

122 
	`ßve_weights
(
√t
, 
buff
);

125 
buff
[256];

126 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

127 
	`ßve_weights
(
√t
, 
buff
);

129 
	`‰ì_√tw‹k
(
√t
);

130 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

131 
	`‰ì_li°
(
∂i°
);

132 
	`‰ì
(
ba£
);

133 
	}
}

135 
	$¥edi˘_£gmíãr
(*
d©afûe
, *
cfg
, *
weights
, *
fûíame
)

137 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

138 
	`£t_b©ch_√tw‹k
(
√t
, 1);

139 
	`§™d
(2222222);

141 
˛ock_t
 
time
;

142 
buff
[256];

143 *
öput
 = 
buff
;

145 if(
fûíame
){

146 
	`°∫˝y
(
öput
, 
fûíame
, 256);

148 
	`¥ötf
("Enter Image Path: ");

149 
	`fÊush
(
°dout
);

150 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

151 if(!
öput
) ;

152 
	`°πok
(
öput
, "\n");

154 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

155 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

157 *
X
 = 
sized
.
d©a
;

158 
time
=
	`˛ock
();

159 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

160 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

161 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

162 
	`show_image
(
sized
, "orig");

163 
	`show_image
(
¥mask
, "pred");

164 #ifde‡
OPENCV


165 
	`cvWaôKey
(0);

167 
	`¥ötf
("Pªdi˘ed: %f\n", 
¥edi˘i⁄s
[0]);

168 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

169 
	`‰ì_image
(
im
);

170 
	`‰ì_image
(
sized
);

171 
	`‰ì_image
(
¥mask
);

172 i‡(
fûíame
) ;

174 
	}
}

177 
	$demo_£gmíãr
(*
d©acfg
, *
cfg
, *
weights
, 
ˇm_ödex
, c⁄° *
fûíame
)

179 #ifde‡
OPENCV


180 
	`¥ötf
("Classifier Demo\n");

181 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

182 
	`£t_b©ch_√tw‹k
(
√t
, 1);

184 
	`§™d
(2222222);

185 
CvC≠tuª
 * 
ˇp
;

187 if(
fûíame
){

188 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

190 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

193 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

194 
	`cvNamedWödow
("Segmíãr", 
CV_WINDOW_NORMAL
);

195 
	`cvResizeWödow
("Segmenter", 512, 512);

196 
Âs
 = 0;

199 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

200 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

202 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

203 
image
 
ö_s
 = 
	`Àâîbox_image
(
ö
, 
√t
->
w
,Çë->
h
);

205 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

207 
	`¥ötf
("\033[2J");

208 
	`¥ötf
("\033[1;1H");

209 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

211 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

212 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

213 
	`show_image
(
¥mask
, "Segmenter");

215 
	`‰ì_image
(
ö_s
);

216 
	`‰ì_image
(
ö
);

217 
	`‰ì_image
(
¥mask
);

219 
	`cvWaôKey
(10);

221 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

222 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

223 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

224 
Âs
 = .9*Â†+ .1*
cuº
;

227 
	}
}

230 
	$run_£gmíãr
(
¨gc
, **
¨gv
)

232 if(
¨gc
 < 4){

233 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

237 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

238 *
gpus
 = 0;

239 
gpu
 = 0;

240 
ngpus
 = 0;

241 if(
gpu_li°
){

242 
	`¥ötf
("%s\n", 
gpu_li°
);

243 
Àn
 = 
	`°æí
(
gpu_li°
);

244 
ngpus
 = 1;

245 
i
;

246 
i
 = 0; i < 
Àn
; ++i){

247 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

249 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

250 
i
 = 0; i < 
ngpus
; ++i){

251 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

252 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

255 
gpu
 = 
gpu_ödex
;

256 
gpus
 = &
gpu
;

257 
ngpus
 = 1;

260 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

261 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

262 
di•œy
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-display");

263 *
d©a
 = 
¨gv
[3];

264 *
cfg
 = 
¨gv
[4];

265 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

266 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

267 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`¥edi˘_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
fûíame
);

268 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
, 
di•œy
);

269 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

270 
	}
}

	@super.c

1 
	~"d¨k√t.h
"

3 
	$åaö_su≥r
(*
cfgfûe
, *
weightfûe
, 
˛ór
)

5 *
åaö_images
 = "/data/imagenet/imagenet1k.train.list";

6 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

7 
	`§™d
(
	`time
(0));

8 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

9 
	`¥ötf
("%s\n", 
ba£
);

10 
avg_loss
 = -1;

11 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

12 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

13 
imgs
 = 
√t
->
b©ch
*√t->
subdivisi⁄s
;

14 
i
 = *
√t
->
£í
/
imgs
;

15 
d©a
 
åaö
, 
buf„r
;

18 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

20 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

22 
lﬂd_¨gs
 
¨gs
 = {0};

23 
¨gs
.
w
 = 
√t
->w;

24 
¨gs
.
h
 = 
√t
->h;

25 
¨gs
.
sˇÀ
 = 4;

26 
¨gs
.
∑ths
 =Öaths;

27 
¨gs
.
n
 = 
imgs
;

28 
¨gs
.
m
 = 
∂i°
->
size
;

29 
¨gs
.
d
 = &
buf„r
;

30 
¨gs
.
ty≥
 = 
SUPER_DATA
;

32 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

33 
˛ock_t
 
time
;

35 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
){

36 
i
 += 1;

37 
time
=
	`˛ock
();

38 
	`±hªad_joö
(
lﬂd_thªad
, 0);

39 
åaö
 = 
buf„r
;

40 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

42 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

44 
time
=
	`˛ock
();

45 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

46 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

47 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

49 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

50 if(
i
%1000==0){

51 
buff
[256];

52 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

53 
	`ßve_weights
(
√t
, 
buff
);

55 if(
i
%100==0){

56 
buff
[256];

57 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

58 
	`ßve_weights
(
√t
, 
buff
);

60 
	`‰ì_d©a
(
åaö
);

62 
buff
[256];

63 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

64 
	`ßve_weights
(
√t
, 
buff
);

65 
	}
}

67 
	$ã°_su≥r
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

69 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

70 
	`£t_b©ch_√tw‹k
(
√t
, 1);

71 
	`§™d
(2222222);

73 
˛ock_t
 
time
;

74 
buff
[256];

75 *
öput
 = 
buff
;

77 if(
fûíame
){

78 
	`°∫˝y
(
öput
, 
fûíame
, 256);

80 
	`¥ötf
("Enter Image Path: ");

81 
	`fÊush
(
°dout
);

82 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

83 if(!
öput
) ;

84 
	`°πok
(
öput
, "\n");

86 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

87 
	`ªsize_√tw‹k
(
√t
, 
im
.
w
, im.
h
);

88 
	`¥ötf
("%d %d\n", 
im
.
w
, im.
h
);

90 *
X
 = 
im
.
d©a
;

91 
time
=
	`˛ock
();

92 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

93 
image
 
out
 = 
	`gë_√tw‹k_image
(
√t
);

94 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

95 
	`ßve_image
(
out
, "out");

96 
	`show_image
(
out
, "out");

98 
	`‰ì_image
(
im
);

99 i‡(
fûíame
) ;

101 
	}
}

104 
	$run_su≥r
(
¨gc
, **
¨gv
)

106 if(
¨gc
 < 4){

107 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

111 *
cfg
 = 
¨gv
[3];

112 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

113 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

114 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

115 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_su≥r
(
cfg
, 
weights
, 
˛ór
);

116 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_su≥r
(
cfg
, 
weights
, 
fûíame
);

120 
	}
}

	@swag.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

4 
	$åaö_swag
(*
cfgfûe
, *
weightfûe
)

6 *
åaö_images
 = "data/voc.0712.trainval";

7 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

8 
	`§™d
(
	`time
(0));

9 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

10 
	`¥ötf
("%s\n", 
ba£
);

11 
avg_loss
 = -1;

12 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

13 if(
weightfûe
){

14 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

16 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

17 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

18 
i
 = *
√t
.
£í
/
imgs
;

19 
d©a
 
åaö
, 
buf„r
;

21 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
 - 1];

23 
side
 = 
l
.side;

24 
˛as£s
 = 
l
.classes;

25 
jôãr
 = 
l
.jitter;

27 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

29 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

31 
lﬂd_¨gs
 
¨gs
 = {0};

32 
¨gs
.
w
 = 
√t
.w;

33 
¨gs
.
h
 = 
√t
.h;

34 
¨gs
.
∑ths
 =Öaths;

35 
¨gs
.
n
 = 
imgs
;

36 
¨gs
.
m
 = 
∂i°
->
size
;

37 
¨gs
.
˛as£s
 = classes;

38 
¨gs
.
jôãr
 = jitter;

39 
¨gs
.
num_boxes
 = 
side
;

40 
¨gs
.
d
 = &
buf„r
;

41 
¨gs
.
ty≥
 = 
REGION_DATA
;

43 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

44 
˛ock_t
 
time
;

46 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

47 
i
 += 1;

48 
time
=
	`˛ock
();

49 
	`±hªad_joö
(
lﬂd_thªad
, 0);

50 
åaö
 = 
buf„r
;

51 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

53 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

55 
time
=
	`˛ock
();

56 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

57 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

58 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

60 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

61 if(
i
%1000==0 || i == 600){

62 
buff
[256];

63 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

64 
	`ßve_weights
(
√t
, 
buff
);

66 
	`‰ì_d©a
(
åaö
);

68 
buff
[256];

69 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

70 
	`ßve_weights
(
√t
, 
buff
);

71 
	}
}

73 
	$run_swag
(
¨gc
, **
¨gv
)

75 if(
¨gc
 < 4){

76 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

80 *
cfg
 = 
¨gv
[3];

81 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

82 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_swag
(
cfg
, 
weights
);

83 
	}
}

	@tag.c

1 
	~"d¨k√t.h
"

3 
	$åaö_èg
(*
cfgfûe
, *
weightfûe
, 
˛ór
)

5 
	`§™d
(
	`time
(0));

6 
avg_loss
 = -1;

7 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

8 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

9 
	`¥ötf
("%s\n", 
ba£
);

10 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

11 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

12 
imgs
 = 1024;

13 
li°
 *
∂i°
 = 
	`gë_∑ths
("/home/pjreddie/tag/train.list");

14 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

15 
	`¥ötf
("%d\n", 
∂i°
->
size
);

16 
N
 = 
∂i°
->
size
;

17 
˛ock_t
 
time
;

18 
±hªad_t
 
lﬂd_thªad
;

19 
d©a
 
åaö
;

20 
d©a
 
buf„r
;

22 
lﬂd_¨gs
 
¨gs
 = {0};

23 
¨gs
.
w
 = 
√t
->w;

24 
¨gs
.
h
 = 
√t
->h;

26 
¨gs
.
mö
 = 
√t
->
w
;

27 
¨gs
.
max
 = 
√t
->
max_¸›
;

28 
¨gs
.
size
 = 
√t
->
w
;

30 
¨gs
.
∑ths
 =Öaths;

31 
¨gs
.
˛as£s
 = 
√t
->
ouçuts
;

32 
¨gs
.
n
 = 
imgs
;

33 
¨gs
.
m
 = 
N
;

34 
¨gs
.
d
 = &
buf„r
;

35 
¨gs
.
ty≥
 = 
TAG_DATA
;

37 
¨gs
.
™gÀ
 = 
√t
->angle;

38 
¨gs
.
exposuª
 = 
√t
->exposure;

39 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

40 
¨gs
.
hue
 = 
√t
->hue;

42 
	`Ârötf
(
°dîr
, "%d cœs£s\n", 
√t
->
ouçuts
);

44 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

45 
ïoch
 = (*
√t
->
£í
)/
N
;

46 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

47 
time
=
	`˛ock
();

48 
	`±hªad_joö
(
lﬂd_thªad
, 0);

49 
åaö
 = 
buf„r
;

51 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

52 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

53 
time
=
	`˛ock
();

54 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

55 if(
avg_loss
 =-1Ëavg_los†
loss
;

56 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

57 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net->seen);

58 
	`‰ì_d©a
(
åaö
);

59 if(*
√t
->
£í
/
N
 > 
ïoch
){

60 
ïoch
 = *
√t
->
£í
/
N
;

61 
buff
[256];

62 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

63 
	`ßve_weights
(
√t
, 
buff
);

65 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

66 
buff
[256];

67 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

68 
	`ßve_weights
(
√t
, 
buff
);

71 
buff
[256];

72 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

73 
	`ßve_weights
(
√t
, 
buff
);

75 
	`±hªad_joö
(
lﬂd_thªad
, 0);

76 
	`‰ì_d©a
(
buf„r
);

77 
	`‰ì_√tw‹k
(
√t
);

78 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

79 
	`‰ì_li°
(
∂i°
);

80 
	`‰ì
(
ba£
);

81 
	}
}

83 
	$ã°_èg
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

85 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

86 
	`£t_b©ch_√tw‹k
(
√t
, 1);

87 
	`§™d
(2222222);

88 
i
 = 0;

89 **
«mes
 = 
	`gë_œbñs
("data/tags.txt");

90 
˛ock_t
 
time
;

91 
ödexes
[10];

92 
buff
[256];

93 *
öput
 = 
buff
;

94 
size
 = 
√t
->
w
;

96 if(
fûíame
){

97 
	`°∫˝y
(
öput
, 
fûíame
, 256);

99 
	`¥ötf
("Enter Image Path: ");

100 
	`fÊush
(
°dout
);

101 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

102 if(!
öput
) ;

103 
	`°πok
(
öput
, "\n");

105 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

106 
image
 
r
 = 
	`ªsize_mö
(
im
, 
size
);

107 
	`ªsize_√tw‹k
(
√t
, 
r
.
w
,Ñ.
h
);

108 
	`¥ötf
("%d %d\n", 
r
.
w
,Ñ.
h
);

110 *
X
 = 
r
.
d©a
;

111 
time
=
	`˛ock
();

112 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

113 
	`t›_¥edi˘i⁄s
(
√t
, 10, 
ödexes
);

114 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

115 
i
 = 0; i < 10; ++i){

116 
ödex
 = 
ödexes
[
i
];

117 
	`¥ötf
("%.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

119 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

120 
	`‰ì_image
(
im
);

121 i‡(
fûíame
) ;

123 
	}
}

126 
	$run_èg
(
¨gc
, **
¨gv
)

128 if(
¨gc
 < 4){

129 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

133 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

134 *
cfg
 = 
¨gv
[3];

135 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

136 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

137 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_èg
(
cfg
, 
weights
, 
˛ór
);

138 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_èg
(
cfg
, 
weights
, 
fûíame
);

139 
	}
}

	@unet_segmenter.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

3 
	~<as£π.h
>

5 
	$åaö_u√t_£gmíãr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
, 
di•œy
)

7 
i
;

9 
avg_loss
 = -1;

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
	`¥ötf
("%d\n", 
ngpus
);

13 
√tw‹k
 **
√ts
 = 
	`ˇŒoc
(
ngpus
, (network*));

15 
	`§™d
(
	`time
(0));

16 
£ed
 = 
	`ønd
();

17 
i
 = 0; i < 
ngpus
; ++i){

18 
	`§™d
(
£ed
);

19 #ifde‡
GPU


20 
	`cuda_£t_devi˚
(
gpus
[
i
]);

22 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

23 
√ts
[
i
]->
À¨nög_øã
 *
ngpus
;

25 
	`§™d
(
	`time
(0));

26 
√tw‹k
 *
√t
 = 
√ts
[0];

27 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

29 
div
 = 
√t
->
w
/
¥ed
.w;

30 
	`as£π
(
¥ed
.
w
 * 
div
 =
√t
->w);

31 
	`as£π
(
¥ed
.
h
 * 
div
 =
√t
->h);

33 
imgs
 = 
√t
->
b©ch
 *Çë->
subdivisi⁄s
 * 
ngpus
;

35 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

36 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

38 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

39 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/unet/train.list");

41 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

42 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

43 
	`¥ötf
("%d \n", 
∂i°
->
size
);

44 
N
 = 
∂i°
->
size
;

46 
	`¥ötf
("came here!");

47 *
åaö_œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "label", "data/unet/labels.list");

49 
li°
 *
µli°
 = 
	`gë_∑ths
(
åaö_œbñ_li°
);

50 **
œbñs
 = (**)
	`li°_to_¨øy
(
µli°
);

51 
˛ock_t
 
time
;

53 
d©a
 
åaö
;

56 
åaö
 = 
	`lﬂd_d©a_u√t
(
∑ths
, 
imgs
, 
N
, 
œbñs
, 
√t
->
w
,Çë->
h
);

57 
i
 = 0; i < 215; i++){

58 
	`¥ötf
("ßm∂êimagê%f\n",()
åaö
.
y
.
vÆs
[0][
i
]);

60 
ïoch
 = (*
√t
->
£í
)/
N
;

61 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
 ||Çet->max_batches == 0){

62 
time
=
	`˛ock
();

69 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

70 
time
=
	`˛ock
();

71 
loss
 = 0;

73 #ifde‡
GPU


74 if(
ngpus
 == 1){

75 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

77 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

80 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

83 if(
di•œy
){

84 
image
 
å
 = 
	`Êﬂt_to_image
(
√t
->
w
/
div
,Çë->
h
/div, 80, 
åaö
.
y
.
vÆs
[√t->
b©ch
*“ë->
subdivisi⁄s
-1)]);

85 
image
 
im
 = 
	`Êﬂt_to_image
(
√t
->
w
,Çë->
h
,Çë->
c
, 
åaö
.
X
.
vÆs
[√t->
b©ch
*“ë->
subdivisi⁄s
-1)]);

86 
image
 
mask
 = 
	`mask_to_rgb
(
å
);

87 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

88 
	`show_image
(
im
, "input");

89 
	`show_image
(
¥mask
, "pred");

90 
	`show_image
(
mask
, "truth");

91 #ifde‡
OPENCV


92 
	`cvWaôKey
(100);

94 
	`‰ì_image
(
mask
);

95 
	`‰ì_image
(
¥mask
);

97 if(
avg_loss
 =-1Ëavg_los†
loss
;

98 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

99 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t->
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net->seen);

100 
	`‰ì_d©a
(
åaö
);

101 if(*
√t
->
£í
/
N
 > 
ïoch
){

102 
ïoch
 = *
√t
->
£í
/
N
;

103 
buff
[256];

104 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

105 
	`ßve_weights
(
√t
, 
buff
);

107 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

108 
buff
[256];

109 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

110 
	`ßve_weights
(
√t
, 
buff
);

113 
buff
[256];

114 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

115 
	`ßve_weights
(
√t
, 
buff
);

117 
	`‰ì_√tw‹k
(
√t
);

118 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

119 
	`‰ì_li°
(
∂i°
);

120 
	`‰ì
(
ba£
);

121 
	}
}

123 
	$¥edi˘_u√t_£gmíãr
(*
d©afûe
, *
cfg
, *
weights
, *
fûíame
)

125 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

126 
	`£t_b©ch_√tw‹k
(
√t
, 1);

127 
	`§™d
(2222222);

129 
˛ock_t
 
time
;

130 
buff
[256];

131 *
öput
 = 
buff
;

133 if(
fûíame
){

134 
	`°∫˝y
(
öput
, 
fûíame
, 256);

136 
	`¥ötf
("Enter Image Path: ");

137 
	`fÊush
(
°dout
);

138 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

139 if(!
öput
) ;

140 
	`°πok
(
öput
, "\n");

142 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

143 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

145 *
X
 = 
sized
.
d©a
;

146 
time
=
	`˛ock
();

147 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

148 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

149 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

150 
	`show_image
(
sized
, "orig");

151 
	`show_image
(
¥mask
, "pred");

152 #ifde‡
OPENCV


153 
	`cvWaôKey
(0);

155 
	`¥ötf
("Pªdi˘ed: %f\n", 
¥edi˘i⁄s
[0]);

156 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

157 
	`‰ì_image
(
im
);

158 
	`‰ì_image
(
sized
);

159 
	`‰ì_image
(
¥mask
);

160 i‡(
fûíame
) ;

162 
	}
}

165 
	$demo_u√t_£gmíãr
(*
d©acfg
, *
cfg
, *
weights
, 
ˇm_ödex
, c⁄° *
fûíame
)

167 #ifde‡
OPENCV


168 
	`¥ötf
("Classifier Demo\n");

169 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

170 
	`£t_b©ch_√tw‹k
(
√t
, 1);

172 
	`§™d
(2222222);

173 
CvC≠tuª
 * 
ˇp
;

175 if(
fûíame
){

176 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

178 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

181 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

182 
	`cvNamedWödow
("Segmíãr", 
CV_WINDOW_NORMAL
);

183 
	`cvResizeWödow
("Segmenter", 512, 512);

184 
Âs
 = 0;

187 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

188 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

190 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

191 
image
 
ö_s
 = 
	`Àâîbox_image
(
ö
, 
√t
->
w
,Çë->
h
);

193 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

195 
	`¥ötf
("\033[2J");

196 
	`¥ötf
("\033[1;1H");

197 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

199 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

200 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

201 
	`show_image
(
¥mask
, "Segmenter");

203 
	`‰ì_image
(
ö_s
);

204 
	`‰ì_image
(
ö
);

205 
	`‰ì_image
(
¥mask
);

207 
	`cvWaôKey
(10);

209 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

210 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

211 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

212 
Âs
 = .9*Â†+ .1*
cuº
;

215 
	}
}

218 
	$run_u√t_£gmíãr
(
¨gc
, **
¨gv
)

220 if(
¨gc
 < 4){

221 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

225 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

226 *
gpus
 = 0;

227 
gpu
 = 0;

228 
ngpus
 = 0;

229 if(
gpu_li°
){

230 
	`¥ötf
("%s\n", 
gpu_li°
);

231 
Àn
 = 
	`°æí
(
gpu_li°
);

232 
ngpus
 = 1;

233 
i
;

234 
i
 = 0; i < 
Àn
; ++i){

235 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

237 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

238 
i
 = 0; i < 
ngpus
; ++i){

239 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

240 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

243 
gpu
 = 
gpu_ödex
;

244 
gpus
 = &
gpu
;

245 
ngpus
 = 1;

248 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

249 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

250 
di•œy
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-display");

251 *
d©a
 = 
¨gv
[3];

252 *
cfg
 = 
¨gv
[4];

253 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

254 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

255 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`¥edi˘_u√t_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
fûíame
);

256 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_u√t_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
, 
di•œy
);

257 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_u√t_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

258 
	}
}

	@voxel.c

1 
	~"d¨k√t.h
"

3 
	$exåa˘_voxñ
(*
lfûe
, *
rfûe
, *
¥efix
)

5 #ifde‡
OPENCV


6 
w
 = 1920;

7 
h
 = 1080;

8 
shi·
 = 0;

9 
cou¡
 = 0;

10 
CvC≠tuª
 *
lˇp
 = 
	`cvC≠tuªFromFûe
(
lfûe
);

11 
CvC≠tuª
 *
rˇp
 = 
	`cvC≠tuªFromFûe
(
rfûe
);

13 
image
 
l
 = 
	`gë_image_‰om_°ªam
(
lˇp
);

14 
image
 
r
 = 
	`gë_image_‰om_°ªam
(
rˇp
);

15 if(!
l
.
w
 || !
r
.w) ;

16 if(
cou¡
%100 == 0) {

17 
shi·
 = 
	`be°_3d_shi·_r
(
l
, 
r
, -l.
h
/100,Ü.h/100);

18 
	`¥ötf
("%d\n", 
shi·
);

20 
image
 
ls
 = 
	`¸›_image
(
l
, (l.
w
 - w)/2, (l.
h
 - h)/2, w, h);

21 
image
 
rs
 = 
	`¸›_image
(
r
, 105 + (r.
w
 - w)/2, (r.
h
 - h)/2 + 
shi·
, w, h);

22 
buff
[256];

23 
	`•rötf
(
buff
, "%s_%05d_l", 
¥efix
, 
cou¡
);

24 
	`ßve_image
(
ls
, 
buff
);

25 
	`•rötf
(
buff
, "%s_%05d_r", 
¥efix
, 
cou¡
);

26 
	`ßve_image
(
rs
, 
buff
);

27 
	`‰ì_image
(
l
);

28 
	`‰ì_image
(
r
);

29 
	`‰ì_image
(
ls
);

30 
	`‰ì_image
(
rs
);

31 ++
cou¡
;

35 
	`¥ötf
("need OpenCV forÉxtraction\n");

37 
	}
}

39 
	$åaö_voxñ
(*
cfgfûe
, *
weightfûe
)

41 *
åaö_images
 = "/data/imagenet/imagenet1k.train.list";

42 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

43 
	`§™d
(
	`time
(0));

44 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

45 
	`¥ötf
("%s\n", 
ba£
);

46 
avg_loss
 = -1;

47 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

48 if(
weightfûe
){

49 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

51 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

52 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

53 
i
 = *
√t
.
£í
/
imgs
;

54 
d©a
 
åaö
, 
buf„r
;

57 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

59 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

61 
lﬂd_¨gs
 
¨gs
 = {0};

62 
¨gs
.
w
 = 
√t
.w;

63 
¨gs
.
h
 = 
√t
.h;

64 
¨gs
.
sˇÀ
 = 4;

65 
¨gs
.
∑ths
 =Öaths;

66 
¨gs
.
n
 = 
imgs
;

67 
¨gs
.
m
 = 
∂i°
->
size
;

68 
¨gs
.
d
 = &
buf„r
;

69 
¨gs
.
ty≥
 = 
SUPER_DATA
;

71 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

72 
˛ock_t
 
time
;

74 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

75 
i
 += 1;

76 
time
=
	`˛ock
();

77 
	`±hªad_joö
(
lﬂd_thªad
, 0);

78 
åaö
 = 
buf„r
;

79 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

81 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

83 
time
=
	`˛ock
();

84 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

85 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

86 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

88 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

89 if(
i
%1000==0){

90 
buff
[256];

91 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

92 
	`ßve_weights
(
√t
, 
buff
);

94 if(
i
%100==0){

95 
buff
[256];

96 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

97 
	`ßve_weights
(
√t
, 
buff
);

99 
	`‰ì_d©a
(
åaö
);

101 
buff
[256];

102 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

103 
	`ßve_weights
(
√t
, 
buff
);

104 
	}
}

106 
	$ã°_voxñ
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

108 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

109 if(
weightfûe
){

110 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

112 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

113 
	`§™d
(2222222);

115 
˛ock_t
 
time
;

116 
buff
[256];

117 *
öput
 = 
buff
;

119 if(
fûíame
){

120 
	`°∫˝y
(
öput
, 
fûíame
, 256);

122 
	`¥ötf
("Enter Image Path: ");

123 
	`fÊush
(
°dout
);

124 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

125 if(!
öput
) ;

126 
	`°πok
(
öput
, "\n");

128 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

129 
	`ªsize_√tw‹k
(&
√t
, 
im
.
w
, im.
h
);

130 
	`¥ötf
("%d %d\n", 
im
.
w
, im.
h
);

132 *
X
 = 
im
.
d©a
;

133 
time
=
	`˛ock
();

134 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

135 
image
 
out
 = 
	`gë_√tw‹k_image
(
√t
);

136 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

137 
	`ßve_image
(
out
, "out");

139 
	`‰ì_image
(
im
);

140 i‡(
fûíame
) ;

142 
	}
}

145 
	$run_voxñ
(
¨gc
, **
¨gv
)

147 if(
¨gc
 < 4){

148 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

152 *
cfg
 = 
¨gv
[3];

153 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

154 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

155 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_voxñ
(
cfg
, 
weights
);

156 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_voxñ
(
cfg
, 
weights
, 
fûíame
);

157 if(0==
	`°rcmp
(
¨gv
[2], "exåa˘")Ë
	`exåa˘_voxñ
(argv[3],árgv[4],árgv[5]);

161 
	}
}

	@writing.c

1 
	~"d¨k√t.h
"

3 
	$åaö_wrôög
(*
cfgfûe
, *
weightfûe
)

5 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

6 
	`§™d
(
	`time
(0));

7 
avg_loss
 = -1;

8 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

9 
	`¥ötf
("%s\n", 
ba£
);

10 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

11 if(
weightfûe
){

12 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

14 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

15 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

16 
li°
 *
∂i°
 = 
	`gë_∑ths
("figures.list");

17 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

18 
˛ock_t
 
time
;

19 
N
 = 
∂i°
->
size
;

20 
	`¥ötf
("N: %d\n", 
N
);

21 
image
 
out
 = 
	`gë_√tw‹k_image
(
√t
);

23 
d©a
 
åaö
, 
buf„r
;

25 
lﬂd_¨gs
 
¨gs
 = {0};

26 
¨gs
.
w
 = 
√t
.w;

27 
¨gs
.
h
 = 
√t
.h;

28 
¨gs
.
out_w
 = 
out
.
w
;

29 
¨gs
.
out_h
 = 
out
.
h
;

30 
¨gs
.
∑ths
 =Öaths;

31 
¨gs
.
n
 = 
imgs
;

32 
¨gs
.
m
 = 
N
;

33 
¨gs
.
d
 = &
buf„r
;

34 
¨gs
.
ty≥
 = 
WRITING_DATA
;

36 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

37 
ïoch
 = (*
√t
.
£í
)/
N
;

38 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

39 
time
=
	`˛ock
();

40 
	`±hªad_joö
(
lﬂd_thªad
, 0);

41 
åaö
 = 
buf„r
;

42 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

43 
	`¥ötf
("Lﬂded %l‡£c⁄ds\n",
	`£c
(
	`˛ock
()-
time
));

45 
time
=
	`˛ock
();

46 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

64 if(
avg_loss
 =-1Ëavg_los†
loss
;

65 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

66 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

67 
	`‰ì_d©a
(
åaö
);

68 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

69 
buff
[256];

70 
	`•rötf
(
buff
, "%s/%s_b©ch_%ld.weights", 
backup_dúe˘‹y
, 
ba£
, 
	`gë_cuºít_b©ch
(
√t
));

71 
	`ßve_weights
(
√t
, 
buff
);

73 if(*
√t
.
£í
/
N
 > 
ïoch
){

74 
ïoch
 = *
√t
.
£í
/
N
;

75 
buff
[256];

76 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

77 
	`ßve_weights
(
√t
, 
buff
);

80 
	}
}

82 
	$ã°_wrôög
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

84 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

85 if(
weightfûe
){

86 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

88 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

89 
	`§™d
(2222222);

90 
˛ock_t
 
time
;

91 
buff
[256];

92 *
öput
 = 
buff
;

94 if(
fûíame
){

95 
	`°∫˝y
(
öput
, 
fûíame
, 256);

97 
	`¥ötf
("Enter Image Path: ");

98 
	`fÊush
(
°dout
);

99 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

100 if(!
öput
) ;

101 
	`°πok
(
öput
, "\n");

104 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

105 
	`ªsize_√tw‹k
(&
√t
, 
im
.
w
, im.
h
);

106 
	`¥ötf
("%d %d %d\n", 
im
.
h
, im.
w
, im.
c
);

107 *
X
 = 
im
.
d©a
;

108 
time
=
	`˛ock
();

109 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

110 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

111 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

113 
image
 
upßm∂ed
 = 
	`ªsize_image
(
¥ed
, 
im
.
w
, im.
h
);

114 
image
 
thªsh
 = 
	`thªshﬁd_image
(
upßm∂ed
, .5);

115 
¥ed
 = 
thªsh
;

117 
	`show_image
(
¥ed
, "prediction");

118 
	`show_image
(
im
, "orig");

119 #ifde‡
OPENCV


120 
	`cvWaôKey
(0);

121 
	`cvDe°royAŒWödows
();

124 
	`‰ì_image
(
upßm∂ed
);

125 
	`‰ì_image
(
thªsh
);

126 
	`‰ì_image
(
im
);

127 i‡(
fûíame
) ;

129 
	}
}

131 
	$run_wrôög
(
¨gc
, **
¨gv
)

133 if(
¨gc
 < 4){

134 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

138 *
cfg
 = 
¨gv
[3];

139 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

140 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

141 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_wrôög
(
cfg
, 
weights
);

142 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_wrôög
(
cfg
, 
weights
, 
fûíame
);

143 
	}
}

	@yolo.c

1 
	~"d¨k√t.h
"

3 *
	gvoc_«mes
[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};

5 
	$åaö_yﬁo
(*
cfgfûe
, *
weightfûe
)

7 *
åaö_images
 = "/data/voc/train.txt";

8 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

9 
	`§™d
(
	`time
(0));

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
avg_loss
 = -1;

13 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

14 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

15 
imgs
 = 
√t
->
b©ch
*√t->
subdivisi⁄s
;

16 
i
 = *
√t
->
£í
/
imgs
;

17 
d©a
 
åaö
, 
buf„r
;

20 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
 - 1];

22 
side
 = 
l
.side;

23 
˛as£s
 = 
l
.classes;

24 
jôãr
 = 
l
.jitter;

26 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

28 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

30 
lﬂd_¨gs
 
¨gs
 = {0};

31 
¨gs
.
w
 = 
√t
->w;

32 
¨gs
.
h
 = 
√t
->h;

33 
¨gs
.
∑ths
 =Öaths;

34 
¨gs
.
n
 = 
imgs
;

35 
¨gs
.
m
 = 
∂i°
->
size
;

36 
¨gs
.
˛as£s
 = classes;

37 
¨gs
.
jôãr
 = jitter;

38 
¨gs
.
num_boxes
 = 
side
;

39 
¨gs
.
d
 = &
buf„r
;

40 
¨gs
.
ty≥
 = 
REGION_DATA
;

42 
¨gs
.
™gÀ
 = 
√t
->angle;

43 
¨gs
.
exposuª
 = 
√t
->exposure;

44 
¨gs
.
ßtuøti⁄
 = 
√t
->saturation;

45 
¨gs
.
hue
 = 
√t
->hue;

47 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

48 
˛ock_t
 
time
;

50 
	`gë_cuºít_b©ch
(
√t
Ë<Çë->
max_b©ches
){

51 
i
 += 1;

52 
time
=
	`˛ock
();

53 
	`±hªad_joö
(
lﬂd_thªad
, 0);

54 
åaö
 = 
buf„r
;

55 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

57 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

59 
time
=
	`˛ock
();

60 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

61 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

62 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

64 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

65 if(
i
%1000==0 || (i < 1000 && i%100 == 0)){

66 
buff
[256];

67 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

68 
	`ßve_weights
(
√t
, 
buff
);

70 
	`‰ì_d©a
(
åaö
);

72 
buff
[256];

73 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

74 
	`ßve_weights
(
√t
, 
buff
);

75 
	}
}

77 
	$¥öt_yﬁo_dëe˘i⁄s
(
FILE
 **
Âs
, *
id
, 
tŸÆ
, 
˛as£s
, 
w
, 
h
, 
dëe˘i⁄
 *
dës
)

79 
i
, 
j
;

80 
i
 = 0; i < 
tŸÆ
; ++i){

81 
xmö
 = 
dës
[
i
].
bbox
.
x
 - dës[i].bbox.
w
/2.;

82 
xmax
 = 
dës
[
i
].
bbox
.
x
 + dës[i].bbox.
w
/2.;

83 
ymö
 = 
dës
[
i
].
bbox
.
y
 - dës[i].bbox.
h
/2.;

84 
ymax
 = 
dës
[
i
].
bbox
.
y
 + dës[i].bbox.
h
/2.;

86 i‡(
xmö
 < 0) xmin = 0;

87 i‡(
ymö
 < 0) ymin = 0;

88 i‡(
xmax
 > 
w
) xmax = w;

89 i‡(
ymax
 > 
h
) ymax = h;

91 
j
 = 0; j < 
˛as£s
; ++j){

92 i‡(
dës
[
i
].
¥ob
[
j
]Ë
	`Ârötf
(
Âs
[j], "%†%‡%‡%‡%‡%f\n", 
id
, dets[i].prob[j],

93 
xmö
, 
ymö
, 
xmax
, 
ymax
);

96 
	}
}

98 
	$vÆid©e_yﬁo
(*
cfg
, *
weights
)

100 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

101 
	`£t_b©ch_√tw‹k
(
√t
, 1);

102 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

103 
	`§™d
(
	`time
(0));

105 *
ba£
 = "results/comp4_det_test_";

107 
li°
 *
∂i°
 = 
	`gë_∑ths
("/home/pjreddie/data/voc/2007_test.txt");

109 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

111 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

112 
˛as£s
 = 
l
.classes;

114 
j
;

115 
FILE
 **
Âs
 = 
	`ˇŒoc
(
˛as£s
, (FILE *));

116 
j
 = 0; j < 
˛as£s
; ++j){

117 
buff
[1024];

118 
	`¢¥ötf
(
buff
, 1024, "%s%s.txt", 
ba£
, 
voc_«mes
[
j
]);

119 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

122 
m
 = 
∂i°
->
size
;

123 
i
=0;

124 
t
;

126 
thªsh
 = .001;

127 
nms
 = 1;

128 
iou_thªsh
 = .5;

130 
¡hªads
 = 8;

131 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

132 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

133 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

134 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

135 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

137 
lﬂd_¨gs
 
¨gs
 = {0};

138 
¨gs
.
w
 = 
√t
->w;

139 
¨gs
.
h
 = 
√t
->h;

140 
¨gs
.
ty≥
 = 
IMAGE_DATA
;

142 
t
 = 0;Å < 
¡hªads
; ++t){

143 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

144 
¨gs
.
im
 = &
buf
[
t
];

145 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

146 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

148 
time_t
 
°¨t
 = 
	`time
(0);

149 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

150 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

151 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

152 
	`±hªad_joö
(
thr
[
t
], 0);

153 
vÆ
[
t
] = 
buf
[t];

154 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

156 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

157 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

158 
¨gs
.
im
 = &
buf
[
t
];

159 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

160 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

162 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

163 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

164 *
id
 = 
	`ba£cfg
(
∑th
);

165 *
X
 = 
vÆ_ªsized
[
t
].
d©a
;

166 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

167 
w
 = 
vÆ
[
t
].w;

168 
h
 = 
vÆ
[
t
].h;

169 
nboxes
 = 0;

170 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
w
, 
h
, 
thªsh
, 0, 0, 0, &
nboxes
);

171 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
l
.
side
*l.side*l.
n
, 
˛as£s
, 
iou_thªsh
);

172 
	`¥öt_yﬁo_dëe˘i⁄s
(
Âs
, 
id
, 
l
.
side
*l.side*l.
n
, 
˛as£s
, 
w
, 
h
, 
dës
);

173 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

174 
	`‰ì
(
id
);

175 
	`‰ì_image
(
vÆ
[
t
]);

176 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

179 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", ()(
	`time
(0Ë- 
°¨t
));

180 
	}
}

182 
	$vÆid©e_yﬁo_ªˇŒ
(*
cfg
, *
weights
)

184 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 0);

185 
	`£t_b©ch_√tw‹k
(
√t
, 1);

186 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
->
À¨nög_øã
,Çë->
momítum
,Çë->
deˇy
);

187 
	`§™d
(
	`time
(0));

189 *
ba£
 = "results/comp4_det_test_";

190 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/voc.2007.test");

191 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

193 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

194 
˛as£s
 = 
l
.classes;

195 
side
 = 
l
.side;

197 
j
, 
k
;

198 
FILE
 **
Âs
 = 
	`ˇŒoc
(
˛as£s
, (FILE *));

199 
j
 = 0; j < 
˛as£s
; ++j){

200 
buff
[1024];

201 
	`¢¥ötf
(
buff
, 1024, "%s%s.txt", 
ba£
, 
voc_«mes
[
j
]);

202 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

205 
m
 = 
∂i°
->
size
;

206 
i
=0;

208 
thªsh
 = .001;

209 
iou_thªsh
 = .5;

210 
nms
 = 0;

212 
tŸÆ
 = 0;

213 
c‹ª˘
 = 0;

214 
¥›oßls
 = 0;

215 
avg_iou
 = 0;

217 
i
 = 0; i < 
m
; ++i){

218 *
∑th
 = 
∑ths
[
i
];

219 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
∑th
, 0, 0);

220 
image
 
sized
 = 
	`ªsize_image
(
‹ig
, 
√t
->
w
,Çë->
h
);

221 *
id
 = 
	`ba£cfg
(
∑th
);

222 
	`√tw‹k_¥edi˘
(
√t
, 
sized
.
d©a
);

224 
nboxes
 = 0;

225 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 
‹ig
.
w
, orig.
h
, 
thªsh
, 0, 0, 1, &
nboxes
);

226 i‡(
nms
Ë
	`do_nms_obj
(
dës
, 
side
*side*
l
.
n
, 1,Çms);

228 
œbñ∑th
[4096];

229 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

230 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

231 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

232 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

234 
num_œbñs
 = 0;

235 
box_œbñ
 *
åuth
 = 
	`ªad_boxes
(
œbñ∑th
, &
num_œbñs
);

236 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

237 if(
dës
[
k
].
obje˘√ss
 > 
thªsh
){

238 ++
¥›oßls
;

241 
j
 = 0; j < 
num_œbñs
; ++j) {

242 ++
tŸÆ
;

243 
box
 
t
 = {
åuth
[
j
].
x
,Åruth[j].
y
,Åruth[j].
w
,Åruth[j].
h
};

244 
be°_iou
 = 0;

245 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

246 
iou
 = 
	`box_iou
(
dës
[
k
].
bbox
, 
t
);

247 if(
dës
[
k
].
obje˘√ss
 > 
thªsh
 && 
iou
 > 
be°_iou
){

248 
be°_iou
 = 
iou
;

251 
avg_iou
 +
be°_iou
;

252 if(
be°_iou
 > 
iou_thªsh
){

253 ++
c‹ª˘
;

257 
	`Ârötf
(
°dîr
, "%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tReˇŒ:%.2f%%\n", 
i
, 
c‹ª˘
, 
tŸÆ
, ()
¥›oßls
/(i+1), 
avg_iou
*100/total, 100.*correct/total);

258 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

259 
	`‰ì
(
id
);

260 
	`‰ì_image
(
‹ig
);

261 
	`‰ì_image
(
sized
);

263 
	}
}

265 
	$ã°_yﬁo
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
)

267 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

268 
√tw‹k
 *
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

269 
œyî
 
l
 = 
√t
->
œyîs
[√t->
n
-1];

270 
	`£t_b©ch_√tw‹k
(
√t
, 1);

271 
	`§™d
(2222222);

272 
˛ock_t
 
time
;

273 
buff
[256];

274 *
öput
 = 
buff
;

275 
nms
=.4;

277 if(
fûíame
){

278 
	`°∫˝y
(
öput
, 
fûíame
, 256);

280 
	`¥ötf
("Enter Image Path: ");

281 
	`fÊush
(
°dout
);

282 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

283 if(!
öput
) ;

284 
	`°πok
(
öput
, "\n");

286 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
,0,0);

287 
image
 
sized
 = 
	`ªsize_image
(
im
, 
√t
->
w
,Çë->
h
);

288 *
X
 = 
sized
.
d©a
;

289 
time
=
	`˛ock
();

290 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

291 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

293 
nboxes
 = 0;

294 
dëe˘i⁄
 *
dës
 = 
	`gë_√tw‹k_boxes
(
√t
, 1, 1, 
thªsh
, 0, 0, 0, &
nboxes
);

295 i‡(
nms
Ë
	`do_nms_s‹t
(
dës
, 
l
.
side
*l.side*l.
n
,Ü.
˛as£s
,Çms);

297 
	`døw_dëe˘i⁄s
(
im
, 
dës
, 
l
.
side
*l.side*l.
n
, 
thªsh
, 
voc_«mes
, 
Æphabë
, 20);

298 
	`ßve_image
(
im
, "predictions");

299 
	`show_image
(
im
, "predictions");

300 
	`‰ì_dëe˘i⁄s
(
dës
, 
nboxes
);

301 
	`‰ì_image
(
im
);

302 
	`‰ì_image
(
sized
);

303 #ifde‡
OPENCV


304 
	`cvWaôKey
(0);

305 
	`cvDe°royAŒWödows
();

307 i‡(
fûíame
) ;

309 
	}
}

311 
	$run_yﬁo
(
¨gc
, **
¨gv
)

313 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

314 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .2);

315 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

316 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

317 if(
¨gc
 < 4){

318 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

322 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 1);

323 *
cfg
 = 
¨gv
[3];

324 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

325 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

326 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_yﬁo
(
cfg
, 
weights
, 
fûíame
, 
thªsh
);

327 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_yﬁo
(
cfg
, 
weights
);

328 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_yﬁo
(
cfg
, 
weights
);

329 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_yﬁo_ªˇŒ
(
cfg
, 
weights
);

330 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
voc_«mes
, 20, 
‰ame_skù
, 
¥efix
, 
avg
, .5, 0,0,0,0);

331 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
41
608
art.c
attention.c
captcha.c
cifar.c
classifier.c
coco.c
darknet.c
detector.c
dice.c
go.c
lsd.c
nightmare.c
regressor.c
rnn.c
rnn_vid.c
segmenter.c
super.c
swag.c
tag.c
unet_segmenter.c
voxel.c
writing.c
yolo.c
/usr/include/assert.h
/usr/include/math.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
